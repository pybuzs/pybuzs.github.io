[{"title":"windows同时安装两个不同版本的Mysql","url":"/2025/06/23/RandomNotes/windows同时安装两个不同版本的Mysql/","content":"\n# windows同时安装两个不同版本的Mysql\n\n> 本地已经安装了mysql-5.7.11 版本，现在需要再安装一个8版本的MySQL，由此记录一下。\n\n查看本地mysql版本\n\n![image-20250623105447154](windows同时安装两个不同版本的Mysql/image-20250623105447154.png)\n\n## 1.下载MySQL\n\n   官网下载历史版本地址：[MySQL :: Download MySQL Community Server (Archived Versions)](https://downloads.mysql.com/archives/community/)\n\n   ![image-20250623105636240](windows同时安装两个不同版本的Mysql/image-20250623105636240.png)\n\n   选择版本后点击下载。\n\n## 2.下载完成后，解压文件。（ps:注意将压缩包解压到和之前版本不同路径（路径请勿包含中文或空格））。\n\n   ![image-20250623110239035](windows同时安装两个不同版本的Mysql/image-20250623110239035.png)\n\n## 3.创建 `my.ini` 配置文件（放在解压根目录，如 `D:\\mysql-8.0.28\\my.ini`）\n\n   ```sql\n   [mysqld]\n   # 端口（如 3307，与 5.7 不同）\n   port=3307  \n   # 安装目录\n   basedir=\"D:/Application/mysql-8.0.28\"\n   # 数据目录\n   datadir=\"D:/Application/mysql-8.0.28/data\"\n   # 服务端使用的字符集默认为UTF8\n   character-set-server=utf8mb4  \n   # 创建新表时将使用的默认存储引擎\n   default-storage-engine=INNODB  \n   # MySQL 8.0 认证插件（兼容旧客户端）\n   default_authentication_plugin=mysql_native_password  \n   \n   [mysql]\n   # 设置mysql客户端默认字符集\n   default-character-set=utf8\n   \n   [client]\n   port=3307  \n   default-character-set=utf8mb4  \n   ```\n\n## 4.配置环境变量(如果之前配置了，有两个MySQL环境变量，可能会出问题，可以不用配置)\n\n   ![image-20250623111656690](windows同时安装两个不同版本的Mysql/image-20250623111656690.png)\n\n## 5.**初始化数据库**\n\n   以 **管理员身份** 运行命令提示符（CMD）。\n\n   ![image-20250623111914560](windows同时安装两个不同版本的Mysql/image-20250623111914560.png)\n\n   ```cmd\n   cd D:\\Application\\mysql-8.0.28\\bin\n   mysqld --initialize --console\n   ```\n\n   ![image-20250623115354997](windows同时安装两个不同版本的Mysql/image-20250623115354997.png)\n\n   **记下 root 临时密码**\n\n## 6.**安装 Windows 服务**\n\n   ```cmd\n   mysqld --install MySQL80 --defaults-file=\"D:\\Application\\mysql-8.0.28\\my.ini\"\n   ```\n\n   ![image-20250623115713654](windows同时安装两个不同版本的Mysql/image-20250623115713654.png)\n\n## 7.启动服务\n\n   ```cmd\n   net start MySQL80\n   ```\n\n   可能会启动失败\n\n   ![image-20250623140733000](windows同时安装两个不同版本的Mysql/image-20250623140733000.png)\n\n   解决：\n\n   - Win键+R输入`services.msc`,打开服务面板。\n   \n     ![image-20250623141120701](windows同时安装两个不同版本的Mysql/image-20250623141120701.png)\n   \n     发现可执行文件目录是5.7的地址。有可能是因为多个MySQL环境变量导致。\n   \n   - 路径不对，如何修改？\n   \n     Win键+R输入`regedit`打开注册表，在HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\MySQL80 目录下修改ImagePath的路径（）。\n   \n     ![image-20250623141938503](windows同时安装两个不同版本的Mysql/image-20250623141938503.png)\n   \n   - 重启启动服务\n   \n     ![image-20250623142139773](windows同时安装两个不同版本的Mysql/image-20250623142139773.png)\n\n\n\n## 8.登录MySQL\n\n   密码是上面生成的临时密码\n\n   ![image-20250623142444958](windows同时安装两个不同版本的Mysql/image-20250623142444958.png)\n\n## 9.修改密码\n\n   ```cmd\n   ALTER USER 'root'@'localhost' IDENTIFIED BY '密码';\n   ```\n\n## 10.登录出现错误\n\n    在系统命令行下\n    \n    ![image-20250623144004660](windows同时安装两个不同版本的Mysql/image-20250623144004660.png)\n    \n    解决方式\n    \n    - 切换到安装目录\n    \n      ![image-20250623144053557](windows同时安装两个不同版本的Mysql/image-20250623144053557.png)\n    \n    - 连接时添加 `--ssl-mode=DISABLED` 禁用 SSL 验证（因为MySQL8默认开启SSL加密）\n    \n      ```cmd\n      mysql -uroot -p -P3307 --ssl-mode=DISABLED\n      ```\n    \n      ![image-20250623144204196](windows同时安装两个不同版本的Mysql/image-20250623144204196.png)\n\n","tags":["随笔"],"categories":["随笔"]},{"title":"MySQL面试题","url":"/2025/06/23/Interview/MySQL面试题/","content":"\n# MySQL面试题\n\n> 此笔记为本人备考面试时整理，内容多源于网络搜集，仅作后续查阅之用，无盈利意图。若有侵权，请联系删除。\n>\n> 参考资料：\n>\n> https://javaguide.cn/\n>\n> https://www.xiaolincoding.com/\n>\n> [https://pdai.tech](https://pdai.tech/)\n>\n> https://javabetter.cn/\n\n## 一、MySQL基础\n\n\n### 1、数据库三大范式\n\n{% hideBlock 查看答案 %}\n\n- 1NF 要求字段值必须是**不可再分的原子值**。\n\n  反例：`用户信息表`中`地址`字段存储 “北京市海淀区”，未拆分为`省`、`市`、`区`，违反 1NF；\n  正例：拆分为`province`、`city`、`district`，每个字段独立存储。\n\n- 2NF 1NF的基础上，要求非主属性完全依赖主键，避免部分依赖（如订单明细拆分）。\n\n  场景：`订单明细表`（（`订单号`+`商品ID`为主键）+ 金额 ），若字段`订单金额`仅依赖`订单号`，则存在**部分依赖**（非主属性`订单金额`不依赖`商品ID`），违反 2NF；\n  优化：拆分为`订单表`（订单号、金额）和`订单明细表`（订单号、商品 ID、数量）。\n\n- 3NF 2NF的基础上，**非主键字段之间不能有依赖关系**，消除传递依赖，如学生表与班级表分离。\n\n  反例：`学生表`（学生 ID，姓名，班级 ID，班级地址）中，`班级地址`依赖`班级ID`，形成 “学生 ID→班级 ID→班级地址” 的传递依赖，违反 3NF；\n  优化：拆分为`学生表`（学生 ID，姓名，班级 ID）和`班级表`（班级 ID，班级地址）。\n\n{% endhideBlock %}\n\n### 2、char 和 varchar 的区别是什么？\n\n{% hideBlock 查看答案 %}\n\n| **特性**     | **CHAR**                     | **VARCHAR**                   |\n| :----------- | :--------------------------- | :---------------------------- |\n| **存储方式** | 固定长度                     | 可变长度                      |\n| **空间占用** | 始终占用定义长度（可能浪费） | 仅占用实际数据长度 + 长度标识 |\n| **存储开销** | 无额外开销                   | 额外1~2字节存储长度           |\n| **查询速度** | 更快（固定长度直接定位）     | 稍慢（需计算位置）            |\n| **适用场景** | 长度固定的短字符串（如MD5）  | 长度变化大的字符串（如地址）  |\n| **空格处理** | 存入时补足空格，查询时去除   | 原样存储和返回                |\n\n- **`CHAR` 是定长分配**，适合存储固定长度短字符串（如验证码），查询更快但可能浪费空间；\n- **`VARCHAR` 是变长存储**，适合长度不确定的数据（如用户名），空间利用率高但需额外长度标识。\n\n{% endhideBlock %}\n\n### 3、varchar (100)和 varchar (10)的区别是什么？\n\n{% hideBlock 查看答案 %}\n\n#### 1. 存储机制\n\n- **两者相同点**：\n  - 都是**可变长度**字符串类型\n  - 实际存储空间 = **字符数 + 长度标识字节（1-2字节）**\n  - 存储\"Hello\"时都占用 5 字节 + 1 字节开销 = 6 字节\n    存储相同的字符串，所占用磁盘的存储空间其实是一样的\n- 差异：\n  - varchar (100) 最多存储100字符\n  - varchar (10) 最多存储10字符\n\n#### 2. 性能影响\n\n- **内存分配**：\n  - 排序操作时，数据库可能按**最大长度**分配内存\n  - `VARCHAR(100)` 的列可能比 `VARCHAR(10)` 多消耗 10 倍内存\n- **索引效率**：\n  - 索引大小：`VARCHAR(100)` 索引大约是 `VARCHAR(10)` 索引的 10 倍\n\n3. **适用场景**：\n   - `varchar(10)`：短文本（如验证码、商品编码前几位）；\n   - `varchar(100)`：较长文本（如用户名、文章标题、地址片段）。\n\n{% endhideBlock %}\n\n### 4、in和exists的区别？\n\n{% hideBlock 查看答案 %}\n\n#### IN 运算符\n\n先执行子查询，将结果缓存到临时表，然后检查主查询的值是否在这个临时表中。\n\n\n#### exists 运算符\n\n对于主查询的每一行，都会执行一次子查询检查是否存在匹配记录\n\n#### 区别\n\n| **特性**      | **IN**                                | **EXISTS**                 |\n| :------------ | :------------------------------------ | :------------------------- |\n| **工作原理**  | 检查值是否在结果集中                  | 检查子查询是否返回任何行   |\n| **执行顺序**  | 先执行子查询，再执行主查询            | 主查询的每一行都执行子查询 |\n| **性能特点**  | 子查询结果集小时高效                  | 主查询结果集小时高效       |\n| **NULL 处理** | `NULL IN (结果集)` 总是返回 `UNKNOWN` | 不受子查询中 NULL 值影响   |\n| **适用场景**  | 静态值列表或小型结果集                | 关联子查询或大型结果集     |\n| **可读性**    | 更直观，易于理解                      | 对初学者稍复杂             |\n\n{% endhideBlock %}\n\n### 5、怎么存储 emoji?\n\n{% hideBlock 查看答案 %}\n\n因为 emoji（😊）是 4 个字节的 UTF-8 字符，而 MySQL 的 utf8 字符集只支持最多 3 个字节的 UTF-8 字符，所以在 MySQL 中存储 emoji 时，需要使用 utf8mb4 字符集。\n\n```sql\nALTER TABLE mytable CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n```\n\nMySQL 8.0 已经默认支持 utf8mb4 字符集，可以通过 `SHOW VARIABLES WHERE Variable_name LIKE 'character\\_set\\_%' OR Variable_name LIKE 'collation%';` 查看。\n\n{% endhideBlock %}\n\n### 6、drop、delete 与 truncate 的区别？\n\n{% hideBlock 查看答案 %}\n\nDELETE 支持行级删除，可以带 WHERE 条件，可以回滚。\n\nDROP 是物理删除，用来删除整张表，包括表结构，且不能回滚。\n\nTRUNCATE 用于清空表中的所有数据，但会保留表结构，不能回滚。\n\n{% endhideBlock %}\n\n### 7、UNION 与 UNION ALL 的区别？\n\n{% hideBlock 查看答案 %}\n\nUNION 会自动去除合并后结果集中的重复行。UNION ALL 不会去重，会将所有结果集合并起来。\n\n{% endhideBlock %}\n\n### 8、count(1)、count(*) 与 count(列名) 的区别？\n\n{% hideBlock 查看答案 %}\n\n1. count(*)：\n\n  - `count(*)`会统计结果集中所有行的数量，包括所有列，不忽略任何行，即使某些列包含NULL值。\n  - 它是一个标准的[SQL函数](https://so.csdn.net/so/search?q=SQL函数&spm=1001.2101.3001.7020)，用于统计表中的总行数。\n\n2. count(1)：\n\n  - `count(1)`中的1是一个常量值，表示对每一行进行计数。\n  - 由于常量值永远不为NULL，因此`count(1)`实际上与`count(*)`一样计算所有行。\n  - 在MySQL中，优化器通常会将`count(1)`优化为与`count(*)`相同的执行计划。\n\n3. count(列名)：\n\n  - `count(列名)`会统计结果集中指定列非NULL值的数量。\n  - 如果列中的所有值都是非空的，那么`count(列名)`的结果与`count(*)`的结果相同。\n  - 但是，如果列中有空值（NULL），那么`count(列名)`的结果会小于`count(*)`的结果。\n\n{% endhideBlock %}\n\n### 9、NULL 和 '' 的区别是什么？\n\n{% hideBlock 查看答案 %}\n\n#### **1. 本质含义**\n\n- `NULL`：\n  表示 **“值不存在”**或**“未知”**，相当于 “无值”。它不是空字符串，也不是数字 `0`，而是一个特殊的标记。\n  \n  如果列允许 `NULL` 且未指定默认值，则插入时默认为 `NULL`。\n  \n- `''`（空字符串）：\n  表示 **“空值”**，是一个长度为 0 的有效字符串，明确表示 “这里有一个空字符串”。\n  \n  需要显式设置默认值为 `''`（例如：`ALTER TABLE tbl MODIFY col VARCHAR(10) DEFAULT '';`）。\n\n#### **2. 存储空间**\n\n- `NULL`：\n  通常需要**额外 1 位**（bit）来标记字段是否为 `NULL`（对于允许 `NULL` 的列）。\n\n- `''`：\n\n  取决于存储引擎和字符集。例如：\n\n  - 在 UTF-8 中，`''` 占用 0 字节；\n  - 在 `varchar` 中，可能需要 1~2 字节存储长度信息（即使长度为 0）。\n\n#### **3. 查询与比较**\n\n- **`NULL`**：\n\n  - 不能用 `=` 直接比较，必须用 `IS NULL` 或 `IS NOT NULL`。\n  \n    ```sql\n    WHERE column IS NULL;  -- 正确\n    WHERE column = NULL;   -- 错误！永远返回 false\n    ```\n  \n  - 在聚合函数（如 `COUNT()`、`SUM()`）中会被忽略（除非用 `COUNT(*)`）。\n  \n- **`''`**：\n\n  - 可以用 `=` 直接比较。\n\n    ```sql\n    WHERE column = '';  -- 正确\n    ```\n\n  - 在聚合函数中会被视为有效值。\n\n**关键判断标准**：如果某字段**必须有值**（即使是空），用 `''`；如果可能**无需赋值**，用 `NULL`。\n\n{% endhideBlock %}\n\n### 10、mysql 的深度分页如何优化\n\n{% hideBlock 查看答案 %}\n\n深度分页是指当查询结果集很大时（如 LIMIT 1000000, 10），MySQL 需要扫描大量数据才能返回少量结果的性能问题场景。\n\n#### 方案1：游标分页\n\n- **原理**：记录上一页最后一条数据的 **标识（如 ID）**，用 `WHERE` 代替 `OFFSET`。\n\n```sql\n-- 第1页：初始查询\nSELECT * FROM t ORDER BY id LIMIT 10; -- 记最后一条 ID 为 last_id  \n-- 第2页：基于游标\nSELECT * FROM t WHERE id < last_id ORDER BY id DESC LIMIT 10; \n\n```\n\n- **优点**：\n\n  - 时间复杂度 O(1)\n  - 无性能衰减\n  - 支持高并发\n\n- **限制**：\n\n  - 只能顺序翻页，不能跳页，适合 APP 滚动加载。\n  - 需有序且唯一的列（如自增ID、时间戳）\n\n#### 方案2：覆盖索引 + 延迟关联\n\n- **原理**：利用索引先获取主键（减少扫描量），再回表取全字段。\n\n  ```sql\n  SELECT * FROM orders\n  INNER JOIN (\n      SELECT id FROM orders\n      ORDER BY create_time DESC\n      LIMIT 1000000, 10  -- 索引覆盖扫描\n  ) AS tmp USING(id);\n  -- USING(id) 等价于 ON table1.id = table2.id \n  ```\n\n- **优化效果**：\n\n  - 索引扫描代替全表扫描\n  - 减少回表数据量\n  - 性能提升 5-10 倍\n\n#### 方案3：范围分页\n\n- **原理**：通过 WHERE 条件缩小扫描范围\n\n  ```sql\n  SELECT * FROM t \n  WHERE create_time BETWEEN '2025-01-01' AND '2025-01-31' \n  ORDER BY id LIMIT 10;\n  ```\n\n- **适用场景**：\n\n  - 时间范围明确的数据\n  - 分区表的分区键查询\n\n{% endhideBlock %}\n\n## 二、数据库架构\n\n### 1、说说 MySQL 的基础架构？\n\n{% hideBlock 查看答案 %}\n\nMySQL 采用分层架构，主要包括连接层、服务层、和存储引擎层。\n\n下图是 MySQL 的一个简要架构图，从下图你可以很清晰的看到客户端的一条 SQL 语句在 MySQL 内部是如何执行的。\n\n![image-20250625173507865](MySQL面试题/image-20250625173507865.png)\n\n①、连接层主要负责客户端连接的管理，包括验证用户身份、权限校验、连接管理等。可以通过数据库连接池来提升连接的处理效率。\n\n②、服务层是 MySQL 的核心，主要负责查询解析、优化、执行等操作。在这一层，SQL 语句会经过解析、优化器优化，然后转发到存储引擎执行，并返回结果。这一层包含查询解析器、优化器、执行计划生成器、日志模块等。\n\n③、存储引擎层负责数据的实际存储和提取。MySQL 支持多种存储引擎，如 InnoDB、MyISAM、Memory 等。\n\nbinlog写入在哪一层？\n\nbinlog 在服务层，负责记录 SQL 语句的变化。它记录了所有对数据库进行更改的操作，用于数据恢复、主从复制等。\n\n{% endhideBlock %}\n\n### 2、一条 SQL 查询语句在 MySQL 中的完整执行过程\n\n{% hideBlock 查看答案 %}\n\n#### 案例 SQL\n```sql\nSELECT name, age FROM employees WHERE department = 'Sales' AND salary > 5000 ORDER BY hire_date DESC LIMIT 10;\n```\n\n---\n\n#### 执行过程详解\n\n##### 1. 连接阶段 (Connector)\n- **作用**：建立客户端与服务器的连接\n- **案例过程**：\n  - 应用程序（如Java程序）通过JDBC驱动连接到MySQL\n  - 验证用户名/密码（如：`jdbc:mysql://localhost:3306/company`）\n  - 检查权限（确认用户有`employees`表的SELECT权限）\n  - 建立连接线程（`show processlist`可查看）\n\n##### 2. 查询缓存 (Query Cache) *[MySQL 8.0已移除]*\n> MySQL 5.7中仍存在，但默认禁用\n- **作用**：缓存SELECT查询结果\n- **案例过程**：\n  - 生成查询缓存Key：`department='Sales', salary>5000, ...`\n  - 检查缓存中是否有完全匹配的结果\n  - 若存在直接返回结果（本案例大概率不会命中，因包含动态条件）\n\n##### 3. 解析器 (Parser)\n- **作用**：语法解析，生成解析树\n- **案例过程**：\n  - **词法分析**：拆分关键词\n    ```sql\n    SELECT → 查询命令\n    name, age → 目标列\n    FROM employees → 数据源\n    WHERE → 条件开始\n    department = 'Sales' → 条件表达式\n    ...\n    ```\n  - **语法分析**：构建语法树\n   ```mermaid\n    graph TD\n    A[SELECT] --> B[ColumnList]\n    A --> C[FROM]\n    A --> D[WHERE]\n    A --> E[ORDER BY]\n    A --> F[LIMIT]\n    B --> G[name]\n    B --> H[age]\n    C --> I[employees]\n    D --> J[AND]\n    J --> K[department='Sales']\n    J --> L[salary>5000]\n    E --> M[hire_date DESC]\n    F --> N[10]\n   ```\n\n##### 4. 预处理器 (Preprocessor)\n- **作用**：语义检查，表/列解析\n- **案例过程**：\n  - 检查`employees`表是否存在\n  - 验证`name, age, department, salary, hire_date`列是否存在\n  - 解析`*`符号（本案例未使用）\n  - 检查权限（再次确认SELECT权限）\n\n##### 5. 优化器 (Optimizer)\n- **作用**：生成最优执行计划\n- **案例过程**：\n  \n  - **统计信息分析**：\n    \n    - 表行数（`show table status like 'employees'`）\n    - 索引分布（`department`索引？`salary`索引？）\n  - **成本估算**：\n    \n    - 全表扫描 vs 使用索引\n    - 假设存在`idx_dept_salary`(department, salary)索引\n  - **执行计划生成**：\n    ```sql\n    EXPLAIN SELECT ...\n    -- 结果示例：\n    id: 1\n    select_type: SIMPLE\n    table: employees\n    type: ref\n    key: idx_dept_salary\n    rows: 100\n    Extra: Using where; Using filesort\n    ```\n  - **关键决策**：\n    1. 使用`idx_dept_salary`索引快速定位'Sales'部门\n    2. 在索引结果中过滤`salary > 5000`\n    3. 对结果集进行文件排序（filesort）\n    4. 应用LIMIT 10\n\n##### 6. 执行器 (Executor)\n- **作用**：调用存储引擎执行计划\n- **案例过程**：\n  1. 打开`employees`表\n  2. 调用存储引擎接口：\n     ```c\n     // 伪代码\n     index_read_first(idx_dept_salary, 'Sales')\n     while (record = index_read_next()) {\n         if (record.salary > 5000) {\n             result_set.add(record.name, record.age);\n             if (result_set.size() >= 10) break;\n         }\n     }\n     ```\n  3. 处理排序：\n     - 收集所有符合条件的行\n     - 在内存或磁盘进行快速排序（`ORDER BY hire_date DESC`）\n  4. 应用LIMIT：取前10条结果\n\n##### 7. 存储引擎 (Storage Engine)\n- **作用**：实际数据存取（以InnoDB为例）\n- **案例过程**：\n  - **索引扫描**：\n    - 使用B+树索引`idx_dept_salary`定位到第一个'Sales'部门记录\n    - 沿叶子节点链表扫描部门为'Sales'的记录\n  - **回表查询**：\n    - 通过主键获取完整行数据（因SELECT包含非索引列`name, age, hire_date`）\n  - **过滤处理**：\n    - 对每条记录检查`salary > 5000`条件\n  - **数据返回**：\n    - 将符合条件的`name, age, hire_date`返回给执行器\n  - **事务支持**：\n    - 保证在READ COMMITTED隔离级别下看到一致的数据视图\n\n##### 8. 结果返回\n- **作用**：将最终结果发送给客户端\n- **案例过程**：\n  \n  1. 排序后的结果集放入网络缓冲区\n  2. 通过TCP连接逐步发送给客户端\n  3. 客户端（如MySQL命令行）显示结果：\n     ```\n     +----------+-----+\n     | name     | age |\n     +----------+-----+\n     | John Doe | 32  |\n     | Jane Smith| 28 |\n     ...（共10行）\n     ```\n  4. 清理临时资源（排序内存、游标等）\n\n---\n\n#### 关键流程总结\n```mermaid\nsequenceDiagram\n    participant Client\n    participant Connector\n    participant Parser\n    participant Optimizer\n    participant Executor\n    participant InnoDB\n    \n    Client->>Connector: 发送SQL查询\n    Connector->>Parser: 权限验证后传递\n    Parser->>Optimizer: 生成解析树\n    Optimizer->>Executor: 最优执行计划\n    Executor->>InnoDB: 调用索引扫描接口\n    InnoDB->>Executor: 返回数据页\n    Executor->>InnoDB: 请求回表查询\n    InnoDB->>Executor: 返回完整行数据\n    Executor->>Executor: 过滤/排序/LIMIT\n    Executor->>Client: 返回最终结果集\n```\n\n#### 性能优化关键点\n1. **索引设计**：创建复合索引`(department, salary)`可加速WHERE过滤\n2. **覆盖索引**：若索引包含所有SELECT列（如`(department, salary, name, age, hire_date)`），可避免回表\n3. **排序优化**：添加`hire_date`索引可消除filesort\n4. **LIMIT下推**：在存储引擎层尽早应用行数限制\n5. **批量读取**：顺序I/O读取多个数据页减少磁盘寻道\n\n> 💡 **实际建议**：通过`EXPLAIN`分析执行计划，关注`type`列（扫描方式）、`Extra`列（排序/临时表）、`rows`列（扫描行数）等关键指标进行优化。\n\n{% endhideBlock %}\n\n## 三、存储引擎\n\n{% hideBlock 查看答案 %}\n\n### 1、讲一讲mysql的引擎吧，你有什么了解？\n\n- InnoDB：\n  - InnoDB是MySQL的默认存储引擎。\n  - 具有ACID事务支持、行级锁、外键约束等特性。\n  - 它适用于高并发的读写操作，支持较好的数据完整性和并发控制。\n- MyISAM：\n  - MyISAM是MySQL的另一种常见的存储引擎。\n  - 具有较低的存储空间和内存消耗，适用于大量读操作的场景。\n  - MyISAM不支持事务、行级锁和外键约束，因此在并发写入和数据完整性方面有一定的限制。\n- Memory：\n  - Memory引擎将数据存储在内存中，适用于对性能要求较高的读操作，但是在服务器重启或崩溃时数据会丢失。\n  - 不支持事务、行级锁和外键约束。\n\n{% endhideBlock %}\n\n## 四、索引\n\n### 1、索引是什么？有什么好处？\n\n{% hideBlock 查看答案 %}\n\n- 索引类似于书籍的目录，可以减少扫描的数据量，提高查询效率。\n\n- 如果查询的时候，没有用到索引就会全表扫描，这时候查询的时间复杂度是On\n\n- 如果用到了索引，那么查询的时候，可以基于二分查找算法，通过索引快速定位到目标数据， mysql 索引的数据结构一般是 b+树，其搜索复杂度为O(logdN)，其中 d 表示节点允许的最大子节点个数为 d 个。\n\n{% endhideBlock %}\n\n### 2、\n\n\n\n\n\n\n\n\n\n\n\n","tags":["面试题"],"categories":["MySql"]},{"title":"MySql进阶","url":"/2025/06/10/MySQL/MySql进阶/","content":"\n# MySql进阶\n\n> 此笔记由本人学习 B 站黑马程序员 MySQL 数据库视频进阶篇内容后，总结提取摘要制成。\n> 视频地址：[黑马程序员 MySQL数据库入门到精通，从mysql安装到mysql高级、mysql优化全囊括](https://www.bilibili.com/video/BV1Kr4y1i7ru/?share_source=copy_web&vd_source=e43c1de8e41e1499f7f3fdb03fba0eb6)\n\n## MySQL体系结构\n\nMySQL体系结构：连接层，服务层，引擎层，存储层。\n\n![2025-06-10115712](MySql进阶/2025-06-10115712.png)\n\n1. 连接层：处理客户端连接、认证和线程管理。\n   - **连接器（Connector）**：\n     - 处理客户端连接请求，支持 TCP/IP、Unix Socket、命名管道等连接方式。\n     - 验证用户身份（用户名、密码、主机权限）。\n     - 为每个连接分配线程（或从线程池获取）。\n   - **线程池（Thread Pool）**：\n     - 管理数据库连接线程，减少频繁创建 / 销毁线程的开销。\n     - 适用于高并发场景（如 MySQL Enterprise Edition）。\n2. 服务层：包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。\n   - **SQL 接口（SQL Interface）**：\n     - 接收 SQL 请求（SELECT、INSERT 等），返回查询结果。\n   - **查询解析器（Parser）**：\n     - 对 SQL 语句进行词法和语法分析，生成解析树（Parse Tree）。\n     - 验证语句语法正确性（如关键字拼写、表名 / 列名是否存在）。\n   - **预处理器（Preprocessor）**：\n     - 进一步检查解析树的合法性（如权限检查、外键约束验证）。\n     - 替换别名、展开视图等操作。\n   - **查询优化器（Optimizer）**：\n     - 生成最优执行计划（如选择索引、表连接顺序）。\n     - 支持成本优化（Cost-Based Optimization, CBO）和规则优化（Rule-Based Optimization, RBO）。\n   - **查询执行引擎（Execution Engine）**：\n     - 根据执行计划调用存储引擎 API 执行查询。\n   - **缓存（Query Cache）**：\n     - 缓存 SQL 语句及其结果（5.7 版本后逐渐弃用，8.0 版本移除）。\n     - 当数据发生变更时，相关缓存会被自动清除。\n3. 引擎层：负责数据的存储和检索。架构模式是插件式，服务器通过API和存储引擎进行通信。支持 InnoDB、MyISAM、Memory 等多个存储引擎。\n   - **插件式架构**：支持多种存储引擎，通过统一接口与上层交互。\n   - 常见引擎：\n     - **InnoDB**：默认引擎，支持事务、外键、行级锁。\n     - **MyISAM**：不支持事务，表级锁，适合读多写少场景。\n     - **Memory**：数据存储在内存，读写极快，重启丢失数据。\n     - **Archive**：高度压缩，仅支持 INSERT/SELECT，适合历史数据归档。\n   - 核心功能：\n     - 数据存储与检索（如 B + 树索引、哈希索引）。\n     - 事务处理（InnoDB）。\n     - 锁机制（行锁、表锁）。\n4. 存储层：MYSQL的物理存储部分，负责将数据(如: redolog、undolog、数据、索引、二进制日志、错误日志、查询 日志、慢查询日志等)存储在磁盘上。\n   - **数据文件**：\n     - **.frm**：存储表结构定义。\n     - **.ibd**：InnoDB 独立表空间文件（存储数据和索引）。\n     - **.MYD/.MYI**：MyISAM 数据文件和索引文件。\n   - **日志文件**：\n     - **二进制日志（Binlog）**：记录数据变更，用于主从复制和恢复。\n     - **重做日志（Redo Log）**：确保事务持久性，崩溃恢复。\n     - **回滚日志（Undo Log）**：支持事务回滚和 MVCC。\n     - **错误日志（Error Log）**：记录启动、运行时错误信息。\n     - **慢查询日志（Slow Query Log）**：记录执行时间超过阈值的 SQL。\n   - **配置文件**：\n     - **my.cnf/my.ini**：存储 MySQL 配置参数（如内存分配、字符集）。\n\n## 存储引擎\n\n他是mysql数据库的核心，我们也需要在合适的场景选择合适的存储引擎。存储引擎是存储数据、建立索引、更新/查询数据等技术的实现方式 。存储引擎是基于表的，而不是 基于库的，所以存储引擎也可被称为表类型。可以在创建表的时指定选择的存储引擎，没有指定将自动选择默认的存储引擎。\n\n-  建表时指定存储引擎\n\n```sql\nCREATE TABLE 表名(\n字段1 字段1类型 [ COMMENT 字段1注释 ] ,\n......\n字段n 字段n类型 [COMMENT 字段n注释 ]\n) ENGINE = INNODB [ COMMENT 表注释 ] ;\n```\n\n- 查询当前数据库支持的存储引擎\n\n```sql\nshow engines;\n```\n\nMySQL 支持多种存储引擎，每种引擎都有其独特的特性和适用场景。以下是常见存储引擎的对比及选择建议。\n\n### InnoDB\n\n#### 介绍\n\nInnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB是默认的 MySQL 存储引擎。\n\n\n#### 特点\n  - DML操作遵循ACID模型，支持事务；\n  - 行级锁，提高并发访问性能；\n  - 支持外键FOREIGN KEY约束，保证数据的完整性和正确性；\n\n#### 文件结构\n  - xxx.ibd：xxx代表的是表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm-早期的 、sdi-新版的）、数据和索引。\n\n  - 参数：innodb_file_per_table\n\n  ```sql\n  show variables like 'innodb_file_per_table'\n  ```\n\n![2025-06-10163404](MySql进阶/2025-06-10163404.png)\n\n  如果该参数开启，代表对于InnoDB引擎的表，每一张表都对应一个ibd文件。ibd文件中不仅存放表结构、数据还会存放该表对应的索引信息。 而该文件是基于二进制存储的，不能直接基于记事本打开，我们可以使用mysql提供的一个指令 ibd2sdi ，通过该指令就可以从ibd文件中提取sdi信息，而sdi数据字典信息中就包含该表的表结构。\n\n#### 逻辑存储结构\n\n![2025-06-10164034](MySql进阶/2025-06-10164034.png)\n\n- 表空间 : InnoDB存储引擎逻辑结构的最高层，ibd文件其实就是表空间文件，在表空间中可以\n包含多个Segment段。\n- 段 : 表空间是由各个段组成的， 常见的段有数据段、索引段、回滚段等。InnoDB中对于段的管\n理，都是引擎自身完成，不需要人为对其控制，一个段中包含多个区。\n- 区 : 区是表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为\n16K， 即一个区中一共有64个连续的页。\n- 页 : 页是组成区的最小单元，页也是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默\n认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。\n- 行 : InnoDB 存储引擎是面向行的，也就是说数据是按行进行存放的，在每一行中除了定义表时\n所指定的字段以外，还包含两个隐藏字段(后面会详细介绍)。\n\n#### 适用场景\n\n- 事务性应用（如电商、金融系统）。\n- 高并发读写场景。\n- 需要外键约束的表。\n\n### MyISAM\n\n#### 介绍\n\nMyISAM是MySQL早期的默认存储引擎。\n\n#### 特点\n\n  - 不支持事务，不支持外键\n  - 支持表锁，不支持行锁\n  - 优点：更少的存储空间，支持全文索引，适用于读取频率较高、写入频率较低的应用场景\n\n#### 文件结构\n\n  - xxx.sdi：存储表结构信息\n\n  - xxx.MYD: 存储数据\n\n  - xxx.MYI: 存储索引\n\n    ![2025-06-10165422](MySql进阶/2025-06-10165422.png)\n\n#### 适用场景\n  - 只读或写入少、查询多的场景（如日志表、统计数据）。\n  - 不需要事务支持的场景。\n\n### Memory\n\n#### 介绍\n\nMemory引擎的表数据时存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为临时表或缓存使用。\n\n#### 特点\n\n- **数据存储在内存**：读写速度极快，但重启后数据丢失。\n- **支持哈希索引**：适合快速查找。\n- **表级锁**：并发性能有限。\n\n#### 文件结构\n\n- xxx.sdi：存储**表结构信息**\n- 数据， 都在内存中\n\n#### 适用场景\n  - **临时表/中间结果集：** MySQL 内部自动使用。\n  - **高速缓存：** 存储频繁访问的小型、非关键、可丢失的只读/低频写数据（如会话信息、配置）。\n  - 需要极低延迟访问的**只读查询**。\n\n重要警告： 绝对不要用于存储重要或持久化数据。内存有限，大表易导致 OOM。\n\n### InnoDB, MyISAM, Memory的区别，使用场景\n\n![0fb3844e83912d08779b1b8a1ab51f24](MySql进阶/0fb3844e83912d08779b1b8a1ab51f24.png)\n\n> 面试题:\n> InnoDB引擎与MyISAM引擎的区别 ?\n> ①. InnoDB引擎, 支持事务, 而MyISAM不支持。\n> ②. InnoDB引擎, 支持行锁和表锁, 而MyISAM仅支持表锁, 不支持行锁。\n> ③. InnoDB引擎, 支持外键, 而MyISAM是不支持的。\n\n## **索引**\n\n### 介绍\n\n索引（index）是帮助MySQL高效获取数据的数据结构(有序)。在数据之外，数据库系统还维护着满足 特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构 上实现高级查找算法，这种数据结构就是索引。它类似于书籍的目录，允许数据库快速定位特定数据，避免全表扫描。\n\n![40c81bd2db81dab60339a59238cbf784](MySql进阶/40c81bd2db81dab60339a59238cbf784.png)\n\n### 特点\n\n| 优势                                                         | 劣势                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 提高数据检索的效率，降低数据库 的IO成本                      | 索引列也是要占用空间的。                                     |\n| 通过索引列对数据进行排序，降低 数据排序的成本，降低CPU的消耗。 | 索引大大提高了查询效率，同时却也降低更新表的速度， 如对表进行INSERT、UPDATE、DELETE时，效率降低。 |\n|                                                              |                                                              |\n### 索引结构\n\n#### 概述\n\nMySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的索引结构，主要包含以下几种：\n\n![2025-06-10174544](MySql进阶/2025-06-10174544.png)\n\n上述是MySQL中所支持的所有的索引结构，接下来，我们再来看看不同的存储引擎对于索引结构的支持 情况。\n\n![2025-06-10174544](MySql进阶/2025-06-10174544.png)\n\n>注意： 我们平常所说的索引，如果没有特别指明，都是指B+树结构组织的索引。\n\n#### 二叉树\n\n假如说MySQL的索引结构采用二叉树的数据结构，比较理想的结构如下：\n\n![image-20250611113621344](MySql进阶/image-20250611113621344.png)\n\n如果主键是顺序插入的，则会形成一个单向链表，结构如下：\n\n![image-20250611113655369](MySql进阶/image-20250611113655369.png)\n\n所以，如果选择二叉树作为索引结构，会存在以下缺点：\n\n- 顺序插入时，会形成一个链表，查询性能大大降低。\n- 大数据量情况下，层级较深，检索速度慢。\n\n此时大家可能会想到，我们可以选择红黑树，红黑树是一颗自平衡二叉树，那这样即使是顺序插入数 据，最终形成的数据结构也是一颗平衡的二叉树,结构如下:\n\n![image-20250611114007240](MySql进阶/image-20250611114007240.png)\n\n但是，即使如此，由于红黑树也是一颗二叉树，所以也会存在一个缺点：\n\n- 解决二叉树的顺序插入后，树不平衡的问题。\n- 大数据量情况下，层级较深，检索速度慢。\n\n#### B-Tree\n\nB-Tree，B树是一种多叉路衡查找树，相对于二叉树，B树每个节点可以有多个分支，即多叉。 以一颗最大度数（max-degree）为5(5阶)的b-tree为例，那这个B树每个节点最多存储4个key，5 个指针：\n\n![image-20250611115454645](MySql进阶/image-20250611115454645.png)\n\n>知识小贴士: 树的度数指的是一个节点的子节点个数。\n\n\n我们可以通过一个数据结构可视化的网站来简单演示一下。[B-Tree Visualization (usfca.edu)](https://www.cs.usfca.edu/~galles/visualization/BTree.html)\n\n![image-20250611120126681](MySql进阶/image-20250611120126681.png)\n\n插入一组数据： 100 65 169 368 900 556 780 35 215 1200 234 888 158 90 1000 88 120 268 250 。然后观察一些数据插入过程中，节点的变化情况。\n\n![image-20250611121752144](MySql进阶/image-20250611121752144.png)\n\n特点：\n\n- 5阶的B树，每一个节点最多存储4个key，对应5个指针。\n- 一旦节点存储的key数量到达5，就会裂变，中间元素向上分裂。\n- 在B树中，非叶子节点和叶子节点都会存放数据。\n\n####  B+Tree\n\nB+Tree是B-Tree的变种，我们以一颗最大度数（max-degree）为4（4阶）的b+tree为例，来看一 下其结构示意图：\n\n![image-20250611122001256](MySql进阶/image-20250611122001256.png)\n\n我们可以看到，两部分： \n\n- 绿色框框起来的部分，是索引部分，仅仅起到索引数据的作用，不存储数据。 \n- 红色框框起来的部分，是数据存储部分，在其叶子节点中要存储具体的数据。\n\n通过一个数据结构可视化的网站来简单演示一下。[[B+ Tree Visualization (usfca.edu)](https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html)\n\n![image-20250611122833474](MySql进阶/image-20250611122833474.png)\n\n插入一组数据： 100 65 169 368 900 556 780 35 215 1200 234 888 158 90 1000 88 120 268 250 。然后观察一些数据插入过程中，节点的变化情况。\n\n![image-20250611173955579](MySql进阶/image-20250611173955579.png)\n\n最终我们看到，B+Tree 与 B-Tree相比，主要有以下三点区别： \n\n- 所有的数据都会出现在叶子节点。 \n- 叶子节点形成一个单向链表。\n- 非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的。\n\n**MySQL优化后的B+ Tree：**\n\n上述我们所看到的结构是标准的B+Tree的数据结构，接下来，我们再来看看MySQL中优化之后的 B+Tree。 MySQL索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点 的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能，利于排序。\n\n![image-20250611174229224](MySql进阶/image-20250611174229224.png)\n\n#### Hash\n\n哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在\nhash表中。\n\n![image-20250611174846421](MySql进阶/image-20250611174846421.png)\n\n如果两个(或多个)键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可 以通过链表来解决。\n\n![image-20250611174905670](MySql进阶/image-20250611174905670.png)\n\n特点：\n\n- Hash索引只能用于对等比较(=，in)，不支持范围查询（between，>，< ，...）。\n- 无法利用索引完成排序操作。\n- 查询效率高，通常(不存在hash冲突的情况)只需要一次检索就可以了，效率通常要高于B+tree索引。\n\n\n在MySQL中，支持hash索引的是Memory存储引擎。 而InnoDB中具有自适应hash功能，hash索引是 InnoDB存储引擎根据B+Tree索引在指定条件下自动构建的。\n\n> **为什么 InnoDB 存储引擎选择使用 B+tree 索引结构?**\n>\n> - **相对于二叉树，层级更少，搜索效率高；**\n> - **对于B-tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储 的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低；**\n> - **相对Hash索引，B+tree支持范围匹配及排序操作；**\n\n### 索引分类\n\n在MySQL数据库，将索引的具体类型主要分为以下几类：主键索引、唯一索引、常规索引、全文索引。\n\n![image-20250611175344688](MySql进阶/image-20250611175344688.png)\n\n而在InnoDB存储引擎中，根据索引的存储形式，又可以分为以下两种：\n\n![image-20250611175501825](MySql进阶/image-20250611175501825.png)\n\n聚集索引选取规则：\n\n- 如果存在主键，主键索引就是聚集索引。 \n- 如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。\n- 如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。\n\n聚集索引和二级索引的具体结构如下：\n\n![image-20250611180444425](MySql进阶/image-20250611180444425.png)\n\n- 聚集索引的叶子节点下挂的是这一行的数据 。\n- 二级索引的叶子节点下挂的是该字段值对应的主键值。\n\n#### **回表查询**\n\n先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取 数据的方式，就称之为回表查询。\n\n当我们执行如下的SQL语句时，具体的查找过程是什么样子的。\n\n![image-20250611180640456](MySql进阶/image-20250611180640456.png)\n\n具体过程如下:\n\n①. 由于是根据name字段进行查询，所以先根据name='Arm'到name字段的二级索引中进行匹配查 找。但是在二级索引中只能查找到 Arm 对应的主键值 10。\n\n②. 由于查询返回的数据是*，所以此时，还需要根据主键值10，到聚集索引中查找10对应的记录，最 终找到10对应的行row。\n\n③. 最终拿到这一行的数据，直接返回即可。\n\n#### 思考题\n\n1. 以下两条SQL语句，那个执行效率高? 为什么? \n\n​\tA. select * from user where id = 10 ; \n​\tB. select * from user where name = 'Arm' ; 备注: id为主键，name字段创建的有索引；\n\n解答： A 语句的执行性能要高于B 语句。 因为A语句直接走聚集索引，直接返回数据。 而B语句需要先查询name字段的二级索引，然 后再查询聚集索引，也就是需要进行回表查询。\n\n2. InnoDB主键索引的B+tree高度为多高呢?\n\n假设: 一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB的指针占用6个字节的空 间，主键即使为bigint，占用字节数为8。 \n\n**关键公式**：\n每个非叶子节点的索引条目数 n 需满足：n × 主键大小 + (n + 1) × 指针大小 ≤ 页大小。\n\n- `n × 8` ：n 个主键值的总字节数；\n- `(n + 1) × 6` ：n+1 个指针的总字节数（每个节点至少有 n+1 个指针指向子节点）。\n- 算出n约为 1170，也就是说每个非叶子节点最多存储 1170 个索引条目，对应 1171 个子节点（n+1）。\n\nB + 树高度为 2 时的最大数据量：\n\n- **树结构**：非叶子节点（根节点）+ 叶子节点。\n- **叶子节点数量**：根节点的子节点数 = 1171 个。\n- **每个叶子节点存储数据量**：16 行（由页大小决定）。\n- **总数据量**：`1170 × 16 = 18,720条`。可以存储 18000 多条记录。 \n\nB + 树高度为 3 时的最大数据量：\n\n- **树结构**：根节点 + 中间层 + 叶子层。\n- **叶子节点数量**：根节点的子节点数 = 1171 个。\n- **每个叶子节点存储数据量**：16 行（由页大小决定）。\n- **总数据量**：`1170 × 1170 × 16 = 21,902,400条`。可以存储 **2190**w 多条记录。 \n\n### 索引语法\n\n1. 创建索引\n\n```sql\nCREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name,... ) ;\n```\n\n2. 查看索引\n\n```sql\n SHOW INDEX FROM table_name ;\n```\n\n3. 删除索引\n\n```sql\nDROP INDEX index_name ON table_name ;\n```\n\n### SQL性能分析\n\n#### SQL执行频率\n\nMySQL 客户端连接成功后，通过 `show [session|global] status` 命令可以提供服务器状态信 息。通过如下指令，可以查看当前数据库的INSERT、UPDATE、DELETE、SELECT的访问频次：\n\n> -- session 是查看当前会话 ; \n>\n> -- global 是查询全局数据 ; \n>\n> SHOW GLOBAL STATUS LIKE 'Com_______'\n\n通过查询SQL的执行频次，我们就能够知道当前数据库到底是增删改为主，还是查询为主。 那假 如说是以查询为主，我们又该如何定位针对于那些查询语句进行优化呢？ 次数我们可以借助于慢查询 日志。\n\n#### 慢查询日志\n\n慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有 SQL语句的日志。\n\nMySQL的慢查询日志默认没有开启，我们可以查看一下系统变量 slow_query_log。（默认是关闭的）。\n\n```sql\nshow variables like 'slow_query_log';\n```\n\n如果要开启慢查询日志，需要在MySQL的配置文件中配置如下信息：\n\n> Windows 下通常位于 MySQL 安装目录或 `C:\\ProgramData\\MySQL\\MySQL Server X.Y`。\n>\n> Linux 下（/etc/my.cnf）。\n\n```sql\n[mysqld]\n# 启用慢查询日志\nslow_query_log = 1\n\n# 指定慢查询日志文件路径\nslow_query_log_file = \"C:/ProgramData/MySQL/MySQL Server 8.0/slow_query.log\"\n\n# 设置慢查询阈值（单位：秒）\nlong_query_time = 10\n\n# 可选：记录未使用索引的查询\n# log_queries_not_using_indexes = 1\n\n# 可选：记录管理语句（如 OPTIMIZE TABLE）\n# log_slow_admin_statements = 1\n```\n\n重启MySQL 服务，然后，再次查看开关情况，慢查询日志就已经打开了。\n\n测试：\n\n- 执行如下SQL语句 ：\n\n  ```sql\n  SELECT SLEEP(11);\n  ```\n\n- 打开慢日志文件，检查慢查询日志 ：\n\n  ```tex\n  # Time: 2025-06-16T08:26:30.451314Z\n  # User@Host: root[root] @ localhost [::1]  Id:     4\n  # Query_time: 11.007434  Lock_time: 0.000000 Rows_sent: 1  Rows_examined: 0\n  use huanyuan2;\n  SET timestamp=1750062390;\n  SELECT SLEEP(11);\n  ```\n\n  那这样，通过慢查询日志，就可以定位出执行效率比较低的SQL，从而有针对性的进行优化。\n\n####  profile详情\n\nshow profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。\n\n- 通过have_profiling 参数，能够看到当前MySQL是否支持profile操作：\n\n  ```sql\n  SELECT @@have_profiling ;\n  ```\n\n  ![image-20250616170607482](MySql进阶/image-20250616170607482.png)\n\n- 查看当前数据库是否打开了 profiling ：\n\n  ```sql\n  select @@profiling;\n  ```\n\n  ![image-20250616170818001](MySql进阶/image-20250616170818001.png)\n\n可以看到，当前MySQL是支持 profile操作的，但是开关是关闭的。可以通过set语句在 ` session/global `级别开启profiling：\n\n```sql\nSET profiling = 1;\n```\n\nprofile 开关打开后，我们所执行的SQL语句，都会被MySQL记录，并记录执行时间消耗到哪儿去 了。\n\n可以通过如下指令查看指令的执行耗时：\n\n```sql\n-- 查看每一条SQL的耗时基本情况\nshow profiles;\n\n-- 查看指定query_id的SQL语句各个阶段的耗时情况\nshow profile for query query_id;\n\n-- 查看指定query_id的SQL语句CPU的使用情况\nshow profile cpu for query query_id;\n```\n\n#### explain\n\nEXPLAIN 或者 DESC命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行 过程中表如何连接和连接的顺序。\n\n```sql\n-- 直接在select语句之前加上关键字 explain / desc\nEXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件 ;\n```\n\n![image-20250616172028438](MySql进阶/image-20250616172028438.png)\n\nExplain 执行计划中各个字段的含义:\n\n| 字段         | 含义                                                         |\n| ------------ | :----------------------------------------------------------- |\n| id           | select查询的序列号，表示查询中执行select子句或者是操作表的顺序 (id相同，执行顺序从上到下；id不同，值越大，越先执行)。 |\n| select_type  | 表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接 或者子查询）、PRIMARY（主查询，即外层的查询）、 UNION（UNION 中的第二个或者后面的查询语句）、 SUBQUERY（SELECT/WHERE之后包含了子查询）等 |\n| type         | 表示连接类型，性能由好到差的连接类型为NULL、system、const、 eq_ref、ref、range、 index、all 。 |\n| possible_key | 显示可能应用在这张表上的索引，一个或多个。                   |\n| key          | 实际使用的索引，如果为NULL，则没有使用索引。                 |\n| key_len      | 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长 度，在不损失精确性的前提下， 长度越短越好 。 |\n| rows         | MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值， 可能并不总是准确的。 |\n| filtered     | 表示返回结果的行数占需读取行数的百分比， filtered 的值越大越好。 |\n\n\n\n### 索引使用优化\n\n#### 单列索引与联合索引\n\n单列索引：即一个索引只包含单个列。\n\n联合索引：即一个索引包含了多个列。\n\n我们先来看看 tb_user 表中目前的索引情况:\n\n![image-20250617000225325](MySql进阶/image-20250617000225325.png)\n\n在查询出来的索引中，既有单列索引，又有联合索引。\n\n接下来，我们来执行一条SQL语句，看看其执行计划：\n\n![image-20250617000312093](MySql进阶/image-20250617000312093.png)\n\n通过上述执行计划我们可以看出来，在and连接的两个字段 phone、name上都是有单列索引的，但是最终mysql只会选择一个索引，也就是说，只能走一个字段的索引，此时是会回表查询的。\n\n接着，我们再来创建一个phone和name字段的联合索引来查询一下执行计划。\n\n```sql\ncreate unique index idx_user_phone_name on tb_user(phone,name);\n```\n\n![image-20250617000440235](MySql进阶/image-20250617000440235.png)\n\n此时，查询时，就走了联合索引，而在联合索引中包含 phone、name的信息，在叶子节点下挂的是对 应的主键id，所以查询是无需回表查询的。\n\n>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引， 而非单列索引。\n\n<img src=\"MySql进阶/image-20250617000533014.png\" alt=\"image-20250617000533014\" style=\"zoom:67%;\" />\n\n#### 前缀索引\n\n当字段类型为字符串（varchar，text，longtext等）时，有时候需要索引很长的字符串，这会让 索引变得很大，查询时，浪费大量的磁盘IO， 影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。\n\n- 语法\n\n  ```sql\n   create index idx_xxxx on table_name(column(n)) ;\n  ```\n  \n- 前缀长度\n\n  可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值， 索引选择性越高则查询效率越高， 唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。\n\n  ```sql\n  # 查询使用email整个字符串的索引选择比   1.0000\n  select count(distinct email) / count(*) from tb_user;\n  # 查询使用email 使用前缀5个字符串的索引选择比  0.9583\n  select count(distinct substring(email,1,5)) / count(*) from tb_user ;\n  # 查询使用email 使用前缀2个字符串的索引选择比   0.9167\n  select count(distinct substring(email,1,2)) / count(*) from tb_user ;\n  # 对字段email建立前缀索引，前缀长度为5  \n  create index email_idx on tb_user(email(5));\n  # 查看使用email前缀索引进行查询的执行结构\n  explain select * from tb_user where email = 'xiaoyu666@qq.com'; \n  ```\n\n- 前缀索引的查询流程\n  \n  ![image-20250616175247635](MySql进阶/image-20250616175247635.png)\n\n\n\n#### 最左前缀法则\n\n如果索引了多列（联合索引），要遵守最左前缀法则。最左前缀法则指的是**查询条件必须从复合索引的最左列开始，并且不能跳过中间列**。如果跳跃某一列，索引将会部分失效(后面的字段索引失效)。\n\n##### 🧩 四种典型使用场景分析\n\n```sql\nCREATE INDEX idx_name_age_city ON users (\n    last_name,  -- 最左列\n    age,        -- 中间列\n    city        -- 最右列\n);\n```\n\n###### ✅ 场景 1：完整使用索引 (最佳)\n\n```sql\nSELECT * FROM users \nWHERE last_name = 'Smith' \n  AND age = 30 \n  AND city = 'New York';\n```\n\n**索引使用**：\n`(last_name, age, city)` 三列全使用\n👉 **查询效率最高**\n\n###### ✅ 场景 2：使用最左连续列\n\n```sql\nSELECT * FROM users \nWHERE last_name = 'Smith' \n  AND age = 30;\n```\n\n**索引使用**：\n`(last_name, age)` 两列\n👉 **有效使用索引**\n\n###### ✅ 场景 3：仅使用最左列\n\n```sql\nSELECT * FROM users \nWHERE last_name = 'Smith';\n```\n\n**索引使用**：\n`(last_name)` 单列\n👉 **有效但非最优**\n\n###### ❌ 场景 4：违反最左前缀（常见错误）\n\n```sql\n-- 错误1：跳过最左列\nSELECT * FROM users WHERE age = 30;\n\n-- 错误2：缺少中间列\nSELECT * FROM users \nWHERE last_name = 'Smith' \n  AND city = 'New York'; -- 跳过age列\n```\n\n**索引使用**：\n无法使用索引或仅部分使用\n👉 **全表扫描风险**\n\n###### ✅ 场景 5：条件编写的先后顺序\n\n以下代码索引会失效吗？\n\n```sql\nSELECT * FROM users \nWHERE  age = 30\n  AND  city = 'New York'\n  AND  last_name = 'Smith';\n```\n\n答案：不会，MySQL 优化器会自动重排条件顺序：\n\n```sql\n-- 优化器重写后的等效查询\nSELECT * FROM users \nWHERE last_name = 'Smith'  -- 最左列\n  AND age = 30            -- 第二列\n  AND city = 'New York';  -- 第三列\n```\n\n>注意 ： 最左前缀法则中指的最左边的列，是指在查询时，联合索引的最左边的字段(即是 第一个字段)必须存在，与我们编写SQL时，条件编写的先后顺序无关。\n\n#### 索引失效情况\n\n##### 🚫 1. 违反最左前缀法则（复合索引）\n\n```sql\n-- 复合索引: (last_name, age, city)\nSELECT * FROM users WHERE age = 30; -- 缺少最左列\nSELECT * FROM users WHERE city = 'New York'; -- 缺少最左列\nSELECT * FROM users WHERE last_name = 'Smith' AND city = 'New York'; -- 跳过中间列\n```\n\n**✅ 解决方案**：\n\n1. 调整查询条件顺序\n2. 创建新索引：`CREATE INDEX idx_age_city ON users(age, city)`\n\n##### 🚫 2. 在索引列上使用函数或计算\n\n```sql\n-- 索引: created_at\nSELECT * FROM orders WHERE YEAR(created_at) = 2023; -- 函数操作\nSELECT * FROM products WHERE price * 1.1 > 100; -- 计算操作\n```\n\n**✅ 解决方案**：\n\n 1. 使用范围查询替代：\n\n    ```sql\n    SELECT * FROM orders \n    WHERE created_at BETWEEN '2023-01-01' AND '2023-12-31';\n    ```\n\n 2. 预先计算存储：\n\n    ```sql\n    ALTER TABLE products ADD COLUMN price_with_tax DECIMAL(10,2) AS (price * 1.1);\n    CREATE INDEX idx_price_tax ON products(price_with_tax);\n    ```\n\n##### 🚫 3. 隐式类型转换\n\n```sql\n-- phone 是 VARCHAR 索引列\nSELECT * FROM customers WHERE phone = 13800138000; -- 数字 vs 字符串\n```\n\n**✅ 解决方案**：\n\n```sql\nSELECT * FROM customers WHERE phone = '13800138000'; -- 保持类型一致\n```\n\n##### 🚫 4. 使用 `OR` 连接非索引列\n\n```sql\n-- 只有 name 有索引\nSELECT * FROM users \nWHERE name = 'John' OR email = 'john@example.com'; -- email 无索引\n```\n\n用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会 被用到。\n\n**✅ 解决方案**：\n\n 1. 创建联合索引\n\n 2. 拆分为两个查询 UNION：\n\n    ```sql\n    SELECT * FROM users WHERE name = 'John'\n    UNION\n    SELECT * FROM users WHERE email = 'john@example.com';\n    ```\n\n##### 🚫 5. `LIKE` 以通配符开头\n\n如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。\n\n```sql\n-- 索引: email\nSELECT * FROM users WHERE email LIKE '@gmail.com%'; -- 后导通配符\nSELECT * FROM users WHERE email LIKE '%@gmail.com'; -- 前导通配符 索引失效\n```\n\n##### 🚫 6. 范围查询后的列失效\n\n联合索引中，出现范围查询(>,<)，范围查询右侧的列索引失效。\n\n```sql\n-- 复合索引: (category, price, rating)\nSELECT * FROM products \nWHERE category = 'Electronics' \n  AND price > 1000 \n  AND rating > 4; -- rating 无法使用索引\n```\n\n**✅ 解决方案**：\n\n 1. 调整索引列顺序：\n\n    ```sql\n    CREATE INDEX idx_category_rating_price ON products(category, rating, price); -- 让等值条件和高选择性范围查询优先使用索引\n    ```\n\n 2. 使用覆盖索引：\n\n    ```sql\n    CREATE INDEX idx_cover ON products(category, price, rating, product_id);\n    ```\n\n 3. 使用 >=：\n\n    ```sql\n    SELECT * FROM products \n    WHERE category = 'Electronics' \n      AND price >= 1000 \n      AND rating > 4; -- 在业务允许的情况下，尽可能的使用类似于 >= 或 <= 这类的范围查询，而避免使用 > 或 < 。\n    ```\n\n##### 🚫 7. 使用 `!=` 或 `<>`\n\n```sql\n-- 索引: status\nSELECT * FROM orders WHERE status != 'completed';\n```\n\n**✅ 解决方案**：\n\n 1. 改为范围查询：\n\n    ```sql\n    SELECT * FROM orders WHERE status < 'completed' OR status > 'completed';\n    ```\n\n 2. 使用特定值列表：\n\n    ```sql\n    SELECT * FROM orders \n    WHERE status IN ('pending', 'processing', 'cancelled');\n    ```\n\n##### 🚫 8. 索引列使用 `IS NULL`/`IS NOT NULL`\n\n```sql\n-- 索引: phone\nSELECT * FROM customers WHERE phone IS NOT NULL; -- 可能失效\n```\n\n**✅ 解决方案**：\n\n 1. 添加条件限制：\n\n    ```sql\n    SELECT * FROM customers \n    WHERE phone IS NOT NULL AND phone > ''; -- 利用索引扫描\n    ```\n\n 2. 使用覆盖索引：\n\n    ```sql\n    CREATE INDEX idx_phone_cover ON customers(phone) INCLUDE (name, email);\n    ```\n\n##### 🚫 9. 数据分布不均导致优化器放弃索引\n\n```sql\n-- 索引: status (90% 值为 'active')\nSELECT * FROM products WHERE status = 'active'; -- 可能全表扫描\n```\n\n**✅ 解决方案**：\n\n 1. 强制使用索引：\n\n    ```sql\n    SELECT * FROM products FORCE INDEX(idx_status) \n    WHERE status = 'active';\n    ```\n\n 2. 调整优化器设置：\n\n    ```sql\n    SET optimizer_switch='index_condition_pushdown=off';\n    ```\n\n##### 🚫 10. 使用 `NOT IN`\n\n```sql\n-- 索引: category\nSELECT * FROM products \nWHERE category NOT IN ('Books', 'Clothing');\n```\n\n**✅ 解决方案**：\n\n 1. 改用 `NOT EXISTS`：\n\n    ```sql\n    SELECT * FROM products p\n    WHERE NOT EXISTS (\n      SELECT 1 FROM excluded_categories e \n      WHERE e.category = p.category\n    );\n    ```\n\n 2. 使用左连接：\n\n    ```sql\n    SELECT p.* \n    FROM products p\n    LEFT JOIN excluded_categories e ON p.category = e.category\n    WHERE e.category IS NULL;\n    ```\n\n#### SQL提示\n\nSQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。\n\n1.  use index ： 建议MySQL使用哪一个索引完成此次查询（仅仅是建议，mysql内部还会再次进 行评估）。\n\n   ```sql\n   explain select * from tb_user use index(idx_user_pro) where profession = '软件工程';\n   ```\n\n2.  ignore index ： 忽略指定的索引。\n\n   ```sql\n   explain select * from tb_user ignore index(idx_user_pro) where profession = '软件工程';\n   ```\n\n3. force index ： 强制使用索引。\n\n   ```sql\n   explain select * from tb_user force index(idx_user_pro) where profession = '软件工程';\n   ```\n\n#### 覆盖索引\n\n尽量使用覆盖索引，减少select *。 那么什么是覆盖索引呢？ 覆盖索引是指查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到 。\n\n执行计划 `EXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件`  查询结果中 Extra 的含义：\n\n| Extra                    | 含义                                                         |\n| ------------------------ | :----------------------------------------------------------- |\n| Using where; Using Index | 查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据 |\n| Using index condition    | 查找使用了索引，但是需要回表查询数据                         |\n\n为了更清楚理解，什么是覆盖索引，什么是回表查询，我们一起再来看下面的这组SQL的执行过程。\n\n![image-20250616235410518](MySql进阶/image-20250616235410518.png)\n\n![image-20250616235424440](MySql进阶/image-20250616235424440.png)\n\n![image-20250616235500388](MySql进阶/image-20250616235500388.png)\n\n![image-20250616235516212](MySql进阶/image-20250616235516212.png)\n\n>思考题：\n>\n>​\t一张表, 有四个字段(id, username, password, status), 由于数据量大, 需要对以下SQL语句进行优化, 该如何进行才是最优方案?\n>\n>​\tselect id,username,password from tb_user where username = 'itcast'\n>\n>​\t答案: \n>\n>​\t\t针对于 username, password建立联合索引, sql为: create index idx_user_name_pass on tb_user(username,password);\n>\n>​\t这样可以避免上述的SQL语句，在查询的过程中，出现回表查询。\n\n#### 索引设计原则\n\n1. 针对于数据量较大，且查询比较频繁的表建立索引。\n2. 针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。\n3. 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。\n4. 如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。\n5. 尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间， 避免回表，提高查询效率。\n6. 要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增 删改的效率。\n7. 如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含 NULL值时，它可以更好地确定哪个索引最有效地用于查询。\n\n##  SQL优化（后面在做）\n\n\n\n## 视图/存储过程/触发器\n\n### 视图\n\n视图（View）是一种虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视 图的查询中使用的表，并且是在使用视图时动态生成的。 通俗的讲，视图只保存了查询的SQL逻辑，不保存查询结果。所以我们在创建视图的时候，主要的工作 就落在创建这条SQL查询语句上。\n\n#### 基本语法\n\n- 创建\n\n  ```sql\n  CREATE [OR REPLACE] VIEW 视图名称[(列名列表)] AS SELECT语句 [ WITH [CASCADED | LOCAL ] CHECK OPTION ]\n  ```\n\n- 查询\n\n  ```sql\n  查看创建视图语句：SHOW CREATE VIEW 视图名称;\n  查看视图数据：SELECT * FROM 视图名称 ...... ;\n  ```\n\n- 修改\n\n  ```sql\n  方式一：CREATE [OR REPLACE] VIEW 视图名称[(列名列表)] AS SELECT语句 [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]\n  方式二：ALTER VIEW 视图名称[(列名列表)] AS SELECT语句 [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]\n  ```\n\n- 删除\n\n  ```sql\n  DROP VIEW [IF EXISTS] 视图名称 [,视图名称] ...\n  ```\n\n#### 检查选项\n\n当使用WITH CHECK OPTION子句创建视图时，MySQL会通过视图检查正在更改的每个行，例如插 入，更新，删除，以使其符合视图的定义。 MySQL允许基于另一个视图创建视图，它还会检查依赖视 图中的规则以保持一致性。为了确定检查的范围，mysql提供了两个选项： CASCADED 和 LOCAL ，默认值为 CASCADED 。\n\n1.  CASCADED 级联\n\n   比如，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 cascaded，但是v1视图 创建时未指定检查选项。 则在执行检查时，不仅会检查v2，还会级联检查v2的关联视图v1。\n\n   ![image-20250617141620652](MySql进阶/image-20250617141620652.png)\n\n2. LOCAL 本地\n\n   比如，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 local ，但是v1视图创 建时未指定检查选项。 则在执行检查时，只会检查v2，不会检查v2的关联视图v1。\n\n   ![image-20250617142456665](MySql进阶/image-20250617142456665.png)\n\n#### 视图的更新\n\n要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一 项，则该视图不可更新：\n\n-  聚合函数或窗口函数（SUM()、 MIN()、 MAX()、 COUNT()等）\n\n- DISTINCT\n\n- GROUP BY\n\n- HAVING\n\n- UNION 或者 UNION ALL\n\n  ![image-20250617143417946](MySql进阶/image-20250617143417946.png)\n\n#### **视图的作用**\n\n- 简单：视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件。\n- 安全：数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据。\n- 数据独立：视图可帮助用户屏蔽真实表结构变化带来的影响。\n\n### 存储过程\n\n存储过程是事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程可以简化应用开发 人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。 存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用。\n\n#### 特点\n\n- 封装，复用：可以把某一业务SQL封装在存储过程中，需要用到 的时候直接调用即可。\n- 可以接收参数，也可以返回数据：在存储过程中，可以传递参数，也可以接收返回值。\n- 减少网络交互，效率提升：如果涉及到多条SQL，每执行一次都是一次网络传输。 而如果封装在存储过程中，我们只需要网络交互一次可能就可以了。\n\n#### 基本语法\n\n- 创建\n\n  ```sql\n  CREATE PROCEDURE 存储过程名称 ([ 参数列表 ])\n  BEGIN\n  -- SQL语句\n  END ;\n  ```\n\n- 调用\n\n  ```sql\n  CALL 名称 ([ 参数 ]);\n  ```\n\n- 查看\n\n  ```sql\n  SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = 'xxx'; -- 查询指\n  定数据库的存储过程及状态信息\n  SHOW CREATE PROCEDURE 存储过程名称 ; -- 查询某个存储过程的定义\n  ```\n\n- 删除\n\n  ```sql\n  1 DROP PROCEDURE [ IF EXISTS ] 存储过程名称 ；\n  ```\n\n- 案例\n\n  >注意: 在命令行中，执行创建存储过程的SQL时，需要通过关键字 delimiter 指定SQL语句的 结束符。\n\n  ```sql\n  -- 存储过程基本语法\n  -- 创建\n  create procedure p1()\n  begin\n  select count(*) from student;\n  end;\n  \n  -- 调用\n  call p1();\n  \n  -- 查看\n  select * from information_schema.ROUTINES where ROUTINE_SCHEMA = 'itcast';\n  show create procedure p1;\n  \n  -- 删除\n  drop procedure if exists p1;\n  ```\n\n#### 变量\n\n在MySQL中变量分为三种类型: 系统变量、用户定义变量、局部变量。\n\n1. 系统变量\n\n   系统变量是MySQL服务器提供，不是用户定义的，属于服务器层面。分为全局变量（GLOBAL）、会话变量（SESSION）。\n\n   - 全局变量(GLOBAL): 全局变量针对于所有的会话。\n\n   - 会话变量(SESSION): 会话变量针对于单个会话，在另外一个会话窗口就不生效了。\n\n   - 如果没有指定SESSION/GLOBAL，默认是SESSION会话变量。\n\n     > mysql服务重新启动之后，所设置的全局参数会失效，要想不失效，可以在 /etc/my.cnf 中配置。\n\n   查看&设置 系统变量\n\n   ```sql\n   # 查看系统变量\n   SHOW [ SESSION | GLOBAL ] VARIABLES ; -- 查看所有系统变量\n   SHOW [ SESSION | GLOBAL ] VARIABLES LIKE '......'; -- 可以通过LIKE模糊匹配方式查找变量\n   SELECT @@[SESSION | GLOBAL] 系统变量名; -- 查看指定变量的值\n   \n   # 设置系统变量\n   SET [ SESSION | GLOBAL ] 系统变量名 = 值 ;\n   SET @@[SESSION | GLOBAL]系统变量名 = 值 ;\n   ```\n\n2. 用户定义变量\n\n   用户定义变量是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用 \"@变量 名\" 使用就可以。其作用域为当前连接。\n\n   - 赋值，可以使用 = ，也可以使用 := 。\n\n     ```sql\n     方式一:\n     \tSET @var_name = expr [, @var_name = expr] ... ;\n     \tSET @var_name := expr [, @var_name := expr] ... ;\n     方式一:\n     \tSELECT @var_name := expr [, @var_name := expr] ... ;\n     \tSELECT 字段名 INTO @var_name FROM 表名;\n     ```\n\n   - 使用\n\n     ```sql\n     SELECT @var_name ;\n     ```\n\n   > 注意: 用户定义的变量无需对其进行声明或初始化，只不过获取到的值为NULL。\n\n3. 局部变量\n\n   局部变量 是根据需要定义的在局部生效的变量，访问之前，需要DECLARE声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的BEGIN ... END块。\n\n   - 声明\n\n     ```sql\n     DECLARE 变量名 变量类型 [DEFAULT ... ] ;\n     -- 变量类型就是数据库字段类型：INT、BIGINT、CHAR、VARCHAR、DATE、TIME等。\n     ```\n\n   - 赋值\n\n     ```sql\n     SET 变量名 = 值 ;\n     SET 变量名 := 值 ;\n     SELECT 字段名 INTO 变量名 FROM 表名 ... ;\n     ```\n\n   - 使用\n\n     ```sql\n     select 变量名;\n     ```\n\n\n#### if\n\nif 用于做条件判断，具体的语法结构为：\n\n```sql\nIF 条件1 THEN\n.....\nELSEIF 条件2 THEN -- 可选\n.....\nELSE -- 可选\n.....\nEND IF;\n\n# ---------------------举例：根据定义参数score，判定当前分数对应等级--------------------\ndrop procedure if exists p3;\ncreate procedure p3()\nbegin\n    declare score int default 58; #声明变量score为58，判断其分数等级\n    declare grade varchar(10); #用于接收等级\n    if score >= 85 then\n        set grade := '优秀';\n    elseif score >= 60 then\n        set grade := '及格';\n    else\n        set grade := '不及格';\n    end if;\n    select grade;\nend;\ncall p3; # 不及格\n```\n\n> 在if条件判断的结构中，ELSE IF 结构可以有多个，也可以没有。 ELSE结构可以有，也可以没有。\n\n#### 参数\n\n参数的类型，主要分为以下三种：IN、OUT、INOUT。 具体的含义如下：\n\n| 类型  | 含义                                         | 备注 |\n| ----- | :------------------------------------------- | ---- |\n| IN    | 该类参数作为输入，也就是需要调用时传入值     | 默认 |\n| OUT   | 该类参数作为输出，也就是该参数可以作为返回值 |      |\n| INOUT | 既可以作为输入参数，也可以作为输出参数       |      |\n\n用法：\n\n```sql\nCREATE PROCEDURE 存储过程名称 ([ IN/OUT/INOUT 参数名 参数类型 ])\nBEGIN\n\t-- SQL语句\nEND ;\n```\n\n案例\n\n```sql\n-- 案例一 根据传入参数score，判定当前分数对应的分数等级，并返回。\n-- score >= 85分，等级为优秀。\n-- score >= 60分 且 score < 85分，等级为及格。\n-- score < 60分，等级为不及格。\n\nDROP PROCEDURE if EXISTS p1;\nCREATE PROCEDURE p1(IN score INT,OUT result VARCHAR(10))\nBEGIN\n\t\n\tif score >= 85 THEN\n\t\tSET result = '优秀';\n\tELSEIF score > 60 THEN\n\t\tSET result := '及格';\n\tELSE \n\t\tSET result = '不及格';\n\tEND if;\nEND;\n\n-- 定义用户变量 @result来接收返回的数据, 用户变量可以不用声明\ncall p1(99, @result);\nselect @result; -- 优秀\n\n\n-- 案例二 将传入的200分制的分数，进行换算，换算成百分制，然后返回。\n\nDROP PROCEDURE if EXISTS p2;\nCREATE PROCEDURE p2(INOUT score DOUBLE)\nBEGIN\n\tset score := score * 0.5;\nEND;\n\nSET @score = 60;\ncall p2(@score);\nSELECT @score; -- 30\n```\n\n#### case\n\ncase结构及作用，和我们在基础篇中所讲解的流程控制函数很类似。有两种语法格式：\n\n1. 语法1：\n\n   ```sql\n   -- 含义： 当case_value的值为 when_value1时，执行statement_list1，当值为 when_value2时，\n   执行statement_list2， 否则就执行 statement_list\n   CASE case_value\n   \tWHEN when_value1 THEN statement_list1\n   \t[ WHEN when_value2 THEN statement_list2] ...\n   \t[ ELSE statement_list ]\n   END CASE;\n   ```\n\n2. 语法2：\n\n   ```sql\n   -- 含义： 当条件search_condition1成立时，执行statement_list1，当条件search_condition2成\n   立时，执行statement_list2， 否则就执行 statement_list\n   CASE\n   \tWHEN search_condition1 THEN statement_list1\n   \t[WHEN search_condition2 THEN statement_list2] ...\n   \t[ELSE statement_list]\n   END CASE;\n   ```\n\n案例：\n\n```sql\n# 根据传入的月份，判定月份所属的季节（要求采用case结构）。\n# 1-3月份，为第一季度\n# 4-6月份，为第二季度\n# 7-9月份，为第三季度\n# 10-12月份，为第四季度\n\nDROP PROCEDURE if EXISTS p3;\nCREATE PROCEDURE p3(IN month INT)\nBEGIN\n\tDECLARE season VARCHAR(10);\n\tCASE \n\t\tWHEN month >= 1 and month <= 3 THEN\n\t\t\tSET season := '第一季度';\n\t\tWHEN month >= 4 and month <= 6 THEN\n\t\t\tSET season := '第二季度';\n\t\tWHEN month >= 7 and month <= 9 THEN\n\t\t\tSET season := '第三季度';\n\t\tWHEN month >= 10 and month <= 12 THEN\n\t\t\tSET season := '第四季度';\n\t\tELSE\n\t\t\tSET season := '非法参数';\n\tEND CASE;\n\n\tselect concat('您输入的月份为: ',month, ', 所属的季度为: ',season);\nEND;\n\ncall p3(10);# 您输入的月份为: 10, 所属的季度为: 第四季度\n```\n\n> 注意：如果判定条件有多个，多个条件之间，可以使用 and 或 or 进行连接。\n\n#### while\n\nwhile 循环是有条件的循环控制语句。满足条件后，再执行循环体中的SQL语句。具体语法为：\n\n```sql\n-- 先判定条件，如果条件为true，则执行逻辑，否则，不执行逻辑\nWHILE 条件 DO\n\tSQL逻辑...\nEND WHILE;\n```\n\n案例\n\n```sql\n# 计算从1累加到n的值，n为传入的参数值。\n-- A. 定义局部变量, 记录累加之后的值;\n-- B. 每循环一次, 就会对n进行减1 , 如果n减到0, 则退出循环\n\nDROP PROCEDURE if EXISTS p4;\nCREATE PROCEDURE p4(IN num INT)\nBEGIN\n\tdeclare result INT DEFAULT 0; \n\tWHILE num > 0 DO\n\t\tset result := result + num;\n\t\tset num := num - 1;\n\tEND WHILE;\n\tSELECT result;\nEND;\n\ncall p4(10); # 55\n```\n\n#### repeat\n\nrepeat是有条件的循环控制语句, 当满足until声明的条件的时候，则退出循环 。具体语法为：\n\n```sql\n-- 先执行一次逻辑，然后判定UNTIL条件是否满足，如果满足，则退出。如果不满足，则继续下一次循环\nREPEAT\n\tSQL逻辑...\n\tUNTIL 条件\nEND REPEAT;\n```\n\n案例\n\n```sql\n# 计算从1累加到n的值，n为传入的参数值。(使用repeat实现)\n-- A. 定义局部变量, 记录累加之后的值;\n-- B. 每循环一次, 就会对n进行减1 , 如果n减到0, 则退出循环\n\nDROP PROCEDURE if EXISTS p5;\nCREATE PROCEDURE p5(IN num INT)\nBEGIN\n\tdeclare result INT DEFAULT 0; \n\tREPEAT\n\t\tset result := result + num;\n\t\tset num := num - 1;\n\t\tUNTIL num <= 0\n\tEND REPEAT;\n\tSELECT result;\nEND;\n\ncall p5(10); # \n```\n\n#### loop\n\nLOOP 实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其来实现简单的死循环。 LOOP可以配合一下两个语句使用：\n\n- LEAVE ：配合循环使用，退出循环。\n- ITERATE：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环。\n\n```sql\n[begin_label:] LOOP\n\tSQL逻辑...\nEND LOOP [end_label];\n\nLEAVE label; -- 退出指定标记的循环体\nITERATE label; -- 直接进入下一次循环\n\n-- 上述语法中出现的 begin_label，end_label，label 指的都是我们所自定义的标记。\n```\n\n案例\n\n```sql\n#  案例一\n# 计算从1累加到n的值，n为传入的参数值。\n-- A. 定义局部变量, 记录累加之后的值;\n-- B. 每循环一次, 就会对n进行-1 , 如果n减到0, 则退出循环 ----> leave xx\n\nDROP PROCEDURE if EXISTS p6;\nCREATE PROCEDURE p6(IN num INT)\nBEGIN\n\tDECLARE result INT DEFAULT 0; \n\tgetSum: LOOP\n\t\tIF num <= 0 THEN\n\t\t\tLEAVE getSum; \n\t\tEND IF; \n\t\tset result := result + num;\n\t\tset num := num - 1;\n\tEND LOOP getSum;\n\tSELECT result;\nEND;\n\ncall p6(10); # 55\n\n#  案例二\n# 计算从1到n之间的偶数累加的值，n为传入的参数值。\n-- A. 定义局部变量, 记录累加之后的值;\n-- B. 每循环一次, 就会对n进行-1 , 如果n减到0, 则退出循环 ----> leave xx\n-- C. 如果当次累加的数据是奇数, 则直接进入下一次循环. --------> iterate xx\n\nDROP PROCEDURE if EXISTS p7;\nCREATE PROCEDURE p7(IN num INT)\nBEGIN\n\tDECLARE result INT DEFAULT 0; \n\tgetSum: LOOP\n\t\tIF num <= 0 THEN\n\t\t\tLEAVE getSum; \n\t\tEND IF; \n\t\t\n\t\tif num%2 = 1 then\n\t\t\tset num := num - 1;\n\t\t\titerate getSum;\n\t\tend if;\n\n\t\tset result := result + num;\n\t\tset num := num - 1;\n\t\t\n\tEND LOOP getSum;\n\tSELECT result;\nEND;\n\ncall p7(10); # 30\n```\n\n#### 游标\n\n游标（CURSOR）是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下。\n\n```sql\n# 声明游标\nDECLARE 游标名称 CURSOR FOR 查询语句 ;\n# 打开游标\nOPEN 游标名称 ;\n# 获取游标记录\nFETCH 游标名称 INTO 变量 [, 变量 ] ;\n# 关闭游标\nCLOSE 游标名称 ;\n```\n\n案例\n\n```sql\n#  根据传入的参数uage，来查询用户表tb_user中，所有的用户年龄小于等于uage的用户姓名\n#（name）和专业（profession），并将用户的姓名和专业插入到所创建的一张新表\n# (id,name,profession)中。\n\n-- 逻辑:\n-- A. 声明游标, 存储查询结果集\n-- B. 准备: 创建表结构\n-- C. 开启游标\n-- D. 获取游标中的记录\n-- E. 插入数据到新表中\n-- F. 关闭游标\n\nDROP PROCEDURE if EXISTS p8;\nCREATE PROCEDURE p8(IN iage INT)\nBEGIN\n\t# 有先后顺序：先声明普通变量，再声明游标\n\tdeclare uname varchar(100);\n\tdeclare upro varchar(100);\n\t# 1.声明游标 存储查询结果集\n\tDECLARE u_cursor CURSOR FOR SELECT `name`,profession FROM tb_user WHERE age <= iage;\n\t# 2.创建新表的 表结构\n\tdrop table if exists tb_user_pro;\n\tcreate table if not exists tb_user_pro(\n\t\tid int primary key auto_increment,\n\t\tname varchar(100),\n\t\tprofession varchar(100)\n\t);\n\t# 3.开启游标\n\tOPEN u_cursor;\n\t# 4.获取游标中的记录\n\twhile true do\n\t\tfetch u_cursor into uname,upro;\n\t\t# 5.插入数据到新表中\n\t\tinsert into tb_user_pro values (null, uname, upro);\n\tend while;\n\t# 6.关闭游标\n\tCLOSE u_cursor;\nEND;\n\ncall p8(30);\n```\n\n上述的存储过程，最终我们在调用的过程中，会报错，之所以报错是因为上面的while循环中，并没有 退出条件。当游标的数据集获取完毕之后，再次获取数据，就会报错，从而终止了程序的执行。\n\n![image-20250618174124701](MySql进阶/image-20250618174124701.png)\n\n但是此时，tb_user_pro表结构及其数据都已经插入成功了，我们可以直接刷新表结构，检查表结构中的数据。\n上述的功能，虽然我们实现了，但是逻辑并不完善，而且程序执行完毕，获取不到数据，数据库还报 错。 接下来，我们就需要来完成这个存储过程，并且解决这个问题。 要想解决这个问题，就需要通过MySQL中提供的条件处理程序 Handler 来解决。\n\n####  条件处理程序\n\n条件处理程序（Handler）可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。具体语法为：\n\n```sql\nDECLARE handler_action HANDLER FOR condition_value [, condition_value] ... statement ;\nhandler_action 的取值：\n    CONTINUE: 继续执行当前程序\n    EXIT: 终止执行当前程序\ncondition_value 的取值：\n    SQLSTATE sqlstate_value: 状态码，如 02000\n    SQLWARNING: 所有以01开头的SQLSTATE代码的简写\n    NOT FOUND: 所有以02开头的SQLSTATE代码的简写\n    SQLEXCEPTION: 所有没有被SQLWARNING 或 NOT FOUND捕获的SQLSTATE代码的简写\n```\n\n案例\n\n- 通过SQLSTATE指定具体的状态码\n\n  ```sql\n  # 我们继续来完成在上一小节提出的这个需求，并解决其中的问题。\n  #  根据传入的参数uage，来查询用户表tb_user中，所有的用户年龄小于等于uage的用户姓名\n  #（name）和专业（profession），并将用户的姓名和专业插入到所创建的一张新表\n  # (id,name,profession)中。\n  \n  -- 逻辑:\n  -- A. 声明游标, 存储查询结果集\n  -- B. 准备: 创建表结构\n  -- C. 开启游标\n  -- D. 获取游标中的记录\n  -- E. 插入数据到新表中\n  -- F. 关闭游标\n  \n  DROP PROCEDURE if EXISTS p8;\n  CREATE PROCEDURE p8(IN iage INT)\n  BEGIN\n  \t# 有先后顺序：先声明普通变量，再声明游标\n  \tdeclare uname varchar(100);\n  \tdeclare upro varchar(100);\n  \t# 1.声明游标 存储查询结果集\n  \tDECLARE u_cursor CURSOR FOR SELECT `name`,profession FROM tb_user WHERE age <= iage;\n  \t\n  \t-- 声明条件处理程序 ： 当SQL语句执行抛出的状态码为02000时，将关闭游标u_cursor，并退出\n  \tdeclare exit handler for SQLSTATE '02000' close u_cursor;\n  \t\n  \t# 2.创建新表的 表结构\n  \tdrop table if exists tb_user_pro;\n  \tcreate table if not exists tb_user_pro(\n  \t\tid int primary key auto_increment,\n  \t\tname varchar(100),\n  \t\tprofession varchar(100)\n  \t);\n  \t# 3.开启游标\n  \tOPEN u_cursor;\n  \t# 4.获取游标中的记录\n  \twhile true do\n  \t\tfetch u_cursor into uname,upro;\n  \t\t# 5.插入数据到新表中\n  \t\tinsert into tb_user_pro values (null, uname, upro);\n  \tend while;\n  \t# 6.关闭游标\n  \tCLOSE u_cursor;\n  END;\n  \n  call p8(30);\n  ```\n\n- 通过SQLSTATE的代码简写方式 NOT FOUND。02 开头的状态码，代码简写为 NOT FOUND\n\n  ```sql\n  # 我们继续来完成在上一小节提出的这个需求，并解决其中的问题。\n  #  根据传入的参数uage，来查询用户表tb_user中，所有的用户年龄小于等于uage的用户姓名\n  #（name）和专业（profession），并将用户的姓名和专业插入到所创建的一张新表\n  # (id,name,profession)中。\n  \n  -- 逻辑:\n  -- A. 声明游标, 存储查询结果集\n  -- B. 准备: 创建表结构\n  -- C. 开启游标\n  -- D. 获取游标中的记录\n  -- E. 插入数据到新表中\n  -- F. 关闭游标\n  \n  DROP PROCEDURE if EXISTS p8;\n  CREATE PROCEDURE p8(IN iage INT)\n  BEGIN\n  \t# 有先后顺序：先声明普通变量，再声明游标\n  \tdeclare uname varchar(100);\n  \tdeclare upro varchar(100);\n  \t# 1.声明游标 存储查询结果集\n  \tDECLARE u_cursor CURSOR FOR SELECT `name`,profession FROM tb_user WHERE age <= iage;\n  \t\n  \t-- 声明条件处理程序 ： 当SQL语句执行抛出的状态码为02开头时，将关闭游标u_cursor，并退出\n  \tdeclare exit handler for not found close u_cursor;\n  \t\n  \t# 2.创建新表的 表结构\n  \tdrop table if exists tb_user_pro;\n  \tcreate table if not exists tb_user_pro(\n  \t\tid int primary key auto_increment,\n  \t\tname varchar(100),\n  \t\tprofession varchar(100)\n  \t);\n  \t# 3.开启游标\n  \tOPEN u_cursor;\n  \t# 4.获取游标中的记录\n  \twhile true do\n  \t\tfetch u_cursor into uname,upro;\n  \t\t# 5.插入数据到新表中\n  \t\tinsert into tb_user_pro values (null, uname, upro);\n  \tend while;\n  \t# 6.关闭游标\n  \tCLOSE u_cursor;\n  END;\n  \n  call p8(30);\n  ```\n\n> 具体的错误状态码，可以参考官方文档： \n> https://dev.mysql.com/doc/refman/8.0/en/declare-handler.html \n> https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html\n\n### 存储函数\n\n存储函数是有返回值的存储过程，存储函数的参数只能是IN类型的。具体语法如下：\n\n```sql\nCREATE FUNCTION 存储函数名称 ([ 参数列表 ])\nRETURNS type [characteristic ...]\nBEGIN\n    -- SQL语句\n    RETURN ...;\nEND ;\n```\n\ncharacteristic说明：\n\n- DETERMINISTIC：相同的输入参数总是产生相同的结果\n- NO SQL ：不包含 SQL 语句\n- READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句\n\n案例\n\n```sql\n# 计算从1累加到n的值，n为传入的参数值。\n\nCREATE FUNCTION fun1 (n INT)\nRETURNS INT DETERMINISTIC\nBEGIN\n    declare sum int default 0;\n    while n > 0 do\n        set sum := sum + n;\n        set n := n - 1;\n    end while;\n    return sum;\nEND ;\n\nselect fun1(100); # 5050\n```\n\n### 触发器\n\n触发器是与表有关的数据库对象，指在insert/update/delete之前(BEFORE)或之后(AFTER)，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性 , 日志记录 , 数据校验等操作 。\n\n使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还 只支持行级触发，不支持语句级触发。\n\n| 触发器类型      | NEW 和 OLD                                              |\n| :-------------- | ------------------------------------------------------- |\n| INSERT 型触发器 | NEW 表示将要或者已经新增的数据                          |\n| UPDATE 型触发器 | OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据 |\n| DELETE 型触发器 | OLD 表示将要或者已经删除的数据                          |\n\n#### 基本语法\n\n- 创建\n\n  ```sql\n  CREATE TRIGGER trigger_name\n  BEFORE/AFTER INSERT/UPDATE/DELETE\n  ON tbl_name FOR EACH ROW -- 行级触发器\n  BEGIN\n  \ttrigger_stmt ;\n  END;\n  ```\n\n- 查看\n\n  ```sql\n  SHOW TRIGGERS ;\n  ```\n\n- 删除\n\n  ```sql\n  DROP TRIGGER [schema_name.]trigger_name ; -- 如果没有指定 schema_name，默认为当前数据库。\n  ```\n\n案例\n\n通过触发器记录 tb_user 表的数据变更日志，将变更日志插入到日志表user_logs中, 包含增加, 修改 , 删除 。\n\n表结构准备:\n\n```sql\n-- 准备工作 : 日志表 user_logs\ncreate table user_logs(\n    id int(11) not null auto_increment,\n    operation varchar(20) not null comment '操作类型, insert/update/delete',\n    operate_time datetime not null comment '操作时间',\n    operate_id int(11) not null comment '操作的ID',\n    operate_params varchar(500) comment '操作参数',\n    primary key(`id`)\n)engine=innodb default charset=utf8;\n```\n\n- 插入数据触发器\n\n  ```sql\n  -- 创建插入触发器\n  CREATE TRIGGER tb_user_insert_trigger AFTER INSERT ON tb_user FOR EACH ROW\n  BEGIN\n  \t\tINSERT INTO user_logs ( id, operation, operate_time, operate_id, operate_params )\n  \tVALUES\n  \t\t(NULL,'insert',now(),new.id,\n  \t\tconcat('插入的数据内容为:id=',new.id,'name=',new.NAME,', phone=',NEW.phone,', email=',NEW.email,',profession=',NEW.profession ));\n  END;\n  \n  -- 查看触发器\n  SHOW TRIGGERS;\n  \n  -- 插入数据到tb_user\n  insert into tb_user(id, name, phone, email, profession, age, gender, status,createtime) \n  VALUES (26,'三皇子','18809091212','erhuangzi@163.com','软件工程',23,'1','1',now());\n  \n  -- 查询插入触发器\n  SELECT * FROM user_logs;\n  ```\n\n- 修改数据触发器\n\n  ```sql\n  -- 创建更新触发器\n  CREATE TRIGGER tb_user_update_trigger AFTER UPDATE ON tb_user FOR EACH ROW\n  BEGIN\n  \t\tINSERT INTO user_logs ( id, operation, operate_time, operate_id, operate_params )\n  \tVALUES\n  \t\t(NULL,'update',now(),new.id,\n  \t\tconcat('更新前的数据内容为:id=',old.id,'name=',old.NAME,', phone=',old.phone,', email=',old.email,',profession=',old.profession,\n  \t\t\t\t\t',更新后的数据内容为:id=',new.id,'name=',new.NAME,', phone=',new.phone,', email=',new.email,',profession=',new.profession));\n  END;\n  \n  -- 查看触发器\n  SHOW TRIGGERS;\n  \n  -- 更新tb_user数据\n  update tb_user set profession = '会计' where id = 23;\n  \n  -- 查询更新触发器\n  SELECT * FROM user_logs;\n  ```\n\n- 删除数据触发器\n\n  ```sql\n  -- 创建删除触发器\n  CREATE TRIGGER tb_user_delete_trigger AFTER DELETE ON tb_user FOR EACH ROW\n  BEGIN\n  \t\tINSERT INTO user_logs ( id, operation, operate_time, operate_id, operate_params )\n  \tVALUES\n  \t\t(NULL,'delete',now(),old.id,\n  \t\tconcat('删除的数据内容为:id=',old.id,'name=',old.NAME,', phone=',old.phone,', email=',old.email,',profession=',old.profession));\n  END;\n  \n  -- 查看触发器\n  SHOW TRIGGERS;\n  \n  -- 删除tb_user数据\n  delete from tb_user WHERE id=26;\n  \n  -- 查询删除触发器\n  SELECT * FROM user_logs;\n  ```\n\n## 锁\n\n锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源（CPU、 RAM、I/O）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。\n\nMySQL中的体系全景图\n\n```mermaid\ngraph TD\n    A[MySQL 锁体系] --> B[按粒度划分]\n    A --> C[按功能划分]\n    A --> D[按模式划分]\n    \n    B --> B1[全局锁]\n    B --> B2[表级锁]\n    B --> B3[行级锁]\n    B --> B4[页级锁]\n    \n    C --> C1[共享锁 S]\n    C --> C2[排他锁 X]\n    C --> C3[意向共享锁 IS]\n    C --> C4[意向排他锁 IX]\n    \n    D --> D1[悲观锁]\n    D --> D2[乐观锁]\n```\n\n### 共享锁 (S Lock)\n\n**一个事务已获取共享锁，当另一个事务尝试对具备共享锁的数据进行读操作时，可正常读；进行写操作时，会被共享锁排斥**。\n\n- 特性：允许多事务并发读取\n\n- 兼容性：兼容其他 S 锁，排斥 X 锁\n\n- 使用场景：\n\n  ```sql\n  -- 保证读取期间数据不变\n  SELECT * FROM table WHERE ... LOCK IN SHARE MODE;\n  -- MySQL8.0之后也优化了写法，如下：\n  SELECT ... FOR SHARE;\n  ```\n\n### 排他锁 (X Lock)\n\n**当一个线程获取到独占锁后，会排斥其他线程（进行读写操作），如若其他线程也想对共享资源/同一数据进行操作，必须等到当前线程释放锁并竞争到锁资源才行**。\n\n- 特性：独占资源，禁止其他操作\n\n- 兼容性：排斥所有其他锁\n\n- 使用场景：\n\n  ```sql\n  SELECT * FROM table WHERE ... FOR UPTATE;\n  ```\n\n\n### 全局锁 (Global Lock)\n\n全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞。\n\n典型的使用场景是做全库的逻辑备份。\n\n- 不加全局锁：进行数据备份时，对数据进行DML语句，会导致备份前后数据不一致问题。\n- 加了全局锁：对数据库进行进行逻辑备份之前，先对整个数据库加上全局锁，一旦加了全局锁之后，其他的DDL、 DML全部都处于阻塞状态，但是可以执行DQL语句，也就是处于只读状态，而数据备份就是查询操作。 那么数据在进行逻辑备份的过程中，数据库中的数据就是不会发生变化的，这样就保证了数据的一致性和完整性。\n\n#### 基本语法\n\n加全局锁\n\n```sql\nflush tables with read lock;\n```\n\n数据备份\n\n```sql\nmysqldump -u username -p database_name > backup.sql -- （备份指定数据库到 backup.sql，执行后输入密码 ）\n```\n\n释放全局锁\n\n```sql\nunlock tables;\n```\n\n#### 特点\n\n数据库中加全局锁，是一个比较重的操作，存在以下问题：\n\n- 如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆。\n- 如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟。\n\n> 在InnoDB引擎中，我们可以在备份时加上参数 --single-transaction 参数来完成不加锁的一致 性数据备份。\n>\n> mysqldump --single-transaction -u username -p database_name > backup.sql\n\n### 表级锁 (Table Lock)\n\n表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中。\n\n使用表锁的开销相对较小，加锁快，不会产生死锁；但是加锁粒度大，发生锁冲突的概率更高，并发度更低。在innoDB存储引擎中不推荐使用表锁，只有在没有事务支持的存储引擎中才会使用，如MyISAM\n\n对于表级锁，主要分为以下三类：\n\n- 表锁\n- 元数据锁\n- 意向锁\n\n#### 表锁\n\n对于表锁，分为两类：\n\n- 表共享读锁（read lock）\n- 表独占写锁（write lock）\n\n##### 基本语法\n\n- 加锁\n\n  ```sql\n  lock tables 表名... read/write。\n  ```\n\n- 释放锁\n\n  ```sql\n  unlock tables / 客户端断开连接 。\n  ```\n\n##### 特点\n\n- 读锁：\n\n  ![image-20250619145158965](MySql进阶/image-20250619145158965.png)\n\n- 写锁：\n\n  ![image-20250619145212790](MySql进阶/image-20250619145212790.png)\n\n结论: 读锁不会阻塞其他客户端的读，但是会阻塞写。写锁既会阻塞其他客户端的读，又会阻塞其他客户端的写。\n\n#### 元数据锁（meta data lock, MDL）\n\nMDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。为了避免DML与 DDL冲突，保证读写的正确性。\n\n这里的元数据，大家可以简单理解为就是一张表的表结构。 也就是说，某一张表涉及到未提交的事务时，是不能够修改这张表的表结构的。\n\n在MySQL5.5中引入了MDL，当对一张表进行增删改查的时候，加MDL读锁(共享)；当对表结构进行变更操作的时候，加MDL写锁(排他)。\n\n常见的SQL操作时，所添加的元数据锁：\n\n| 对应SQL                                                      | 锁类型                                  | 说明                                               |\n| ------------------------------------------------------------ | :-------------------------------------- | -------------------------------------------------- |\n| lock tables xxx read / write（表锁）                         | SHARED_READ_ONLY / SHARED_NO_READ_WRITE |                                                    |\n| select 、select ... lock in share mode（普通读、共享锁）     | SHARED_READ（元数据共享锁）             | 与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥 |\n| insert 、update、 delete、select ... for update（增、改、删、排他锁） | SHARED_WRITE（元数据共享锁）            | 与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥 |\n| alter table ...（修改表结构）                                | EXCLUSIVE（元数据排他锁）               | 与其他的MDL都互斥                                  |\n\n案例\n\n当执行SELECT、INSERT、UPDATE、DELETE等语句时，添加的是元数据共享锁（SHARED_READ / SHARED_WRITE），之间是兼容的。\n\n![image-20250619151806009](MySql进阶/image-20250619151806009.png)\n\n当执行SELECT语句时，添加的是元数据共享锁（SHARED_READ），会阻塞元数据排他锁 （EXCLUSIVE），之间是互斥的。\n\n![image-20250619151824887](MySql进阶/image-20250619151824887.png)\n\n我们可以通过下面的SQL，来查看数据库中的元数据锁的情况：\n\n```sql\nselect object_type,object_schema,object_name,lock_type,lock_duration from performance_schema.metadata_locks ;\n```\n\n我们在操作过程中，可以通过上述的SQL语句，来查看元数据锁的加锁情况。\n\n![image-20250619152505379](MySql进阶/image-20250619152505379.png)\n\n#### 意向锁（Intention Lock）\n\n为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。\n\n![image-20250619153516205](MySql进阶/image-20250619153516205.png)\n<img src=\"MySql进阶/image-20250619153533331.png\" alt=\"image-20250619153533331\" style=\"zoom: 75%;\" />\n<img src=\"MySql进阶/image-20250619153742850.png\" alt=\"image-20250619153742850\" style=\"zoom:102%;\" />\n\n分类\n\n- 意向共享锁（IS）：由语句select ... lock in share mode添加，与表锁共享锁（read）兼容，与表锁排他锁（write）互斥。在准备给表数据添加一个S锁时，需要先获得该表的IS锁\n- 意向排他锁（IX）：由insert、update、delete、select...for update添加 。与表锁共享锁(read)及排他锁(write)都互斥，意向锁之间不会互斥。在准备给表数据添加一个X锁时，需要先获得该表的IX锁\n\n> 一旦事务提交了，意向共享锁、意向排他锁，都会自动释放。\n\n可以通过以下SQL，查看意向锁及行锁的加锁情况：\n\n```sql\nselect object_schema,object_name,index_name,lock_type,lock_mode,lock_data from performance_schema.data_locks;\n```\n\n案例\n\nA.意向共享锁与表读锁是兼容的\n\n![image-20250619155204018](MySql进阶/image-20250619155204018.png)\n\nB.意向排他锁与表读锁、写锁都是互斥的\n\n![image-20250619155225203](MySql进阶/image-20250619155225203.png)\n\n**兼容矩阵**：\n\n| 请求\\持有            | X    | IX   | S    | IS   |\n| :------------------- | :--- | :--- | :--- | :--- |\n| **X（共享锁）**      | ❌    | ❌    | ❌    | ❌    |\n| **IX（意向排他锁）** | ❌    | ✅    | ❌    | ✅    |\n| **S（排他锁）**      | ❌    | ❌    | ✅    | ✅    |\n| **IS（意向共享锁）** | ❌    | ✅    | ✅    | ✅    |\n\n### 行级锁 (Row Lock)\n\n行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在 InnoDB存储引擎中。InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。对于行级锁，主要分为以下三类：\n\n- 行锁（Record Lock）\n\n- 间隙锁（Gap Lock）\n\n- 临键锁（Next-Key Lock）\n\n#### 行锁 / 记录锁（Record Lock）\n\n锁定单个行记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持。\n\n![image-20250619161449148](MySql进阶/image-20250619161449148.png)\n\nInnoDB实现了以下两种类型的行锁：\n\n- 共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。\n- 排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。\n\n两种行锁的兼容情况如下:\n\n![image-20250619162711773](MySql进阶/image-20250619162711773.png)\n\n常见的SQL语句，在执行时，所加的行锁如下：\n\n![image-20250619162729583](MySql进阶/image-20250619162729583.png)\n\n案例\n\n默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻读。\n\n- 针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。\n- InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时就会升级为表锁。\n\n可以通过以下SQL，查看意向锁及行锁的加锁情况：\n\n```sql\nselect object_schema,object_name,index_name,lock_type,lock_mode,lock_data from performance_schema.data_locks;\n```\n\n#### 间隙锁（Gap Lock）\n\n锁定索引记录间隙（不含该记录），左右开区间，确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持。\n\n![image-20250619161503768](MySql进阶/image-20250619161503768.png)\n\n默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻读。\n\n**加间隙锁的规则**\n\n- 索引上的等值查询(唯一索引)，给不存在的记录加锁时, 优化为间隙锁 。\n- 索引上的等值查询(非唯一普通索引)，向右遍历时最后一个值不满足查询需求时，next-key lock 退化为间隙锁。\n- 索引上的范围查询(唯一索引)--会访问到不满足条件的第一个值为止。\n\n> 注意：间隙锁唯一目的是防止其他事务插入间隙。间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁。\n\n#### 临键锁（Next-Key Lock）\n\n行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap，左开右闭。 在RR隔离级别下支持。\n\n ![image-20250619161513760](MySql进阶/image-20250619161513760.png)\n\n案例\n\nA. 索引上的等值查询(唯一索引)，给不存在的记录加锁时, 优化为间隙锁 \n\n![image-20250620103800893](MySql进阶/image-20250620103800893.png)\n\nB. 索引上的等值查询(非唯一普通索引)，向右遍历时最后一个值不满足查询需求时，next-key lock 退化为间隙锁。 \n\n分析： InnoDB的B+树索引，叶子节点是有序的双向链表。 假如，我们要根据这个二级索引查询值为18的数据，并加上共享锁，我们是只锁定18这一行就可以了吗？ 并不是，因为是非唯一索引，这个结构中可能有多个18的存在，所以，在加锁时会继续往后找，找到一个不满足条件的值（当前案例中也 就是29）。此时会对18加临键锁，并对29之前的间隙加锁。\n\n![image-20250620142439702](MySql进阶/image-20250620142439702.png)\n\nC. 索引上的范围查询(唯一索引)--会访问到不满足条件的第一个值为止。\n\n![image-20250620143630717](MySql进阶/image-20250620143630717.png)\n\n查询的条件为id>=19，并添加共享锁。此时我们可以根据数据库表中现有的数据，将数据分为三个部分： [19] (19,25] (25,+∞] 所以数据库数据在加锁是，就是将19加了行锁，25的临键锁（包含25及25之前的间隙），正无穷的临键锁(正无穷及之前的间隙)。\n\n### 乐观锁/悲观锁\n\n#### 悲观锁（Pessimistic Locking）\n\n- **假设冲突必然发生**，因此在访问数据前先加锁，阻止其他事务同时修改。\n- **适用场景**：写操作频繁、并发冲突概率高的场景（如库存扣减、金融转账）。\n\n**实现方式**：\n\n```sql\n-- 行级锁\n-- 共享锁（S锁）：允许多事务同时读\nSELECT * FROM products WHERE id = 1 LOCK IN SHARE MODE;\n\n-- 排他锁（X锁）：阻止其他事务读写\nSELECT * FROM products WHERE id = 1 FOR UPDATE;\n\n-- 表级锁\nLOCK TABLES products WRITE;  -- 写锁（排他）\nUNLOCK TABLES;\n```\n\n- **优点**：确保数据一致性，避免脏写。\n- 缺点：\n  - 增加锁等待时间，降低并发性能。\n  - 可能导致死锁（如事务循环等待锁）。\n\n\n#### 乐观锁（Optimistic Locking）\n\n- **假设冲突很少发生**，不提前加锁，而是在提交时检查数据是否被修改。\n- **适用场景**：读操作频繁、冲突概率低的场景（如商品浏览量统计）。\n\n**实现方式**：\n\n- **版本号（Version）**：\n\n  ```sql\n  -- 表结构增加 version 字段\n  CREATE TABLE products (\n    id INT PRIMARY KEY,\n    stock INT,\n    version INT DEFAULT 0\n  );\n  \n  -- 事务1：读取数据\n  SELECT stock, version FROM products WHERE id = 1;\n  \n  -- 事务1：更新时校验 version\n  UPDATE products \n  SET stock = stock - 1, version = version + 1 \n  WHERE id = 1 AND version = 上次读取的version;\n  ```\n\n- **时间戳（Timestamp）**：类似版本号，使用时间戳字段记录数据修改时间。\n\n- 优点：\n  - 无需加锁，提升并发性能。\n  - 避免死锁。\n- 缺点：\n  - 需要应用层处理冲突（如重试机制）。\n  - 不适合高冲突场景（重试频繁会降低效率）。\n\n## InnoDB引擎\n\n### InnoDB的逻辑存储结构\n\n![image-20250620104752975](MySql进阶/image-20250620104752975.png)\n\n1. 表空间\n\n   表空间是InnoDB存储引擎逻辑结构的最高层， 如果用户启用了参数 innodb_file_per_table(在 8.0版本中默认开启) ，则每张表都会有一个表空间（xxx.ibd），一个mysql实例可以对应多个表空间，用于存储记录、索引等数据。\n\n2. 段\n\n   段，分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段 （Rollback segment），InnoDB是索引组织表，数据段就是B+树的叶子节点， 索引段即为B+树的 非叶子节点。段用来管理多个Extent（区）。\n\n3. 区\n\n   区，表空间的单元结构，每个区的大小为1M。 默认情况下，InnoDB存储引擎页大小为16K， 即一 个区中一共有64个连续的页。\n\n4. 页\n\n   页，是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。\n\n5. 行\n\n   行，InnoDB 存储引擎数据是按行进行存放的。 \n\n   在行中，默认有两个隐藏字段：\n\n   - Trx_id：每次对某条记录进行改动时，都会把对应的事务id赋值给trx_id隐藏列。\n   - Roll_pointer：每次对某条引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。\n\n### 架构\n\nMySQL5.5 版本开始，默认使用InnoDB存储引擎，它擅长事务处理，具有崩溃恢复特性，在日常开发中使用非常广泛。下面是InnoDB架构图，左侧为内存结构，右侧为磁盘结构。\n\n![image-20250620105415790](MySql进阶/image-20250620105415790.png)\n\n#### 内存结构\n\n在左侧的内存结构中，主要分为这么四大块儿： Buffer Pool、Change Buffer、Adaptive Hash Index、Log Buffer。 接下来介绍一下这四个部分。\n\n1. Buffer Pool\n\n   InnoDB存储引擎基于磁盘文件存储，访问物理硬盘和在内存中进行访问，速度相差很大，为了尽可能弥补这两者之间的I/O效率的差值，就需要把经常使用的数据加载到缓冲池中，避免每次访问都进行磁盘I/O。\n\n   在InnoDB的缓冲池中不仅缓存了索引页和数据页，还包含了undo页、插入缓存、自适应哈希索引以及 InnoDB的锁信息等等。\n\n   缓冲池 Buffer Pool，是主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增、删、改、查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。\n\n   缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态，将Page分为三种类型：\n\n   - free page：空闲page，未被使用\n   - clean page：被使用page，数据没有被修改过\n   - dirty page：脏页，被使用page，数据被修改过，页中数据与磁盘的数据产生了不一致\n\n   > 在专用服务器上，通常将多达80％的物理内存分配给缓冲池 。参数设置： show variables like 'innodb_buffer_pool_size';\n\n2. Change Buffer\n\n   Change Buffer，更改缓冲区（针对于非唯一二级索引页），在执行DML语句时，如果这些数据Page 没有在Buffer Pool中，是不会直接操作磁盘，而是会将数据变更存在更改缓冲区 Change Buffer 中，在以后数据被读取时，再将数据合并恢复到Buffer Pool中，再将合并后的数据刷新到磁盘中。\n\n   意义：与聚集索引不同，二级索引通常是非唯一的，并且以相对随机的顺序插入二级索引。同样，删除和更新可能会影响索引树中不相邻的二级索引页，如果每一次都操作磁盘，会造成大量的磁盘IO。有了 ChangeBuffer 之后，我们可以在缓冲池中进行合并处理，减少磁盘IO。\n\n3.  Adaptive Hash Index\n\n   自适应hash索引，用于优化对Buffer Pool数据的查询。MySQL的innoDB引擎中虽然没有直接支持 hash索引，但是给我们提供了一个功能就是这个自适应hash索引。hash索引在 进行等值匹配时，一般性能是要高于B+树的，因为hash索引一般只需要一次IO即可，而B+树，可能需要几次匹配，所以hash索引的效率要高，但是hash索引又不适合做范围查询、模糊匹配等。\n\n   InnoDB存储引擎会监控对表上各索引页的查询，如果观察到在特定的条件下hash索引可以提升速度， 则建立hash索引，称之为自适应hash索引。**自适应哈希索引，无需人工干预，是系统根据情况自动完成。**\n\n   ```sql\n   参数： adaptive_hash_index\n   ```\n\n4. Log Buffer\n\n   日志缓冲区，用来保存要写入到磁盘中的log日志数据（redo log 、undo log）， 默认大小为 16MB，日志缓冲区的日志会定期刷新到磁盘中。如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘 I/O。\n\n   参数\n\n   - innodb_log_buffer_size：缓冲区大小\n   - innodb_flush_log_at_trx_commit：日志刷新到磁盘时机，取值主要包含以下三个：\n     - 1：日志在每次事务提交时写入并刷新到磁盘，默认值\n     - 0: 每秒将日志写入并刷新到磁盘一次\n     - 2: 日志在每次事务提交后写入，并每秒刷新到磁盘一次\n\n#### 磁盘结构\n\n![image-20250620123258462](MySql进阶/image-20250620123258462.png)\n\n1. System Tablespace\n\n   系统表空间是更改缓冲区的存储区域。如果表是在系统表空间而不是每个表文件或通用表空间中创建的，它也可能包含表和索引数据。(在MySQL5.x版本中还包含InnoDB数据字典、undolog等)。参数：innodb_data_file_path。系统表空间，默认的文件名叫 ibdata1。\n\n2. **File-Per-Table Tablespaces**\n\n   如果开启了innodb_file_per_table开关 ，则每个表的文件表空间包含单个InnoDB表的数据和索 引 ，并存储在文件系统上的单个数据文件中。 开关参数：innodb_file_per_table ，该参数默认开启。我们每创建一个表，都会产生一个表空间文件（.ibd）。\n\n3.  General Tablespaces\n\n   通用表空间，需要通过 CREATE TABLESPACE 语法创建通用表空间，在创建表时，可以指定该表空间。\n\n   - 创建表空间\n\n     ```sql\n     CREATE TABLESPACE ts_name ADD DATAFILE 'file_name' ENGINE = engine_name;\n     ```\n\n   - 创建表时指定表空间\n\n     ```sql\n     CREATE TABLE xxx ... TABLESPACE ts_name;\n     ```\n\n4. Undo Tablespaces\n\n   撤销表空间，MySQL实例在初始化时会自动创建两个默认的undo表空间（初始大小16M），用于存储 undo log日志。\n\n5. Temporary Tablespaces\n\n   InnoDB 使用会话临时表空间和全局临时表空间。存储用户创建的临时表等数据。\n\n6. Doublewrite Buffer Files\n\n   双写缓冲区，innoDB引擎将数据页从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件 中，便于系统异常时恢复数据。\n\n   ![image-20250620160119189](MySql进阶/image-20250620160119189.png)\n\n7. Redo Log\n\n   重做日志，是用来实现事务的持久性。该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log）,前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都会存到该日志中, 用于在刷新脏页到磁盘时,发生错误时, 进行数据恢复使用。以循环方式写入重做日志文件，涉及两个文件：\n\n   ![image-20250620161720172](MySql进阶/image-20250620161720172.png)\n\n#### 后台线程\n\n在Innodb存储引擎中，后台线程的主要作用是负责刷新内存池中的数据，保证缓冲池中的内存缓存的是最近的数据。此外它会将已经修改的数据文件刷新到磁盘文件中，保证在不发生异常的情况下，Innodb能够恢复到正常的运行状态。\n\n<img src=\"MySql进阶/image-20250620164920302.png\" alt=\"image-20250620164920302\" style=\"zoom:80%;\" />\n\n##### Master Thread\n\n核心后台线程，负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中, 保持数据的一致性， 还包括脏页的刷新、合并插入缓存、undo页的回收 。\n\n##### IO Thread\n\n在InnoDB存储引擎中大量使用了AIO来处理IO请求, 这样可以极大地提高数据库的性能，而IO Thread主要负责这些IO请求的回调。\n\n| 线程类型             | 默认个数 | 职责                         |\n| -------------------- | :------- | :--------------------------- |\n| Read thread          | 4        | 负责读操作                   |\n| Write thread         | 4        | 负责写操作                   |\n| Log thread           | 1        | 负责将日志缓冲区刷新到磁盘   |\n| Insert buffer thread | 1        | 负责将写缓冲区内容刷新到磁盘 |\n\n我们可以通过以下的这条指令，查看到InnoDB的状态信息，其中就包含IO Thread信息。\n\n```sql\nshow engine innodb status \\G;\n```\n\n![image-20250620165736769](MySql进阶/image-20250620165736769.png)\n\n#####  Purge Thread\n\n主要用于回收事务已经提交了的undo log，在事务提交之后，undo log可能不用了，就用它来回收。\n\n##### Page Cleaner Thread\n\n协助 Master Thread 刷新脏页到磁盘的线程，它可以减轻 Master Thread 的工作压力，减少阻塞。\n\n### 事务原理\n\n事务：是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。\n\n事务特性：\n\n- 原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。 \n- 一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。\n- 隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。\n- 持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。\n\n![image-20250621224123076](MySql进阶/image-20250621224123076.png)\n\n![image-20250620171117621](MySql进阶/image-20250620171117621.png)\n\n#### redo log\n\n重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。\n\n该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file）,前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中,用于在刷新脏页到磁盘,发生错误时,进行数据恢复使用。\n\n- 没有redo log，可能会存在什么问题\n\n  - 在InnoDB引擎中的内存结构中，主要的内存区域就是缓冲池，在缓冲池中缓存了很多的数据页。 \n\n  - 当我们在一个事务中，执行多个增删改的操作时，InnoDB引擎会先操作缓冲池中的数据，如果缓冲区没有对应的数据，会通过后台线程将磁盘中的数据加载出来，存放在缓冲区中。\n\n  - 然后将缓冲池中的数据修改，修改后的数据页我们称为脏页。\n\n  - 脏页会在一定的时机，通过后台线程将缓冲区的数据刷新到磁盘中，从而保证缓冲区与磁盘的数据一致。 \n\n  - 但是缓冲区的脏页数据并不是实时刷新的，而是一段时间之后将缓冲区的数据刷新到磁盘中，假如刷新到磁盘的过程出错了，而提示给用户事务提交成功，而数据却没有持久化下来，这就出现问题了，没有保证事务的持久性。\n\n    ![image-20250621225711788](MySql进阶/image-20250621225711788.png)\n\n- InnoDB中提供了一份日志 redo log\n\n  - 有了redolog之后，当对缓冲区的数据进行增删改之后，会首先将操作的数据页的变化，记录在redo log buffer中。\n\n  - 在事务提交时，会将redo log buffer中的数据刷新到redo log磁盘文件中。\n\n  - 过一段时间之后，如果刷新缓冲区的脏页到磁盘时，发生错误，此时就可以借助于redo log进行数据恢复，这样就保证了事务的持久性。\n\n  - 而如果脏页成功刷新到磁盘或者涉及到的数据已经落盘，此时redolog就没有作用了，就可以删除了，所以存在的两个redolog文件是循环写的。\n\n    >为什么每一次提交事务，要刷新redo log 到磁盘中呢，而不是直接将buffer pool中的脏页刷新到磁盘呢 ?\n    >\n    >因为在业务操作中，我们操作数据一般都是随机读写磁盘的，而不是顺序读写磁盘。 而redo log在往磁盘文件中写入数据时，由于是日志文件，所以都是顺序写的。顺序写的效率，要远大于随机写。 这种先写日志的方式，称之为 **WAL（Write-Ahead Logging）**。\n\n    ![image-20250621230200290](MySql进阶/image-20250621230200290.png)\n\n#### undo log\n\n回滚日志，用于记录数据被修改前的信息 , 作用包含两个 : 提供回滚(保证事务的原子性) 和 MVCC(多版本并发控制) 。\n\nundo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的 update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。\n\n- Undo log存储：undo log采用段的方式进行管理和记录，存放在前面介绍的 rollback segment 回滚段中，内部包含1024个undo log segment。\n- Undo log销毁：undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些日志可能还用于MVCC。\n\n#### **MVCC**\n\n##### 基本概念\n\n1. 当前读\n\n   读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如：select ... lock in share mode(共享锁)，select ... for update、update、insert、delete(排他锁)都是一种当前读。\n\n   案例\n\n   ![image-20250621231422373](MySql进阶/image-20250621231422373.png)\n\n   - 上面案例中当前隔离级别是RC（可重复读）中，同时开启两个事务。在事务A中，使用普通select 查询语句无法查询事务B中修改的数据。\n   - 但是在查询语句后面加上了 `lock in share mode` 共享锁，此时是当前读操作。当然，我们加排他锁的时候，也是当前读操作。可以读取到事务B最新提交的内容。\n\n2. 快照读\n\n   简单的select（不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。\n\n   - Read Committed 读已提交：每次select，都生成一个快照读\n   - Repeatable Read 可重复高读：开启事务后第一个select语句才是快照读的地方。即第一次select查询产生快照读，后面的select查询直接使用前面的快照数据\n   - Serializable 串行化：快照读会退化为当前读，每次读取都需要加锁\n\n   案例\n\n   ![image-20250621231957468](MySql进阶/image-20250621231957468.png)\n\n   在测试中,我们看到即使事务B提交了数据,事务A中也查询不到。原因就是因为普通的select是快照读，而在当前默认的RR隔离级别下，开启事务后第一个select语句才是快照读的地方，后面执行相同的select语句都是从快照中获取数据，可能不是当前的最新数据，这样也就保证了可重复读。\n\n3.  **MVCC**\n\n   全称 Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本， 使得读写操作没有冲突，快照读为MySQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo log日志、readView。\n\n##### 隐藏字段\n\n当我们创建表的时候，除了我们自己定义的字段以为，InnoDB还会自动的给我们添加三个隐藏字段。\n\n![image-20250621232531157](MySql进阶/image-20250621232531157.png)\n\n>  前两个字段是肯定会添加的，是否添加最后一个字段DB_ROW_ID，得看当前表有没有主键，如果有主键，则不会添加该隐藏字段。\n\n##### undo log\n\n- 回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。\n- 当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。\n- 而update、delete的时候，产生的undo log日志不仅在回滚时需要，在快照读时也需要，不会立即被删除。\n\nundo log 版本链\n\n演示：如果四个事务需要同时访问同一条记录时。\n\n![image-20250621233632797](MySql进阶/image-20250621233632797.png)\n\n> DB_TRX_ID : 代表最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID，是自增的。 DB_ROLL_PTR ： 由于这条数据是才插入的，没有被更新过，所以该字段值为null。\n\n![image-20250621234515153](MySql进阶/image-20250621234515153.png)\n\n> **不同事务或相同事务对同一条记录进行修改，会导致该记录的undolog生成一条 记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录。**\n\n##### readview\n\nReadView（读视图）是 快照读 SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id。\n\n![image-20250621235043848](MySql进阶/image-20250621235043848.png)\n\n![image-20250621235208265](MySql进阶/image-20250621235208265.png)\n\n**不同的隔离级别，生成ReadView的时机不同：** \n\n- READ COMMITTED：在事务中每一次执行快照读时生成ReadView。 \n- REPEATABLE READ：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。\n\n##### 原理分析\n\n- RC隔离级别\n\n  **RC隔离级别下，在事务中每一次执行快照读时生成ReadView。**\n\n  ![0ed1156035e50af2c60e93e066b67b5](MySql进阶/0ed1156035e50af2c60e93e066b67b5.png)\n\n  分析：\n\n  1. 将左下记录根据 DB_TRX_ID （当前事务id  为4）带入右下版本链规则 ①②③④ 中，发现都不成立。说明本次快照读查找的数据不是事务id为4的记录。\n  2. 按照版本链往下找（根据表尾地址查找）下一条记录，找到事务id为3的记录，在 ①②③④ 都不成立，继续向下寻找。\n  3. 找到一条事务id为2的记录，发现②成立。说明本次快照读查找的数据=是事务id为2的记录。\n\n- RR隔离级别\n\n  **RR隔离级别下，仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView**。 而RR 是可重复读，在一个事务中，执行两次相同的select语句，查询到的结果是一样的。\n  \n  ![image-20250622222312347](MySql进阶/image-20250622222312347.png)\n\n  在RR隔离级别下，只是在事务中第一次快照读时生成ReadView，后续都是复用该 ReadView，那么既然ReadView都一样， ReadView的版本链匹配规则也一样， 那么最终快照读返回的结果也是一样的。\n\n结论：MVCC的实现原理就是通过 InnoDB表的隐藏字段、UndoLog 版本链、ReadView来实现的。 而MVCC + 锁，则实现了事务的隔离性。 而一致性则是由redolog 与 undolog保证。\n\n![image-20250622222613229](MySql进阶/image-20250622222613229.png)\n","tags":["MySql进阶 学习笔记"],"categories":["MySql","MySql进阶"]},{"title":"系统升级","url":"/2025/06/04/RandomNotes/系统升级/","content":"\n# **SSH**框架升级为**SpringBoot**\n\n## 前言和准备\n\n>公司系统使用框架为SSH（**Spring** + **Spring MVC** + **Hibernate**)，现在要求升级为SpringBoot。  \n>\n>原项目：Spring 3.1.3 + Hibernate 4.2.21 使用jar包方式  \n>\n>准备升级为：SpringBoot2.7.6 +  使用mavne管理jar包\n>\n>Spring Boot 2.x需要Spring 5和Hibernate 5.2+，因此我们需要升级这些依赖。\n\n## 步骤\n\n### 1. 创建Spring Boot项目\n\n   使用阿里云地址 ` https://start.aliyun.com/ ` 来创建一个新的Spring Boot 项目。选择 JDK8、Maven、Spring Boot 版本2.7.6。\n\n   目录结构为：\n\n   ![image-20250605142847636](系统升级/image-20250605142847636.png)\n\n### 2. jar包用maven替换\n\n将原项目src下的目录复制到新建的项目中。先运行一下` @SpringBootApplication ` 类，根据报错去添加相关依赖。没有去网站` [Maven Repository: Search/Browse/Explore (mvnrepository.com)](https://mvnrepository.com/) `下载依赖。\n\n   #### 1. 集成log4j\n\n  > Spring Boot 已弃用 spring-boot-starter-log4j：\n  >   Spring Boot 从 1.2.x 版本开始，官方推荐使用 Logback 或 Log4j2，不再支持旧版的 Log4j 1.x。\n  >   因此，spring-boot-starter-log4j 在较新的 Spring Boot 版本中已被移除。\n\n   因为之前系统使用log4j，为了不用改配置和代码，确定继续使用log4j。下载好依赖后导入` pom.xml` 文件中。\n\n   ```xml\n   <!--添加log4j依赖模块-->\n   <dependency>\n      <groupId>log4j</groupId>\n      <artifactId>log4j</artifactId>\n      <version>1.2.17</version>\n   </dependency>\n   ```\n\n   #### 2. 集成` Hibernate  `  \n\n   原系统使用的 ` hibernate  ` 版本 4.2.21。\n   1. 导入依赖\n\n   ```xml\n   <!-- 只需添加 JPA Starter Spring Boot 会自动引入兼容的 Hibernate 版本（无需手动指定）-->\n   <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-data-jpa</artifactId>\n   </dependency>\n   ```\n\n   `spring-boot-starter-data-jpa` 已集成 Hibernate 核心依赖，无需单独引入 `hibernate-core` 等包。  \n\n   2. 配置文件\n\n   以前需要在` application-context.xml ` 文件中配置\n\n   <img src=\"系统升级/image-20250605140715306.png\" alt=\"image-20250605140715306\" style=\"zoom:80%;\" />\n\n   现在只需要在` application.yaml ` 文件中配置即可。\n\n   ![image-20250605141925706](系统升级/image-20250605141925706.png)\n\n#### 3. 前端代码移植\n\n- 原系统使用JSP，需要将原项目`WebContent` 目录下的文件复制到，`webapp` 目录下。\n\n  - 原系统：\n\n  ![image-20250610180417112](系统升级/image-20250610180417112.png)\n\n  - 现在系统：\n\n  ![image-20250610180521544](系统升级/image-20250610180521544.png)\n\n- 配置视图解析器  \n\n```xml\n mvc:\n    view:\n      prefix: /WEB-INF/jsp/ #配置视图解析器\n      suffix: .jsp\n  web:\n    resources:\n      static-locations: classpath:/static/,classpath:/WEB-INF/userData/,classpath:/WEB-INF/temp/ #设置静态资源路径\n```\n\n- 引入依赖\n\n  ```xml\n  <!--SpringBoot不推荐使用jsp  加入一个处理jsp的依赖。 负责编译jsp文件-->\n  <dependency>\n      <groupId>org.apache.tomcat.embed</groupId>\n      <artifactId>tomcat-embed-jasper</artifactId>\n  </dependency>\n  <!--jstl 依赖-->\n  <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>jstl</artifactId>\n  </dependency>\n  ```\n\n  \n","tags":["随笔"],"categories":["随笔"]},{"title":"JVM 基础 5 - GC 垃圾回收","url":"/2025/05/25/Java/JVM/JVM 基础 5 - 垃圾回收/","content":"\n# **垃圾回收**\n\nJVM 垃圾回收 (Garbage Collection, GC) 是 Java 虚拟机自动管理堆内存的核心机制。它负责识别并回收程序中不再使用的对象所占用的内存，防止内存泄漏，极大地简化了开发人员的内存管理工作。  \n\n垃圾回收器如果发现某个对象不再使用，就可以回收该对象。\n\n<img src=\"JVM 基础 5 - 垃圾回收/b2af5602-f0d0-408c-a09a-7714c1b6f84a.png\" alt=\"b2af5602-f0d0-408c-a09a-7714c1b6f84a\" style=\"zoom: 67%;\" />\n\n<img src=\"JVM 基础 5 - 垃圾回收/e5157ef9-aa76-4ba7-9185-bc32389e5d5f.png\" alt=\"e5157ef9-aa76-4ba7-9185-bc32389e5d5f\" style=\"zoom:67%;\" />\n\n- 自动垃圾回收，自动根据对象是否使用由虚拟机来回收对象\n  + 优点：降低程序员实现难度、降低对象回收bug的可能性\n  + 缺点：程序员无法控制内存回收的及时性\n\n- 手动垃圾回收，由程序员编程实现对象的删除\n  + 优点：回收及时性高，由程序员把控回收的时机\n  + 缺点：编写不当容易出现悬空指针、重复释放、内存泄漏等问题\n\n> 如果需要手动触发垃圾回收，可以调用System.gc()方法。\n> 语法： `System.gc()`\n> 注意事项：\n>    调用System.gc()方法并不一定会立即回收垃圾，仅仅是向Java虚拟机发送一个垃圾回收的请求，具体是否需要执行垃圾回收Java虚拟机会自行判断。\n\n## 如何判断对象可以回收\n\n### 引用计数法\n\n引用计数法会为每个对象维护一个引用计数器，当对象被引用时加1，取消引用时减1。当值为 0 时，就表示该对象不被引用，可以被垃圾收集器回收。\n\n缺点：  \n  1. 每次引用和取消引用都需要维护计数器，对系统性能会有一定的影响\n  2. 存在循环引用问题，所谓循环引用就是当A引用B，B同时引用A时会出现对象无法回收的问题。如下图：\n\n<img src=\"JVM 基础 5 - 垃圾回收/9df039034d2d5bb0a25498826e744cd9.png\" alt=\"9df039034d2d5bb0a25498826e744cd9\" style=\"zoom:80%;\" />\n\n### 可达性分析法\n\n通过 GC Roots 作为起始点进行搜索，能够到达到的对象都是存活的，不可达的对象可被回收。\n\n![0635cbe8](JVM 基础 5 - 垃圾回收/0635cbe8.png)\n\n- JVM 中的垃圾回收器通过可达性分析来探索所有存活的对象\n- 扫描堆中的对象，看能否沿着 GC Root 对象为起点的引用链找到该对象，如果找不到，则表示可以回收\n-  Java 中可以作为 GC Root 的对象：\n  - 虚拟机栈（栈帧中的本地变量表）中引用的对象。\n  - 方法区中类静态属性引用的对象\n  - 方法区中常量引用的对象\n  - 本地方法栈中 JNI（即一般说的Native方法）引用的对象\n\n## 引用对象\n\n<img src=\"JVM 基础 5 - 垃圾回收/39e05348c91a7142b1977434ff27c2a3.png\" alt=\"39e05348c91a7142b1977434ff27c2a3\" style=\"zoom:80%;\" />\n\n### 1. 强引用（StrongReference）\n\n被强引用关联的对象不会被回收。只有GC Root**都不引用**该对象时，才会回收**强引用**对象\n\n### 2. 软引用（SoftReference）\n\n如果一个对象只有软引用引对象时，当程序内存不足时，就会将软引用中的数据进行回收。在JDK 1.2版之后提供了SoftReference类来实现软引用，软引用常用于缓存中。\n\n### 3. 弱引用（WeakReference）\n\n如果一个对象只有弱引用该对象时，在垃圾回收时，**无论内存是否充足**，就会将弱引用中的数据进行回收。在JDK 1.2版之后提供了WeakReference类来实现弱引用，弱引用主要在ThreadLocal中使用。\n\n### 4. 虚引用（PhantomReference）（不常见）\n\n虚引用也叫幽灵引用/幻影引用，不能通过虚引用对象获取到包含的对象。虚引用唯一的用途是当对象被垃圾回收器回收时可以接收到对应的通知。Java中使用PhantomReference实现了虚引用，直接内存中为了及时知道直接内存对象不再使用，从而回收内存，使用了虚引用来实现。\n\n### 5. 终结器引用（FinalReference）（不常见）\n\n终结器引用指的是在对象需要被回收时，终结器引用会关联对象并放置在Finalizer类中的引用队列中，在稍后由一条由FinalizerThread线程从队列中获取对象，然后执行对象的finalize方法，在对象第二次被回收时，该对象才真正的被回收。在这个过程中可以在finalize方法中再将自身对象使用强引用关联上，但是不建议这样做。\n\n## **垃圾回收算法**\n\n### 1. 标记-清除算法\n\n  1. 虚拟机执行垃圾回收的过程中，使用可达性分析算法，从GC Root开始通过引用链遍历出所有存活对象。将所有存活的对象进行标记。\n  2. 然后垃圾收集器根据标识清除没有被标记也就是非存活对象，给堆内存腾出相应的空间\n\n![a4248c4b-6c1d-4fb8-a557-86da92d3a294](JVM 基础 5 - 垃圾回收/a4248c4b-6c1d-4fb8-a557-86da92d3a294.jpg)\n\n优点：实现简单，只需要在第一阶段给每个对象维护标志位，第二阶段删除对象即可。\n\n缺点：\n\n  - 会产生大量不连续的内存碎片，导致无法给大对象分配内存。由于内存是连续的，所以在对象被删除之后，内存中会出现很多细小的可用内存单元。如果我们需要的是一个比较大的空间，很有可能这些内存单元的大小过小无法进行分配。\n  - 分配速度慢。由于内存碎片的存在，需要维护一个空闲链表，极有可能发生每次需要遍历到链表的最后才能获得合适的内存空间。\n  - 标记和清除过程效率都不高。\n\n### 2. 标记-整理算法\n\n标记整理算法也叫标记压缩算法，是对标记清理算法中容易产生内存碎片问题的一种解决方案。\n\n  1. 标记阶段，将所有存活的对象进行标记。Java中使用可达性分析算法，从GC Root开始通过引用链遍历出所有存活对象。\n  2. 整理阶段，将存活对象移动到堆的一端。清理掉存活对象的内存空间。\n\n![902b83ab-8054-4bd2-898f-9a4a0fe52830](JVM 基础 5 - 垃圾回收/902b83ab-8054-4bd2-898f-9a4a0fe52830.jpg)\n\n优点：不会产生内存碎片。\n\n缺点：内存变动更频繁，需要整理所有存活对象的引用地址，效率不高。\n\n### 3. 复制算法\n\n将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理，最后会把位置互换。\n\n![e6b733ad-606d-4028-b3e8-83c3a73a3797](JVM 基础 5 - 垃圾回收/e6b733ad-606d-4028-b3e8-83c3a73a3797.jpg)\n\n优点：不会产生内存碎片；吞吐量高，复制算法只需要遍历一次存活对象复制到To空间即可，比标记-整理算法少了一次遍历的过程，因而性能较好，但是不如标记-清除算法，因为标记清除算法不需要进行对象的移动\n\n缺点：内存使用效率低，每次只能让一半的内存空间来为创建对象使用。\n\n### 4. 分代垃圾回收算法\n\n现代优秀的垃圾回收算法，会将上述描述的垃圾回收算法组合进行使用，其中应用最广的就是分代垃圾回收算法(Generational GC)。  \n\n分代垃圾回收将整个内存区域划分为年轻代（复制算法）和老年代（标记 - 清除 或者 标记 - 整理 算法）：\n\n<img src=\"JVM 基础 5 - 垃圾回收/6ef8cd7b-e23a-4fab-b03c-05f350d71d82.png\" alt=\"6ef8cd7b-e23a-4fab-b03c-05f350d71d82\" style=\"zoom: 80%;\" />\n\n1. 分代回收时，创建出来的对象，首先会被放入Eden伊甸园区。\n\n2. 随着对象在Eden区越来越多，如果Eden区满，新创建的对象已经无法放入，就会触发年轻代的GC，称为Minor GC或者Young GC。  \n\n   Minor GC会把需要eden中和From需要回收的对象回收，把没有回收的对象放入To区。\n\n3. 接下来，S0会变成To区，S1变成From区。当eden区满时再往里放入对象，依然会发生Minor GC。  \n\n   此时会回收eden区和S1(from)中的对象，并把eden和from区中剩余的对象放入S0。注意：每次Minor GC中都会为对象记录他的年龄，初始值为0，每次GC完加1。\n\n4. 如果Minor GC后对象的年龄达到阈值（最大15，默认值和垃圾回收器有关），对象就会被晋升至老年代。\n\n5. 当老年代中空间不足，无法放入新的对象时，先尝试minor gc如果还是不足，就会触发Full GC，Full GC会对整个堆进行垃圾回收。\n\n   如果Full GC依然无法回收掉老年代的对象，那么当对象继续放入老年代时，就会抛出Out Of Memory异常。\n   \n6. 特殊情况：当遇到一个**较大的对象**时，就算新生代的**伊甸园**为空，也**无法容纳该对象**时，会将该对象**直接晋升为老年代**。\n\n#### 相关 [JVM](https://so.csdn.net/so/search?q=JVM&spm=1001.2101.3001.7020) 参数\n\n| 含义                                                         | 参数                                                         |\n| ------------------------------------------------------------ | :----------------------------------------------------------- |\n| 堆初始大小<br />必须是1024倍数且大于1MB                      | -Xms                                                         |\n| 堆最大大小<br />必须是1024倍数且大于1MB                      | -Xmx 或 -XX:MaxHeapSize=size                                 |\n| 新生代大小                                                   | -Xmn 或 (-XX:NewSize=size + -XX:MaxNewSize=size )            |\n| 幸存区比例（动态）                                           | -XX:InitialSurvivorRatio=ratio 和 -XX:+UseAdaptiveSizePolicy |\n| 伊甸园区和幸存区的比例，默认8，新生代1G，<br />伊甸园区800MB,S0和S1各100MB | -XX:SurvivorRatio=ratio                                      |\n| 晋升阈值                                                     | -XX:MaxTenuringThreshold=threshold                           |\n| 晋升详情                                                     | -XX:+PrintTenuringDistribution                               |\n| 打印GC日志                                                   | -XX:+PrintGCDetails -verbose:gc                              |\n| FullGC 前 MinorGC                                            | -XX:+ScavengeBeforeFullGC                                    |\n\n## 垃圾回收器\n\n为什么分代GC算法要把堆分成年轻代和老年代？首先我们要知道堆内存中对象的特性：\n\n- 系统中的大部分对象，都是创建出来之后很快就不再使用可以被回收，比如用户获取订单数据，订单数据返回给用户之后就可以释放了。\n- 老年代中会存放长期存活的对象，比如Spring的大部分bean对象，在程序启动之后就不会被回收了。\n- 在虚拟机的默认设置中，新生代大小要远小于老年代的大小。\n\n\n\n分代GC算法将堆分成年轻代和老年代主要原因有：\n\n1. 可以通过调整年轻代和老年代的比例来适应不同类型的应用程序，提高内存的利用率和性能。\n\n2. 新生代和老年代使用不同的垃圾回收算法，新生代一般选择复制算法，老年代可以选择标记-清除和标记-整理算法，由程序员来选择灵活度较高。\n\n3. 分代的设计中允许只回收新生代（minor gc），如果能满足对象分配的要求就不需要对整个堆进行回收(full gc),STW时间就会减少。\n\n\n\n垃圾回收器是垃圾回收算法的具体实现。\n\n由于垃圾回收器分为年轻代和老年代，除了G1之外其他垃圾回收器必须成对组合进行使用。\n\n具体的关系图如下：\n\n![5aa9617f-42a0-4ae5-866c-988448fca737](JVM 基础 5 - 垃圾回收/5aa9617f-42a0-4ae5-866c-988448fca737.png)\n\n\n![image](JVM 基础 5 - 垃圾回收/image.png)\n\n\n### Serial 收集器\n\nSerial 收集器是最基本的、发展历史最悠久的收集器。是一种单线程串行回收**年轻代**的垃圾回收器，只会使用一个线程进行垃圾收集工作，使用**标记-复制算法**。  \n\n<img src=\"JVM 基础 5 - 垃圾回收/b0a87eb9-406f-4552-bf2b-f88b752f164a.png\" alt=\"b0a87eb9-406f-4552-bf2b-f88b752f164a\" style=\"zoom:80%;\" />\n\n**优点**：\n\n- 单线程、简单高效（与其他收集器的单线程相比）。对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程手机效率。收集器进行垃圾回收时，必须暂停其他所有的工作线程（ **\"Stop The World\"** ），直到它结束。\n\n **缺点**：\n\n- 多CPU下吞吐量不如其他垃圾回收器，堆如果偏大会让用户线程处于长时间的等待。\n\n**适用场景**： \n\n- Java编写的客户端程序或者硬件配置有限的场景。\n\n> -XX:+UseSerialGC=serial + serialOld\n\n### SerialOld垃圾回收器\n\nSerialOld是Serial垃圾回收器的**老年代**版本，采用单线程串行回收。使用**标记-整理算法**。\n\n<img src=\"JVM 基础 5 - 垃圾回收/b0a87eb9-406f-4552-bf2b-f88b752f164a-1749135599396-9.png\" alt=\"b0a87eb9-406f-4552-bf2b-f88b752f164a\" style=\"zoom:80%;\" />\n\n### ParNew 收集器\n\nParNew 收集器其实就是 Serial 收集器在多CPU下的优化，使用多线程进行垃圾回收。**新生代采用标记-复制算法，老年代采用标记-整理算法。**\n\n-XX:+UseParNewGC 新生代使用ParNew回收器， 老年代使用串行回收器\n\n![parnew-garbage-collector](JVM 基础 5 - 垃圾回收/parnew-garbage-collector.png)\n\n**优点**：\n\n- 多线程、ParNew 收集器默认开启的收集线程数与CPU的数量相同，在 CPU 非常多的环境中，可以使用 -XX:ParallelGCThreads 参数来限制垃圾收集的线程数。和 Serial 收集器一样存在 Stop The World 问题。\n\n**缺点**：\n\n- 吞吐量和停顿时间不如G1，所以在JDK9之后不建议使用。\n\n**适用场景**：\n\n- JDK8及之前的版本中，与CMS老年代垃圾回收器搭配使用\n\n### CMS 收集器\n\nCMS(Concurrent Mark Sweep)，从名字中的**Mark Sweep**这两个词可以看出，CMS 收集器是一种 **标记-清除**算法实现的。 **老年代收集器**。参数：XX:+UseConcMarkSweepGC。\n\nCMS垃圾回收器关注的是系统的暂停时间，允许用户线程和垃圾回收线程在某些步骤中同时执行，减少了用户线程的等待时间。\n\n![cms-garbage-collector](JVM 基础 5 - 垃圾回收/cms-garbage-collector.png)\n\nCMS执行步骤：\n\n1.初始标记，用极短的时间标记出GC Roots能直接关联到的对象。速度很快但是**仍存在Stop The World问题**。\n\n2.并发标记,   标记所有的对象，用户线程**不需要暂停**。\n\n3.重新标记，由于并发标记阶段有些对象会发生了变化，存在错标、漏标等情况，需要重新标记。**存在Stop The World问题**。\n\n4.并发清理，清理死亡的对象，用户线程**不需要暂停**。但是清除的过程中，可能任然会有新的垃圾产生，这些垃圾就叫**浮动垃圾**，如果当用户需要存入一个很大的对象时，新生代放不下去，老年代由于浮动垃圾过多，就会**退化为 serial Old 收集器，将老年代垃圾进行标记-整理**，当然这也是很耗费时间的！\n\n> 在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。\n>\n> **CMS 垃圾回收器在 Java 9 中已经被标记为过时(deprecated)，并在 Java 14 中被移除。**\n\n**优点**：\n\n- 系统由于垃圾回收出现的停顿时间较短，用户体验好。\n\n**缺点**：\n\n- 吞吐量低: 低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。\n\n- 无法处理在并发清理过程中产生的“浮动垃圾”，不能做到完全的垃圾回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。\n- 标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。\n\n**适用场景:**\n\n-  大型的互联网系统中用户请求数据量大、频率高的场景，比如订单接口、商品接口等\n\n### Parallel Scavenge垃圾回收器\n\nParallel Scavenge是JDK8默认的**年轻代**垃圾回收器，多线程并行回收，关注的是系统的吞吐量（指 CPU 用于运行用户代码的时间占总时间的比值）。具备自动调整堆内存大小的特点。使用 **标记-复制算法**。\n\n**优点**：\n\n- 吞吐量高，可以通过一个开关参数打开 GC 自适应的调节策略(GC Ergonomics)。为了提高吞吐量，虚拟机会动态调整堆的参数。\n\n  >**GC自适应调节策略**：Parallel Scavenge收集器可设置-XX:+UseAdptiveSizePolicy参数。当开关打开时**不需要**手动指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:SurvivorRation）、晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等，虚拟机会根据系统的运行状况收集性能监控信息，动态设置这些参数以提供最优的停顿时间和最高的吞吐量，这种调节方式称为GC的自适应调节策略。\n\n**缺点**：\n\n- 不能保证单次的停顿时间。\n\n**适用场景**：\n\n- 后台任务，不需要与用户交互，并且容易产生大量的对象。比如：大数据的处理，大文件导出。\n\n### Parallel Old垃圾回收器\n\n**Parallel Scavenge 收集器的老年代版本**。使用多线程和**标记-整理**算法。在注重吞吐量以及 CPU 资源的场合，都可以优先考虑 Parallel Scavenge 收集器和 Parallel Old 收集器。\n\n<img src=\"JVM 基础 5 - 垃圾回收/d6ecf303-9a1b-4df8-8fce-24f07e471ead.png\" alt=\"d6ecf303-9a1b-4df8-8fce-24f07e471ead\" style=\"zoom:80%;\" />\n\n**优点**：\n\n- 并发收集，在多核CPU下效率较高\n\n**缺点**：\n\n- 暂停时间会比较长\n\n**适用场景**：\n\n- 与Parallel Scavenge配套使用\n\n### G1垃圾回收器\n\nJDK9之后默认的垃圾回收器是G1（Garbage First）垃圾回收器。Parallel Scavenge关注吞吐量，允许用户设置最大暂停时间 ，但是会减少年轻代可用空间的大小。CMS关注暂停时间，但是吞吐量方面会下降。\n\n而G1设计目标就是将上述两种垃圾回收器的优点融合：\n\n1.支持巨大的堆空间回收，并有较高的吞吐量。\n\n2.支持多CPU并行垃圾回收。\n\n3.允许用户设置最大暂停时间。\n\nG1出现之前的垃圾回收器，年轻代和老年代一般是连续的，如下图：\n\n<img src=\"JVM 基础 5 - 垃圾回收/1dee5f2a-4608-4a2c-9df4-42697b1b8c50.png\" alt=\"1dee5f2a-4608-4a2c-9df4-42697b1b8c50\" style=\"zoom:80%;\" />\n\nG1的整个堆会被划分成多个大小相等的区域，称之为区Region，区域不要求是连续的。每个 Region 逻辑上可属于 Eden、Survivor、Old或 Humongous（存储大于 Region 一半大小的对象）。Region的大小通过堆空间大小/2048计算得到，也可以通过参数-XX:G1HeapRegionSize=32m指定(其中32m指定region大小为32M)，Region size必须是2的指数幂，取值范围从1M到32M。\n\n\n<img src=\"JVM 基础 5 - 垃圾回收/69b18970-293e-462d-91d8-fe8100105b44.png\" alt=\"69b18970-293e-462d-91d8-fe8100105b44\" style=\"zoom:80%;\" />\n\n#### G1 执行流程\n\n##### 1. Young GC（新生代回收）\n\n年轻代回收（Young GC），回收Eden区和Survivor区中不用的对象。会导致STW，G1中可以通过参数\n` -XX:MaxGCPauseMillis=n（默认200）`设置每次垃圾回收时的最大暂停时间毫秒数，G1垃圾回收器会尽可能地保证暂停时间。\n\n- **触发条件**：\n\n  Eden 区占满，或 G1 预测回收时间接近目标停顿时间。\n\n- **步骤**：\n\n  1. 新创建的对象会存放在Eden区。当G1判断年轻代区不足（max默认60%），无法分配对象时需要回收时会执行Young GC。\n  2. 标记出Eden和Survivor区域中的存活对象。\n  3. 根据配置的最大暂停时间选择某些区域将存活对象复制到一个新的Survivor区中（年龄+1），清空这些区域。\n  > G1在进行Young GC的过程中会去记录每次垃圾回收时每个Eden区和Survivor区的平均耗时，以作为下次回收时的参考依据。这样就可以根据配置的最大暂停时间计算出本次回收时最多能回收多少个Region区域了。\n  比如 -XX:MaxGCPauseMillis=n（默认200），每个Region回收耗时40ms，那么这次回收最多只能回收4个Region。\n  4. 后续Young GC时与之前相同，只不过Survivor区中存活对象会被搬运到另一个Survivor区。\n\n  5. 当某个在Survivor区存活对象的年龄到达阈值（默认15），将被放入老年代。\n\n  6. 部分对象如果大小超过Region的一半，会直接放入老年代，这类老年代被称为Humongous区。比如堆内存是4G，每个Region是2M，只要一个大对象超过了1M就被放入Humongous区，如果对象过大会横跨多个Region。\n\n  7. 多次回收之后，会出现很多Old老年代区，此时总堆占有率达到阈值时\n  （-XX:InitiatingHeapOccupancyPercent默认45%）会触发混合回收MixedGC。回收所有年轻代和部分老年代的对象以及大对象区。采用复制算法来完成。\n\n##### 2. Mixed GC（混合回收，核心流程）\n\n- **触发条件**：\n\n  老年代占用达 45%（默认）或手动触发。G1对老年代的清理会选择存活度最低的区域来进行回收，这样可以保证回收效率最高，这也是G1（Garbage first）名称的由来。最后清理阶段使用复制算法，不会产生内存碎片。\n  \n- **步骤**：\n\n  - **初始标记（STW）**：采用三色标记法标记从GC Root可直达的对象。 STW时间极短。\n  - **并发标记（并行）**：递归标记所有存活对象，使用 SATB（快照）记录引用变化，避免漏标。\n  - **最终标记（STW）**：处理并发标记期间的引用变更，修复漏标。\n  - 筛选回收（STW）：\n    - 按 “回收收益” 排序 Region，选择回收集合（CSet）。\n    - 复制存活对象到新 Region，清空原 Region。\n  \n  ![output](JVM 基础 5 - 垃圾回收/output.png)\n\n注意：如果清理过程中发现没有足够的空Region存放转移的对象，会出现Full GC。单线程执行标记-整理算法，此时会导致用户线程的暂停。所以尽量保证应该用的堆内存有一定多余的空间。\n\n##### 3. Full GC\n\n- **触发条件**：\n\n  + G1 在老年代内存不足时（老年代所占内存超过阈值）。\n  + 如果垃圾产生速度慢于垃圾回收速度，不会触发 Full GC，还是并发地进行清理\n  + 如果垃圾产生速度快于垃圾回收速度，便会触发 Full GC，然后退化成 serial Old 收集器串行的收集，就会导致停顿的时候长。\n\n- **特点**：\n\n单线程全堆扫描，停顿时间极长，需通过调优避免\n\n\n**学习文献**\n- https://blog.csdn.net/weixin_50280576/article/details/113775575\n- https://lisxpq12rl7.feishu.cn/wiki/F2AFw0doOiW89Fkr8kGcCTyVnLh\n- https://pdai.tech/md/java/jvm/java-jvm-x-overview.html\n- https://javaguide.cn/java/jvm/jvm-garbage-collection.html\n- https://javabetter.cn/jvm/jit.html","tags":["Java进阶 学习笔记"],"categories":["JAVA","JVM"]},{"title":"JVM 基础 4 - JVM 内存结构'","url":"/2025/05/24/Java/JVM/JVM 基础 4 - JVM 内存结构/","content":"\n# 运行时数据区\n\nJava虚拟机在运行Java程序过程中管理的内存区域，称之为运行时数据区。《Java虚拟机规范》中规定了每一部分的作用。\n\n![e782a738bf27dfc22e47285c8cfd5be3](JVM 基础 4 - JVM 内存结构/e782a738bf27dfc22e47285c8cfd5be3.png)\n\n根据 Java 虚拟机规范的规定，运行时数据区可以分为以下几个部分：\n\n- 程序计数器（Program Counter Register）\n- Java 虚拟机栈（Java Virtual Machine Stacks）\n- 本地方法栈（Native Method Stack）\n- 堆（Heap）\n- 方法区（Method Area）\n\n![18f34e09-2838-424c-98f5-dd9c41f8517b](JVM 基础 4 - JVM 内存结构/18f34e09-2838-424c-98f5-dd9c41f8517b.png)\n\n## 程序计数器\n\n### 定义|作用\n\n程序计数器（Program Counter Register）也叫PC寄存器，用来存储指向下一条指令的地址，即将要执行的指令代码。由执行引擎读取下一条指令。\n\n当我们的java程序被编译成二进制字节码文件后，如下图：\n\n![85fa1da09415ec365136f3041a0015d3](JVM 基础 4 - JVM 内存结构/85fa1da09415ec365136f3041a0015d3.png)\n\n右面，是我们写的代码，左面是二进制字节码形式（.class）\n\n它们将由我们的解释器来将他们转换为机械码，从而让机器运行。\n\n细心的你会发现，每个二进制字节码的前面都有一个类似于索引的数字。他们的作用也跟索引差不多，为当前程序标一个序号，记上他们的地址。\n\n即使有了地址，解释器也不知道他们的顺序是什么样的，他只负责运行。\n\n于是，便有了程序计数器，程序计数器记下了字节码运行的顺序，每当一行字节码走完，他就会立即告诉解释器下一个该走哪里。\n\n双双配合，最终实现全部代码。\n\n这就是程序计数器的作用，不断为解释器寻找下一个要执行的程序。\n### 特点\n\n- **它是唯一一个在 JVM 规范中没有规定任何 `OutOfMemoryError` 情况的区域**\n\n  > 内存溢出（ `OutOfMemoryError` ）指的是程序在使用某一块内存区域时，存放的数据需要占用的内存大小超过了虚拟机能提供的内存上限。\n\n- 它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域\n- 在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期一致\n- 任何时间一个线程都只有一个方法在执行，也就是所谓的**当前方法**。如果当前线程正在执行的是 Java 方法，程序计数器记录的是 JVM 字节码指令地址，如果是执行 native 方法，则是未指定值（undefined）\n- 它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成\n- 字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令\n\n## Java虚拟机栈\n\n### 定义|作用\n\nJava虚拟机栈（Java Virtual Machine Stack）采用栈的数据结构来管理方法调用中的基本数据，先进后出（First In Last Out）,每一个方法的调用使用一个栈帧（Stack Frame）来保存。\n\nJava虚拟机栈的栈帧（Frame）中主要包含以下内容：\n\n- 局部变量表（Local Variables）：局部变量表的作用是在运行过程中存放所有的局部变量\n- 操作数栈（Operand Stack）：操作数栈是栈帧中虚拟机在执行指令过程中用来存放临时数据的一块区域\n- 帧数据：帧数据主要包含动态链接、方法出口、异常表的引用\n  - 动态链接（Dynamic Linking）：指向运行时常量池的方法引用\n  - 方法返回地址（Return Address）：方法正常退出或异常退出的地址\n  - 异常表\n\n#### 栈帧的内部结构\n\n##### 局部变量表\n\n- 存储基本数据类型 + 对象引用 + returnAddress 类型（指向了一条字节码指令的地址，已被异常表取代）\n- 以**变量槽(Slot)**为最小单位（32位，64位数据占2个Slot）\n- 编译期确定大小，运行期不改变\n\n举个栗子：\n\n**以下代码的局部变量表中会占用几个槽？**\n\n```java\npublic void test4(int k,int m){\n    {\n        int a = 1;\n        int b = 2;\n    }\n    {\n        int c = 1;\n    }\n    int i = 0;\n    long j = 1;\n}\n```\n\n分析：\n\n>为了节省空间，局部变量表中的槽是可以复用的，一旦某个局部变量不再生效，当前槽就可以再次被使用。\n\n1. 方法执行时，实例对象`this`、`k`、`m` 会被放入局部变量表中，占用3个槽\n\n![15b22d4b-36d4-4543-907e-31d6b6a44287](JVM 基础 4 - JVM 内存结构/15b22d4b-36d4-4543-907e-31d6b6a44287.png)\n\n2. 将1的值放入局部变量表下标为3的位置上，相当于给a进行赋值。\n\n![4b453054-19d7-46dc-be14-a70bc0b69c48](JVM 基础 4 - JVM 内存结构/4b453054-19d7-46dc-be14-a70bc0b69c48.png)\n\n3. 将2放入局部变量表下标为4的位置，给b赋值为2。\n\n![b52549f2-4d18-4bf4-9cba-f3d068f5a5e2](JVM 基础 4 - JVM 内存结构/b52549f2-4d18-4bf4-9cba-f3d068f5a5e2.png)\n\n4. ab已经脱离了生效范围，所以下标为3和4的这两个位置可以复用。此时c的值1就可以放入下标为3的位置。\n\n![f22cc2f4-a5f3-4be0-bc06-e123b04df90a](JVM 基础 4 - JVM 内存结构/f22cc2f4-a5f3-4be0-bc06-e123b04df90a.png)\n\n5. 脱离c的生效范围之后，给i赋值就可以复用c的位置。\n\n![b37e5c7b-4444-4361-b3cb-4a6b1b4a3e7e](JVM 基础 4 - JVM 内存结构/b37e5c7b-4444-4361-b3cb-4a6b1b4a3e7e.png)\n\n6. 最后放入j，j是一个long类型，占用两个槽。但是可以复用b所在的位置，所以占用4和5这两个位置\n\n![69189ab8-28bf-4a49-8a70-66dd11c70824](JVM 基础 4 - JVM 内存结构/69189ab8-28bf-4a49-8a70-66dd11c70824.png)\n\n所以，局部变量表数值的长度为6。这一点在编译期间就可以确定了，运行过程中只需要在栈帧中创建长度为6的数组即可。\n\n![4be32a16-b492-43db-bde1-0b255e4113df](JVM 基础 4 - JVM 内存结构/4be32a16-b492-43db-bde1-0b255e4113df.png)\n\n##### 操作数栈\n\n- 方法执行的工作区（类似CPU寄存器）\n- 存储计算过程的中间结果\n\n举个栗子：\n\n```java\npublic int calculate() {\n    int a = 5;\n    int b = 3;\n    int c = a + b;  // 操作过程：\n                   // 1. iload_0 (压入a [将局部变量表中下标为 0 的 int 类型变量加载到操作数栈上])\n                   // 2. iload_1 (压入b [将局部变量表中下标为 1 的 int 类型变量加载到操作数栈上])\n                   // 3. iadd   (弹出两个值，相加后压回)\n                   // 4. istore_2(存储结果)\n    return c;\n}\n```\n\nps：操作数中的数据类型必须与字节码指令匹配，以上面的 iadd 指令为例，该指令只能用于整型数据的加法运算，它在执行的时候，栈顶的两个数据必须是 int 类型的，不能出现一个 long 型和一个 double 型的数据进行 iadd 命令相加的情况。\n\n\n##### 帧数据\n\n帧数据主要包含动态链接、方法返回地址、异常表的引用。\n\n##### 动态链接(Dynamic Linking)\n\n当前类的字节码指令引用了其他类的属性或者方法时，需要将符号引用（编号）转换成对应的运行时常量池中的内存地址。动态链接就保存了编号到运行时常量池的内存地址的映射关系。\n\n- 指向运行时常量池的方法引用\n- 支持**多态**特性（后期绑定）\n\n##### 方法返回地址(Return Address)\n\n方法出口指的是方法在正确或者异常结束时，当前栈帧会被弹出，同时程序计数器应该指向上一个栈帧中的下一条指令的地址。所以在当前栈帧中，需要存储此方法出口的地址。\n\n- 存储调用者的程序计数器值\n- 包含正常返回和异常返回两种路径\n\n##### 异常表\n\n异常表存放的是代码中异常的处理信息，包含了异常捕获的生效范围以及异常发生后跳转到的字节码指令位置。\n\n### 栈内存异常\n\n#### StackOverflowError\n\n- 原因：栈深度超过虚拟机限制（通常由无限递归引起）\n\n  ```java\n  // 典型示例：无限递归\n  public void infiniteRecursion() {\n      infiniteRecursion();\n  }\n  ```\n\n  调节栈大小\n\n  ```java\n  -Xss256k\n  -XX:ThreadStackSize=1024\n  \n  Windows（64位）下的JDK8测试最小值为180k，最大值为1024m。\n  ```\n\n#### OutOfMemoryError\n\n- 原因：线程创建过多导致栈空间耗尽\n- 场景：大量线程并发执行（通常需数千线程）\n\n\n\n## 本地方法栈\n\nJava虚拟机栈存储了Java方法调用时的栈帧，而本地方法栈存储的是native本地方法的栈帧。\n\n在Hotspot虚拟机中，Java虚拟机栈和本地方法栈实现上使用了同一个栈空间。本地方法栈会在栈内存上生成一个栈帧，临时保存方法的参数同时方便出现异常时也把本地方法的栈信息打印出来。\n\n![cab6d605-5f1f-4b75-9f43-e79cc09fa418](JVM 基础 4 - JVM 内存结构/cab6d605-5f1f-4b75-9f43-e79cc09fa418.png)\n\n\n\n## 堆\n\n对于大多数应用，Java 堆是 Java 虚拟机管理的内存中最大的一块，被所有线程共享。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数据都在这里分配内存。\n\n为了进行高效的垃圾回收，虚拟机把堆内存**逻辑上**划分成三块区域（分代的唯一理由就是优化 GC 性能）：\n\n- 新生带（年轻代）：新对象和没达到一定年龄的对象都在新生代\n- 老年代（养老区）：被长时间使用的对象，老年代的内存空间应该要比年轻代更大\n- 元空间（JDK1.8 之前叫永久代）：像一些方法中的操作临时对象等，JDK1.8 之前是占用 JVM 内存，JDK1.8 之后直接使用物理内存\n\n### 堆内存溢出\n\n- **`java.lang.OutOfMemoryError: GC Overhead Limit Exceeded`**：当 JVM 花太多时间执行垃圾回收并且只能回收很少的堆空间时，就会发生此错误。\n- **`java.lang.OutOfMemoryError: Java heap space`** :假如在创建新的对象时, 堆内存中的空间不足以存放新创建的对象, 就会引发此错误。和本机的物理内存无关，和我们配置的虚拟机内存大小有关！\n\n### 设置堆的大小\n\n要修改堆的大小，可以使用虚拟机参数 –Xmx（max最大值）和-Xms (初始的total)。\n\n语法：`-Xmx值 -Xms值`\n\n单位：字节（默认，必须是 1024 的倍数）、k或者K(KB)、m或者M(MB)、g或者G(GB)\n\n限制：Xmx必须大于 2 MB，Xms必须大于1MB\n\n### 堆内存诊断\n\n1. jps 工具\n   查看当前系统中有哪些 java 进程\n2. jmap 工具\n   查看堆内存占用情况 jmap - heap 进程id\n3. jconsole 工具\n   图形界面的，多功能的监测工具，可以连续监测\n4. jvisualvm 工具\n\n## 方法区\n\n方法区属于是 JVM 运行时数据区域的一块逻辑区域，是各个线程共享的内存区域。在不同的 JDK 版本上有着不同的实现。在 JDK 7 的时候，方法区被称为永久代（PermGen），而在 JDK 8 的时候，永久代被彻底移除，取而代之的是元空间。\n\n它的结构如下：\n\n![1bbb6bc24fb9d90d79a3ae5d8d656dbc](JVM 基础 4 - JVM 内存结构/1bbb6bc24fb9d90d79a3ae5d8d656dbc.png)\n\n### 方法区内存溢出\n1. JDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小。\n\n   - ` -XX:PermSize=N ` //方法区 (永久代) 初始大小\n\n   - ` -XX:MaxPermSize=N ` //方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen\n\n2. JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是本地内存。\n   - ` -XX:MetaspaceSize=N ` //设置 Metaspace 的初始（和最小大小）\n   - ` -XX:MaxMetaspaceSize=N ` //设置 Metaspace 的最大大小\n\n### 运行时常量池\n\n#### 常量池\n\n就是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量信息。存在`.class` 文件中的 `Constant_Pool` 表。\n\n举个栗子：\n\n```java\npublic class Test {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n\n}\n```\n\n然后使用 javap -v Test.class 命令反编译查看结果。\n\n![4dcb07eed7d6503f730bf641484f6343](JVM 基础 4 - JVM 内存结构/4dcb07eed7d6503f730bf641484f6343.png)\n\n\n#### 运行时常量池\n\n1. **类加载时创建**：JVM 加载类时，将 `.class` 文件的常量池**转换后**放入方法区\n2. **动态性**：运行时可以添加新常量（如 `String.intern()`）\n3. **真实地址**：将符号引用解析为直接引用（内存真实地址）\n\n**动态添加栗子**：\n\n```java\nString s1 = new String(\"Hello\");  // 堆中创建对象\nString s2 = s1.intern();           // 将\"Hello\"添加到运行时常量池\n\nSystem.out.println(s1 == s2);       // false（不同对象）\nSystem.out.println(\"Hello\" == s2);  // true（指向常量池同一对象）\n```\n\n#### 常量池 vs 运行时常量池\n\n| **特性**         | **常量池 (Constant Pool)** | **运行时常量池 (Runtime Constant Pool)** |\n| :--------------- | :------------------------- | :--------------------------------------- |\n| **存在位置**     | `.class` 文件中            | JVM 方法区中（JDK8+ 的元空间）           |\n| **创建时机**     | 编译期生成                 | 类加载时创建                             |\n| **内容是否可变** | 静态不可变                 | 动态可变（运行时添加新常量）             |\n| **存储内容**     | 符号引用 + 字面量          | 类加载后的真实引用 + 动态常量            |\n| **生命周期**     | 文件存在即存在             | 类卸载时销毁                             |\n\n### 字符串常量池\n\n**字符串常量池** 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。\n\n#### 特点\n\n- 常量池中的字符串仅是符号，只有在被用到时才会转化为对象\n- 利用字符串常量池的机制，来避免重复创建字符串对象\n- 字符串变量拼接的原理是StringBuilder\n- 字符串常量拼接的原理是编译器优化\n- 可以使用` intern `方法，主动将串池中还没有的字符串对象放入串池中\n\n#### 存放位置\n\n| **JDK版本** | **字符串常量池位置**      | **影响**                        |\n| :---------- | :------------------------ | :------------------------------ |\n| JDK ≤ 6     | 运行时常量池（永久代）    | 容易引发 PermGen OOM            |\n| JDK 7+      | **堆内存** 中单独划分区域 | 减少 OOM 风险，支持更大字符串池 |\n\n#### 字符串创建流程：\n\n```mermaid\ngraph TD\n    A[\"new String 'hello'\"] --> B{\"池中是否存在？\"}\n    B -->|否| C[\"在堆创建新对象\"]\n    B -->|是| D[\"返回池中引用\"]\n    C --> E{\"调用 intern?\"}\n    E -->|是| F[\"将引用加入字符串池\"]\n    E -->|否| G[\"直接使用堆对象\"]\n```\n\n\n#### **intern方法**\n\n1. JDK1.8\n\n   调用字符串对象的intern()方法，会将该字符串对象尝试放入到串池中。\n\n   - 如果串池中没有该字符串对象，则放入成功，返回引用的对象\n   - 如果有该字符串对象，则放入失败,返回字符串里有的该对象\n\n   无论放入是否成功，都会返回**串池中**的字符串对象。\n\n   **注意**：此时如果调用intern方法成功，堆内存与串池中的字符串对象是同一个对象；如果失败，则不是同一个对象\n\n2. JDK1.6\n\n   调用字符串对象的intern方法，会将该字符串对象尝试放入到串池中\n\n   - 如果串池中没有该字符串对象，会将该字符串对象复制一份，再放入到串池中，返回的是复制的对象\n   - 如果有该字符串对象，则放入失败，返回串池原有的该字符串的对象\n\n   **注意**：此时无论调用intern方法成功与否，串池中的字符串对象和堆内存中的字符串对象**都不是同一个对象**\n\n#### 字符串常量池和运行时常量池有什么关系？\n\n早期设计时，字符串常量池是属于运行时常量池的一部分，他们存储的位置也是一致的。后续做出了调整，将字符串常量池和运行时常量池做了拆分。\n\n![fdd4cecc-6c0e-4e49-afb8-45012c3f879d](JVM 基础 4 - JVM 内存结构/fdd4cecc-6c0e-4e49-afb8-45012c3f879d.png)\n\n#### 静态变量存储在哪里呢？\n\n- JDK6及之前的版本中，静态变量是存放在方法区中的，也就是永久代。\n- JDK7及之后的版本中，静态变量是存放在堆中的Class对象中，脱离了永久代。具体源码可参考虚拟机源码：BytecodeInterpreter针对putstatic指令的处理。\n\n![未标题-1](JVM 基础 4 - JVM 内存结构/未标题-1.png)\n\n## 直接内存\n\n直接内存指的就是Direct Memory，常见于Nio操作，区别于io，在读写操作时有着更高的效率。直接内存并不在《Java虚拟机规范》中存在，所以并不属于Java运行时的内存区域。\n\n### 特点：\n\n- 常见于 NIO 操作时，用于数据缓冲区\n- 分配回收成本较高，但读写性能高\n- 不受 JVM 内存回收管理\n\n![e5e1f8d834697093bf0c1965068cfdc2](JVM 基础 4 - JVM 内存结构/e5e1f8d834697093bf0c1965068cfdc2.png)\n\n![0fcb18813ed51f21736d85414b7cb9da](JVM 基础 4 - JVM 内存结构/0fcb18813ed51f21736d85414b7cb9da.png)\n\n![4688c422177bc99f72deb2cb3e44f8e8](JVM 基础 4 - JVM 内存结构/4688c422177bc99f72deb2cb3e44f8e8.png)\n\n**学习文献**\n- https://blog.csdn.net/weixin_50280576/article/details/113775575\n- https://lisxpq12rl7.feishu.cn/wiki/F2AFw0doOiW89Fkr8kGcCTyVnLh\n- https://pdai.tech/md/java/jvm/java-jvm-x-overview.html\n- https://javaguide.cn/java/jvm/jvm-garbage-collection.html\n- https://javabetter.cn/jvm/jit.html","tags":["Java进阶 学习笔记"],"categories":["JAVA","JVM"]},{"title":"JVM 基础 3 - Java 类加载机制","url":"/2025/05/23/Java/JVM/JVM 基础 3 - Java 类加载机制/","content":"# Java 类加载机制\n\n## 类的生命周期\n\n类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：加载、验证、准备、解析、初始化、使用和卸载。其中，验证、准备和解析这三个阶段可以统称为链接。\n\n![e4d69576-bfa3-4124-8bce-e122ab2921ed-1748857549789-13](JVM 基础 3 - Java 类加载机制/e4d69576-bfa3-4124-8bce-e122ab2921ed-1748857549789-13.png)\n\n### 加载（Loading）\n\n1. 类加载器根据类的全限定名通过不同的渠道以二进制流的方式获取字节码信息，程序员可以使用Java代码拓展的不同的渠道。\n    - 从本地磁盘上获取文件\n    - 运行时通过动态代理生成，比如Spring框架\n    - Applet技术通过网络获取字节码文件\n\n2. 类加载器在加载完类之后，Java虚拟机会将字节码中的信息保存到方法区中，方法区中生成一个InstanceKlass对象，保存类的所有信息，里边还包含实现特定功能比如多态的信息。\n\n    ![image-1748857581373-18](JVM 基础 3 - Java 类加载机制/image-1748857581373-18.png)\n\n3. Java虚拟机同时会在堆上生成与方法区中数据类似的java.lang.Class对象，作用是在Java代码中去获取类的信息以及存储静态字段的数据（JDK8及之后）。\n\n    ![4c9d80c9-9bb3-4177-9d05-aa1f405f2e14-1748857604903-22](JVM 基础 3 - Java 类加载机制/4c9d80c9-9bb3-4177-9d05-aa1f405f2e14-1748857604903-22.png)\n\n### 链接（Linking）\n\n链接阶段将加载的类准备好以供JVM使用，分为以下三个子阶段：\n\n#### 验证（Verification）\n\n此阶段会对字节码进行校验，确保其符合 Java 虚拟机规范，不会危害虚拟机的安全。验证过程包括：\n- 文件格式验证：检查类文件的魔数（是否以0xCAFEBABE开头）、版本等基本结构。\n- 元数据验证：检查类的内部结构，如字段、方法的描述符。\n- 字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。\n- 符号引用验证: 确保解析动作能正确执行。\n\n#### 准备（Preparation）\n\n准备阶段主要为类的静态变量分配内存，并设置其初始值（默认值）。注意一下几点：\n- static 变量分配空间和赋值是两个步骤，**分配空间**在**准备**阶段完成，**赋值**在**初始化**阶段完成。\n- 这里所设置的初始值通常情况下是数据类型默认的零值(如0、0L、null、false等)。\n- 如果 static 变量是 ﬁnal 的基本类型，以及字符串常量，那么编译阶段值就确定了，**赋值**在**准备**阶段完成\n- 如果 static 变量是 ﬁnal 的，但属于引用类型，那么**赋值**也会在**初始化**阶段完成\n\n#### 解析（Resolution）\n\n解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。\n\n### 初始化(Initialization)\n\n初始化阶段是类加载过程的最后一步，主要任务是执行类构造器<c1init>()方法，该方法由编译器自动生成，用于初始化类的静态变量和执行静态块。初始化阶段包括：\n- 执行静态变量的初始化赋值。\n- 执行静态代码块。\n\n**类的初始化的懒惰的**\n\n1. 以下情况会初始化\n    - main 方法所在的类，总会被首先初始化\n    - 首次访问这个类的静态变量或静态方法时\n    - 子类初始化，如果父类还没初始化，会引发\n    - 子类访问父类的静态变量，只会触发父类的初始化\n    - 反射(如Class.forName)\n    - 创建类的实例，也就是new的方式\n\n2. 以下情况不会初始化\n    - 访问类的 static ﬁnal 静态常量（基本类型和字符串）\n    - 类对象.class 不会触发初始化\n    - 创建该类对象的数组\n    - 类加载器的.loadClass方法\n    - Class.forNamed的参数2为false时\n\n> 对上述准则的验证（注释下逐个验证）\n\n```java\npublic class Load2 {\n    public static void main(String[] args) {\n        // 不能初始化，final在准备阶段就已经赋值了\n        System.out.println(E.a);\n        // 不能初始化，final在准备阶段就已经赋值了\n        System.out.println(E.b);\n        // 会导致 E 类初始化，因为 Integer 是包装类\n        System.out.println(E.c);\n    }\n}\n\nclass E {\n    public static final int a = 10;\n    public static final String b = \"hello\";\n    public static final Integer c = 20;\n\n    static {\n        System.out.println(\"E cinit\");\n    }\n}\n\n```\n\n```java\npublic class Load3 {\n    static {\n        //在main类前面的静态代码块会优先初始化\n        System.out.println(\"main init\");\n    }\n\n    public static void main(String[] args) throws ClassNotFoundException {\n        // 1. 静态常量（基本类型和字符串）不会触发初始化\n        System.out.println(B.b);\n        // 2. 类对象.class 不会触发初始化\n        System.out.println(B.class);\n        // 3. 创建该类的数组不会触发初始化\n        System.out.println(new B[0]);\n        // 4. 不会初始化类 B，但会加载 B、A\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        cl.loadClass(\"cn.itcast.jvm.t3.B\");\n        // 5. 不会初始化类 B，但会加载 B、A\n        ClassLoader c2 = Thread.currentThread().getContextClassLoader();\n        Class.forName(\"cn.itcast.jvm.t3.B\", false, c2);\n\n        // 1. 首次访问这个类的静态变量或静态方法时\n        System.out.println(A.a);\n        // 2. 子类初始化，如果父类还没初始化，会引发父类的初始化\n        System.out.println(B.c);\n        // 3. 子类访问父类静态变量，只触发父类初始化\n        System.out.println(B.a);\n        // 4. 会初始化类 B，并先初始化类 A\n        Class.forName(\"cn.itcast.jvm.t3.B\");\n    }\n}\n\nclass A {\n    static int a = 0;\n\n    static {\n        System.out.println(\"a init\");\n    }\n}\n\nclass B extends A {\n    final static double b = 5.0;\n    static boolean c = false;\n\n    static {\n        System.out.println(\"b init\");\n    }\n}\n```\n\n### 使用\n\n类访问方法区内的数据结构的接口， 对象是Heap区的数据。\n\n### 卸载\nJava虚拟机将结束生命周期的几种情况：\n- 执行了`System.exit()`方法\n- 程序正常执行结束\n- 程序在执行过程中遇到了异常或错误而异常终止\n- 由于操作系统出现错误而导致Java虚拟机进程终止\n\n## 类加载器\n类加载器从 JDK 1.0 就出现了，最初只是为了满足 Java Applet（已经被淘汰） 的需要。后来，慢慢成为 Java 程序中的一个重要组成部分，赋予了 Java 类可以被动态加载到 JVM 中并执行的能力。\n\n根据官方 API 文档的介绍:\n - 类加载器是一个负责加载类的对象，用于实现类加载过程中的加载这一步。\n - 每个 Java 类都有一个引用指向加载它的 `ClassLoader`。\n - 数组类不是通过 `ClassLoader` 创建的（数组类没有对应的二进制字节流），是由 JVM 直接生成的。\n\n简单来说，类加载器的主要作用就是动态加载 Java 类的字节码（ .class 文件）到 JVM 中（在内存中生成一个代表该类的 `Class` 对象）。\n\n**加载规则**\n1. 动态加载机制\n    - 按需加载：Java 类在首次使用时才会被加载（如通过new实例化、调用静态方法 / 字段等）。\n    - 运行时加载：类加载过程在程序运行期间完成，而非编译时。\n2. 类的唯一性\n    - 类的唯一性由 类加载器 + 类的全限定名（如java.lang.String） 共同确定。不同类加载器加载的同名类被视为不同的类。\n\n### 类加载器类型\n\n\n\n|                 **名称**                  | **加载的类**                                                 | **说明**                                                     |\n| :---------------------------------------: | ------------------------------------------------------------ | ------------------------------------------------------------ |\n|   Bootstrap ClassLoader（启动类加载器）   | %JAVA_HOME%/lib目录下的 rt.jar、resources.jar、charsets.jar等 jar 包和类 | 由 JVM 底层（C++）实现，Java 代码中无法直接引用。            |\n|    Extension ClassLoader(拓展类加载器)    | JAVA_HOME/jre/lib/ext                                        | 由`sun.misc.Launcher$ExtClassLoader`实现。                   |\n| Application ClassLoader(应用程序类加载器) | 当前应用 classpath 下的所有 jar 包和类                       | 由`sun.misc.Launcher$AppClassLoader`实现，是`ClassLoader`类的默认加载器。 |\n|              自定义类加载器               | 自定义                                                       | 继承`java.lang.ClassLoader`并重写关键方法（如`findClass()`）。 |\n\n#### 寻找类加载器\n\n每个 `ClassLoader` 可以通过`getParent()`获取其父 `ClassLoader`，如果获取到 `ClassLoader` 为null的话，那么该类是通过 `BootstrapClassLoader` 加载的。\n\n寻找类加载器例子如下:\n\n```java\n public class ClassLoaderTest {\n    public static void main(String[] args) {\n        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n        System.out.println(loader);\n        System.out.println(loader.getParent());\n        System.out.println(loader.getParent().getParent());\n    }\n}   \n```\n\n结果如下:\n\n```java\nsun.misc.Launcher$AppClassLoader@18b4aac2\nsun.misc.Launcher$ExtClassLoader@1b6d3586\nnull\n```\n\n从上面的结果可以看出，并没有获取到`ExtClassLoader`的父Loader，原因是`BootstrapLoader`(引导类加载器)是由 C++ 实现，由于这个 C++ 实现的类加载器在 Java 中是没有与之对应的类的，所以拿到的结果是 null。\n\n### **双亲委派模型**\nJava采用了双亲委派模型来组织类加载器的层次结构。具体来说，当一个类加载器接收到类加载请求时，它会首先将请求委派给父类加载器处理，只有在父类加载器无法完成加载时，子类加载器才会尝试自己加载。这种机制确保了Java核心类库的安全性和一致性，避免了类的重复加载和命名冲突。\n\n#### 双亲委派机制过程\n> 1. 当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。 \n> 2. 当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。\n> 3. 如果BootStrapClassLoader加载失败(例如在$JAVA_HOME/jre/lib里未查找到该class)，会使用ExtClassLoader来尝试加载。\n> 4. 若ExtClassLoader也加载失败，则会使用AppClassLoader来加载，如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。\n\n#### loadClass源码解析：\n\n```java\nprotected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // First, check if the class has already been loaded\n            //首先，检查类是否已经加载\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {\n                //说明该类没有被加载过\n                long t0 = System.nanoTime();\n                try {\n                    //判断父类是否为空\n                    if (parent != null) {\n                        //当父类的加载器不为空，则通过父类的loadClass来加载该类\n                        c = parent.loadClass(name, false);\n                    } else {\n                        //当父类的加载器为空，则调用启动类加载器来加载该类\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                    // ClassNotFoundException thrown if class not found\n                    // from the non-null parent class loader\n                    // 捕获异常但不处理，表示父类加载失败\n                }\n\n                if (c == null) {\n                    long t1 = System.nanoTime();\n                    //如果仍未找到，则调用 findClass 以查找该类。\n                     //用户可通过覆写该方法，来自定义类加载器\n                    c = findClass(name);\n\n                    // this is the defining class loader; record the stats\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n```\n\n#### 自定义类加载器\n\n##### 使用场景\n\n- 想加载非 classpath 随意路径中的类文件\n- 通过接口来使用实现，希望解耦时，常用在框架设计\n- 这些类希望予以隔离，不同应用的同名类都可以加载，不冲突，常见于 tomcat 容器\n\n##### 步骤\n\n- 继承ClassLoader父类\n- 要遵从双亲委派机制，重写 ﬁndClass 方法\n- 不是重写loadClass方法，否则不会走双亲委派机制\n- 读取类文件的字节码\n- 调用父类的 deﬁneClass 方法来加载类\n- 使用者调用该类加载器的 loadClass 方法\n\n> ClassLoader 类有两个关键的方法：\n>   - protected Class loadClass(String name, boolean resolve)：加载指定二进制名称的类，实现了双亲委派机制 。name 为类的二进制名称，resolve 如果为 true，在加载时调用 resolveClass(Class<?> c) 方法解析该类。\n>   - protected Class findClass(String name)：根据类的二进制名称来查找类，默认实现是空方法。\n\n**学习文献**\n- https://blog.csdn.net/weixin_50280576/article/details/113775575\n- https://lisxpq12rl7.feishu.cn/wiki/F2AFw0doOiW89Fkr8kGcCTyVnLh\n- https://pdai.tech/md/java/jvm/java-jvm-x-overview.html\n- https://javaguide.cn/java/jvm/jvm-garbage-collection.html\n- https://javabetter.cn/jvm/jit.html\n","tags":["Java进阶 学习笔记"],"categories":["JAVA","JVM"]},{"title":"JVM 基础 2 - Java 类字节码","url":"/2025/05/22/Java/JVM/JVM 基础 2 - Java 类字节码/","content":"\n# Java虚拟机的组成\n\nJava虚拟机主要分为以下几个组成部分：\n\n![ff1b24b36a60a158478be47356e9b544](JVM 基础 2 - Java 类字节码/ff1b24b36a60a158478be47356e9b544.png)\n\n- ClassLoader：类加载子系统，核心组件类加载器，负责将字节码文件中的内容加载到内存中。\n- JVM内存结构：运行时数据区，JVM管理的内存，创建出来的对象、类的信息等等内容都会放在这块区域中。\n- 执行引擎：包含了即时编译器、解释器、垃圾回收器，执行引擎使用解释器将字节码指令解释成机器码，使用即时编译器优化性能，使用垃圾回收器回收不再使用的对象。\n- 本地接口：调用本地使用C/C++编译好的方法，本地方法在Java中声明时，都会带上native关键字，如下图所示。\n\n# 字节码文件的组成\n\n> 字节码文件比较难读，更加详细的请去官网<https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5>阅读。\n\n字节码文件总共可以分为以下几个部分：\n\n- **基础信息**：魔数、字节码文件对应的Java版本号、访问标识(public final等等)、父类和接口信息\n- **常量池**：保存了字符串常量、类或接口名、字段名，主要在字节码指令中使用\n- **字段：** 当前类或接口声明的字段信息\n- **方法：** 当前类或接口声明的方法信息，核心内容为方法的字节码指令\n- **属性：** 类的属性，比如源码的文件名、内部类的列表等\n\n通过 javac 类名.java 编译 java 文件后，会生成一个 .class 字节码文件！\n\n以下是字节码文件：\n\n```java\n0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09 \n0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b 07 \n0000040 00 1c 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29 \n0000060 56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e \n0000100 75 6d 62 65 72 54 61 62 6c 65 01 00 12 4c 6f 63 \n0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 01 \n0000140 00 04 74 68 69 73 01 00 1d 4c 63 6e 2f 69 74 63 \n0000160 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c 6f \n0000200 57 6f 72 6c 64 3b 01 00 04 6d 61 69 6e 01 00 16 \n0000220 28 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 \n0000240 69 6e 67 3b 29 56 01 00 04 61 72 67 73 01 00 13 \n0000260 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 \n0000300 6e 67 3b 01 00 10 4d 65 74 68 6f 64 50 61 72 61 \n0000320 6d 65 74 65 72 73 01 00 0a 53 6f 75 72 63 65 46 \n0000340 69 6c 65 01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64\n0000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d 0c 00 1e \n0000400 00 1f 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64 \n0000420 07 00 20 0c 00 21 00 22 01 00 1b 63 6e 2f 69 74 \n0000440 63 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c \n0000460 6f 57 6f 72 6c 64 01 00 10 6a 61 76 61 2f 6c 61 \n0000500 6e 67 2f 4f 62 6a 65 63 74 01 00 10 6a 61 76 61 \n0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d 01 00 03 6f \n0000540 75 74 01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72 \n0000560 69 6e 74 53 74 72 65 61 6d 3b 01 00 13 6a 61 76 \n0000600 61 2f 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d \n0000620 01 00 07 70 72 69 6e 74 6c 6e 01 00 15 28 4c 6a \n0000640 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b \n0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 00 01 \n0000700 00 07 00 08 00 01 00 09 00 00 00 2f 00 01 00 01 \n0000720 00 00 00 05 2a b7 00 01 b1 00 00 00 02 00 0a 00 \n0000740 00 00 06 00 01 00 00 00 04 00 0b 00 00 00 0c 00 \n0000760 01 00 00 00 05 00 0c 00 0d 00 00 00 09 00 0e 00 \n0001000 0f 00 02 00 09 00 00 00 37 00 02 00 01 00 00 00 \n0001020 09 b2 00 02 12 03 b6 00 04 b1 00 00 00 02 00 0a \n0001040 00 00 00 0a 00 02 00 00 00 06 00 08 00 07 00 0b \n0001060 00 00 00 0c 00 01 00 00 00 09 00 10 00 11 00 00 \n0001100 00 12 00 00 00 05 01 00 10 00 00 00 01 00 13 00 \n0001120 00 00 02 00 14\n```\n\n根据 JVM 规范，类文件结构如下：\n\n![0659457bd482ac300cf345aefb06d804](JVM 基础 2 - Java 类字节码/0659457bd482ac300cf345aefb06d804.png)\n\n### 魔数\n\n第一行中有一串特殊的字符 `cafebabe`，它就是一个魔数，是 JVM 识别 class 文件的标志，JVM 会在验证阶段检查 class 文件是否以该魔数开头，如果不是则会抛出 `ClassFormatError`。\n\n上面截图中\n\nu4 magic\n对应字节码文件的 0~3 个字节\n0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09\nca fe ba be ：意思是 .class 文件，不同的东西有不同的魔数，比如 jpg、png 图片等！\n\n### 版本\n\n紧跟着魔数后面的四个字节 00 00 00 34 分别表示副版本号和主版本号。\n\nu2 minor_version;\nu2 major_version;\n0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09\n00 00 00 34：34H（16进制） = 52（10进制），代表JDK8对应的版本号，副版本号为 0。\n\n### 常量池\n\n参考地址：· [The Java® Virtual Machine Specification (oracle.com)](https://docs.oracle.com/javase/specs/jvms/se8/html/) ·\n\n紧跟在版本号之后的是常量池，它包含了类、接口、字段和方法的符号引用，以及字符串字面量和数值常量。这些信息在编译时被创建，并在运行时被Java虚拟机（JVM）使用。\n\n![3-6-2025_096_](JVM 基础 2 - Java 类字节码/3-6-2025_096_.jpeg)\n\n**学习文献**\n- https://blog.csdn.net/weixin_50280576/article/details/113775575\n- https://lisxpq12rl7.feishu.cn/wiki/F2AFw0doOiW89Fkr8kGcCTyVnLh\n- https://pdai.tech/md/java/jvm/java-jvm-x-overview.html\n- https://javaguide.cn/java/jvm/jvm-garbage-collection.html\n- https://javabetter.cn/jvm/jit.html","tags":["Java进阶 学习笔记"],"categories":["JAVA","JVM"]},{"title":"JVM 基础 1 - JVM介绍","url":"/2025/05/21/Java/JVM/JVM 基础 1 - JVM介绍/","content":"\n# JVM\n\n## 什么是JVM\n\nJVM 全称是 Java Virtual Machine，中文译名 Java虚拟机，是 Java 生态的核心，它负责执行字节码，提供内存管理、垃圾回收、线程管理等功能，使 Java 程序能够实现 “一次编写，到处运行” 的跨平台特性。\n\n\n\n## JVM的三大核心功能是什么？\n\nJVM 包含内存管理、解释执行虚拟机指令、即时编译三大功能。\n\n\n\n## 常见的JVM虚拟机有哪些？\n\n![b9cb57a276cb062748fae32c68a67599](JVM 基础 1 - JVM介绍/b9cb57a276cb062748fae32c68a67599.png)\n\n## JVM知识体系\n\n![jvm-overview](JVM 基础 1 - JVM介绍/jvm-overview.png)\n\n**学习文献**\n- https://blog.csdn.net/weixin_50280576/article/details/113775575\n- https://lisxpq12rl7.feishu.cn/wiki/F2AFw0doOiW89Fkr8kGcCTyVnLh\n- https://pdai.tech/md/java/jvm/java-jvm-x-overview.html\n- https://javaguide.cn/java/jvm/jvm-garbage-collection.html\n- https://javabetter.cn/jvm/jit.html","tags":["Java进阶 学习笔记"],"categories":["JAVA","JVM"]}]