<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>系统升级</title>
    <url>/2025/06/04/RandomNotes/%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[SSH框架升级为SpringBoot

公司系统使用框架为SSH（Spring + Spring MVC + Hibernate)，现在要求升级为SpringBoot。  
原项目：Spring 3.1.3 + Hibernate 4.2.21 使用jar包方式  
准备升级为：SpringBoot2.7.6 +  使用mavne管理jar包
Spring Boot 2.x需要Spring 5和Hibernate 5.2+，因此我们需要升级这些依赖。


创建Spring Boot项目
使用阿里云地址 https://start.aliyun.com/ 来创建一个新的Spring Boot 项目。选择 JDK8、Maven、Spring Boot 版本2.7.6。
目录结构为：


将原项目src下的目录复制到新建的项目中。先运行一下@SpringBootApplication 类，根据报错去网站[Maven Repository: Search/Browse/Explore (mvnrepository.com)](https://mvnrepository.com/)下载依赖。

集成log4j


Spring Boot 已弃用 spring-boot-starter-log4j：
Spring Boot 从 1.2.x 版本开始，官方推荐使用 Logback 或 Log4j2，不再支持旧版的 Log4j 1.x。
因此，spring-boot-starter-log4j 在较新的 Spring Boot 版本中已被移除。






因为之前系统使用log4j，为了不用改配置和代码，确定继续使用log4j。下载好依赖后导入 pom.xml 文件中。
&lt;!--添加log4j依赖模块--&gt;&lt;dependency&gt;   &lt;groupId&gt;log4j&lt;/groupId&gt;   &lt;artifactId&gt;log4j&lt;/artifactId&gt;   &lt;version&gt;1.2.17&lt;/version&gt;&lt;/dependency&gt;


集成Hibernate 

原系统使用的 hibernate  版本 4.2.21。

导入依赖
 &lt;!-- 只需添加 JPA Starter Spring Boot 会自动引入兼容的 Hibernate 版本（无需手动指定）--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;

   spring-boot-starter-data-jpa 已集成 Hibernate 核心依赖，无需单独引入 hibernate-core 等包。  

配置文件

   以前需要在application-context.xml 文件中配置
   .gubyryiiscnk{zoom:80%;}

   现在只需要在application.yaml 文件中配置即可。
​	

前端代码移植



原系统使用JSP，需要将原项目WebContent 目录下的文件复制到，webapp 目录下。
配置视图解析器

mvc:   view:     prefix: /WEB-INF/jsp/ #配置视图解析器     suffix: .jsp web:   resources:     static-locations: classpath:/static/,classpath:/WEB-INF/userData/,classpath:/WEB-INF/temp/ #设置静态资源路径


引入依赖
&lt;!--SpringBoot不推荐使用jsp  加入一个处理jsp的依赖。 负责编译jsp文件--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;    &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--jstl 依赖--&gt;&lt;dependency&gt;    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;    &lt;artifactId&gt;jstl&lt;/artifactId&gt;&lt;/dependency&gt;

]]></content>
      <categories>
        <category>RandomNotes</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 基础 1 - JVM介绍</title>
    <url>/2025/05/21/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%201%20-%20JVM%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[JVM什么是JVMJVM 全称是 Java Virtual Machine，中文译名 Java虚拟机，是 Java 生态的核心，它负责执行字节码，提供内存管理、垃圾回收、线程管理等功能，使 Java 程序能够实现 “一次编写，到处运行” 的跨平台特性。
JVM的三大核心功能是什么？JVM 包含内存管理、解释执行虚拟机指令、即时编译三大功能。
常见的JVM虚拟机有哪些？
JVM知识体系
学习文献

https://blog.csdn.net/weixin_50280576/article/details/113775575
https://lisxpq12rl7.feishu.cn/wiki/F2AFw0doOiW89Fkr8kGcCTyVnLh
https://pdai.tech/md/java/jvm/java-jvm-x-overview.html
https://javaguide.cn/java/jvm/jvm-garbage-collection.html
https://javabetter.cn/jvm/jit.html

]]></content>
      <categories>
        <category>JAVA</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 基础 2 - Java 类字节码</title>
    <url>/2025/05/22/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%202%20-%20Java%20%E7%B1%BB%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    <content><![CDATA[Java虚拟机的组成Java虚拟机主要分为以下几个组成部分：


ClassLoader：类加载子系统，核心组件类加载器，负责将字节码文件中的内容加载到内存中。
JVM内存结构：运行时数据区，JVM管理的内存，创建出来的对象、类的信息等等内容都会放在这块区域中。
执行引擎：包含了即时编译器、解释器、垃圾回收器，执行引擎使用解释器将字节码指令解释成机器码，使用即时编译器优化性能，使用垃圾回收器回收不再使用的对象。
本地接口：调用本地使用C&#x2F;C++编译好的方法，本地方法在Java中声明时，都会带上native关键字，如下图所示。

字节码文件的组成
字节码文件比较难读，更加详细的请去官网https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5阅读。

字节码文件总共可以分为以下几个部分：

基础信息：魔数、字节码文件对应的Java版本号、访问标识(public final等等)、父类和接口信息
常量池：保存了字符串常量、类或接口名、字段名，主要在字节码指令中使用
字段： 当前类或接口声明的字段信息
方法： 当前类或接口声明的方法信息，核心内容为方法的字节码指令
属性： 类的属性，比如源码的文件名、内部类的列表等

通过 javac 类名.java 编译 java 文件后，会生成一个 .class 字节码文件！
以下是字节码文件：
0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09 0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b 07 0000040 00 1c 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29 0000060 56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e 0000100 75 6d 62 65 72 54 61 62 6c 65 01 00 12 4c 6f 63 0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 01 0000140 00 04 74 68 69 73 01 00 1d 4c 63 6e 2f 69 74 63 0000160 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c 6f 0000200 57 6f 72 6c 64 3b 01 00 04 6d 61 69 6e 01 00 16 0000220 28 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 0000240 69 6e 67 3b 29 56 01 00 04 61 72 67 73 01 00 13 0000260 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 0000300 6e 67 3b 01 00 10 4d 65 74 68 6f 64 50 61 72 61 0000320 6d 65 74 65 72 73 01 00 0a 53 6f 75 72 63 65 46 0000340 69 6c 65 01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 640000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d 0c 00 1e 0000400 00 1f 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64 0000420 07 00 20 0c 00 21 00 22 01 00 1b 63 6e 2f 69 74 0000440 63 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c 0000460 6f 57 6f 72 6c 64 01 00 10 6a 61 76 61 2f 6c 61 0000500 6e 67 2f 4f 62 6a 65 63 74 01 00 10 6a 61 76 61 0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d 01 00 03 6f 0000540 75 74 01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72 0000560 69 6e 74 53 74 72 65 61 6d 3b 01 00 13 6a 61 76 0000600 61 2f 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d 0000620 01 00 07 70 72 69 6e 74 6c 6e 01 00 15 28 4c 6a 0000640 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b 0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 00 01 0000700 00 07 00 08 00 01 00 09 00 00 00 2f 00 01 00 01 0000720 00 00 00 05 2a b7 00 01 b1 00 00 00 02 00 0a 00 0000740 00 00 06 00 01 00 00 00 04 00 0b 00 00 00 0c 00 0000760 01 00 00 00 05 00 0c 00 0d 00 00 00 09 00 0e 00 0001000 0f 00 02 00 09 00 00 00 37 00 02 00 01 00 00 00 0001020 09 b2 00 02 12 03 b6 00 04 b1 00 00 00 02 00 0a 0001040 00 00 00 0a 00 02 00 00 00 06 00 08 00 07 00 0b 0001060 00 00 00 0c 00 01 00 00 00 09 00 10 00 11 00 00 0001100 00 12 00 00 00 05 01 00 10 00 00 00 01 00 13 00 0001120 00 00 02 00 14

根据 JVM 规范，类文件结构如下：

魔数第一行中有一串特殊的字符 cafebabe，它就是一个魔数，是 JVM 识别 class 文件的标志，JVM 会在验证阶段检查 class 文件是否以该魔数开头，如果不是则会抛出 ClassFormatError。
上面截图中
u4 magic对应字节码文件的 0~3 个字节0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09ca fe ba be ：意思是 .class 文件，不同的东西有不同的魔数，比如 jpg、png 图片等！
版本紧跟着魔数后面的四个字节 00 00 00 34 分别表示副版本号和主版本号。
u2 minor_version;u2 major_version;0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 0900 00 00 34：34H（16进制） &#x3D; 52（10进制），代表JDK8对应的版本号，副版本号为 0。
常量池参考地址：· The Java® Virtual Machine Specification (oracle.com) ·
紧跟在版本号之后的是常量池，它包含了类、接口、字段和方法的符号引用，以及字符串字面量和数值常量。这些信息在编译时被创建，并在运行时被Java虚拟机（JVM）使用。

学习文献

https://blog.csdn.net/weixin_50280576/article/details/113775575
https://lisxpq12rl7.feishu.cn/wiki/F2AFw0doOiW89Fkr8kGcCTyVnLh
https://pdai.tech/md/java/jvm/java-jvm-x-overview.html
https://javaguide.cn/java/jvm/jvm-garbage-collection.html
https://javabetter.cn/jvm/jit.html

]]></content>
      <categories>
        <category>JAVA</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 基础 3 - Java 类加载机制</title>
    <url>/2025/05/23/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%203%20-%20Java%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[Java 类加载机制类的生命周期类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：加载、验证、准备、解析、初始化、使用和卸载。其中，验证、准备和解析这三个阶段可以统称为链接。

加载（Loading）
类加载器根据类的全限定名通过不同的渠道以二进制流的方式获取字节码信息，程序员可以使用Java代码拓展的不同的渠道。

从本地磁盘上获取文件
运行时通过动态代理生成，比如Spring框架
Applet技术通过网络获取字节码文件


类加载器在加载完类之后，Java虚拟机会将字节码中的信息保存到方法区中，方法区中生成一个InstanceKlass对象，保存类的所有信息，里边还包含实现特定功能比如多态的信息。
 

Java虚拟机同时会在堆上生成与方法区中数据类似的java.lang.Class对象，作用是在Java代码中去获取类的信息以及存储静态字段的数据（JDK8及之后）。
 


链接（Linking）链接阶段将加载的类准备好以供JVM使用，分为以下三个子阶段：
验证（Verification）此阶段会对字节码进行校验，确保其符合 Java 虚拟机规范，不会危害虚拟机的安全。验证过程包括：

文件格式验证：检查类文件的魔数（是否以0xCAFEBABE开头）、版本等基本结构。
元数据验证：检查类的内部结构，如字段、方法的描述符。
字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。
符号引用验证: 确保解析动作能正确执行。

准备（Preparation）准备阶段主要为类的静态变量分配内存，并设置其初始值（默认值）。注意一下几点：

static 变量分配空间和赋值是两个步骤，分配空间在准备阶段完成，赋值在初始化阶段完成。
这里所设置的初始值通常情况下是数据类型默认的零值(如0、0L、null、false等)。
如果 static 变量是 ﬁnal 的基本类型，以及字符串常量，那么编译阶段值就确定了，赋值在准备阶段完成
如果 static 变量是 ﬁnal 的，但属于引用类型，那么赋值也会在初始化阶段完成

解析（Resolution）解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。
初始化(Initialization)初始化阶段是类加载过程的最后一步，主要任务是执行类构造器()方法，该方法由编译器自动生成，用于初始化类的静态变量和执行静态块。初始化阶段包括：

执行静态变量的初始化赋值。
执行静态代码块。

类的初始化的懒惰的

以下情况会初始化

main 方法所在的类，总会被首先初始化
首次访问这个类的静态变量或静态方法时
子类初始化，如果父类还没初始化，会引发
子类访问父类的静态变量，只会触发父类的初始化
反射(如Class.forName)
创建类的实例，也就是new的方式


以下情况不会初始化

访问类的 static ﬁnal 静态常量（基本类型和字符串）
类对象.class 不会触发初始化
创建该类对象的数组
类加载器的.loadClass方法
Class.forNamed的参数2为false时




对上述准则的验证（注释下逐个验证）

public class Load2 &#123;    public static void main(String[] args) &#123;        // 不能初始化，final在准备阶段就已经赋值了        System.out.println(E.a);        // 不能初始化，final在准备阶段就已经赋值了        System.out.println(E.b);        // 会导致 E 类初始化，因为 Integer 是包装类        System.out.println(E.c);    &#125;&#125;class E &#123;    public static final int a = 10;    public static final String b = &quot;hello&quot;;    public static final Integer c = 20;    static &#123;        System.out.println(&quot;E cinit&quot;);    &#125;&#125;

public class Load3 &#123;    static &#123;        //在main类前面的静态代码块会优先初始化        System.out.println(&quot;main init&quot;);    &#125;    public static void main(String[] args) throws ClassNotFoundException &#123;        // 1. 静态常量（基本类型和字符串）不会触发初始化        System.out.println(B.b);        // 2. 类对象.class 不会触发初始化        System.out.println(B.class);        // 3. 创建该类的数组不会触发初始化        System.out.println(new B[0]);        // 4. 不会初始化类 B，但会加载 B、A        ClassLoader cl = Thread.currentThread().getContextClassLoader();        cl.loadClass(&quot;cn.itcast.jvm.t3.B&quot;);        // 5. 不会初始化类 B，但会加载 B、A        ClassLoader c2 = Thread.currentThread().getContextClassLoader();        Class.forName(&quot;cn.itcast.jvm.t3.B&quot;, false, c2);        // 1. 首次访问这个类的静态变量或静态方法时        System.out.println(A.a);        // 2. 子类初始化，如果父类还没初始化，会引发父类的初始化        System.out.println(B.c);        // 3. 子类访问父类静态变量，只触发父类初始化        System.out.println(B.a);        // 4. 会初始化类 B，并先初始化类 A        Class.forName(&quot;cn.itcast.jvm.t3.B&quot;);    &#125;&#125;class A &#123;    static int a = 0;    static &#123;        System.out.println(&quot;a init&quot;);    &#125;&#125;class B extends A &#123;    final static double b = 5.0;    static boolean c = false;    static &#123;        System.out.println(&quot;b init&quot;);    &#125;&#125;

使用类访问方法区内的数据结构的接口， 对象是Heap区的数据。
卸载Java虚拟机将结束生命周期的几种情况：

执行了System.exit()方法
程序正常执行结束
程序在执行过程中遇到了异常或错误而异常终止
由于操作系统出现错误而导致Java虚拟机进程终止

类加载器类加载器从 JDK 1.0 就出现了，最初只是为了满足 Java Applet（已经被淘汰） 的需要。后来，慢慢成为 Java 程序中的一个重要组成部分，赋予了 Java 类可以被动态加载到 JVM 中并执行的能力。
根据官方 API 文档的介绍:

类加载器是一个负责加载类的对象，用于实现类加载过程中的加载这一步。
每个 Java 类都有一个引用指向加载它的 ClassLoader。
数组类不是通过 ClassLoader 创建的（数组类没有对应的二进制字节流），是由 JVM 直接生成的。

简单来说，类加载器的主要作用就是动态加载 Java 类的字节码（ .class 文件）到 JVM 中（在内存中生成一个代表该类的 Class 对象）。
加载规则

动态加载机制
按需加载：Java 类在首次使用时才会被加载（如通过new实例化、调用静态方法 &#x2F; 字段等）。
运行时加载：类加载过程在程序运行期间完成，而非编译时。


类的唯一性
类的唯一性由 类加载器 + 类的全限定名（如java.lang.String） 共同确定。不同类加载器加载的同名类被视为不同的类。



类加载器类型


名称
加载的类
说明



Bootstrap ClassLoader（启动类加载器）
%JAVA_HOME%&#x2F;lib目录下的 rt.jar、resources.jar、charsets.jar等 jar 包和类
由 JVM 底层（C++）实现，Java 代码中无法直接引用。


Extension ClassLoader(拓展类加载器)
JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext
由sun.misc.Launcher$ExtClassLoader实现。


Application ClassLoader(应用程序类加载器)
当前应用 classpath 下的所有 jar 包和类
由sun.misc.Launcher$AppClassLoader实现，是ClassLoader类的默认加载器。


自定义类加载器
自定义
继承java.lang.ClassLoader并重写关键方法（如findClass()）。


寻找类加载器每个 ClassLoader 可以通过getParent()获取其父 ClassLoader，如果获取到 ClassLoader 为null的话，那么该类是通过 BootstrapClassLoader 加载的。
寻找类加载器例子如下:
 public class ClassLoaderTest &#123;    public static void main(String[] args) &#123;        ClassLoader loader = Thread.currentThread().getContextClassLoader();        System.out.println(loader);        System.out.println(loader.getParent());        System.out.println(loader.getParent().getParent());    &#125;&#125;   

结果如下:
sun.misc.Launcher$AppClassLoader@18b4aac2sun.misc.Launcher$ExtClassLoader@1b6d3586null

从上面的结果可以看出，并没有获取到ExtClassLoader的父Loader，原因是BootstrapLoader(引导类加载器)是由 C++ 实现，由于这个 C++ 实现的类加载器在 Java 中是没有与之对应的类的，所以拿到的结果是 null。
双亲委派模型Java采用了双亲委派模型来组织类加载器的层次结构。具体来说，当一个类加载器接收到类加载请求时，它会首先将请求委派给父类加载器处理，只有在父类加载器无法完成加载时，子类加载器才会尝试自己加载。这种机制确保了Java核心类库的安全性和一致性，避免了类的重复加载和命名冲突。
双亲委派机制过程

当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。 
当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。
如果BootStrapClassLoader加载失败(例如在$JAVA_HOME&#x2F;jre&#x2F;lib里未查找到该class)，会使用ExtClassLoader来尝试加载。
若ExtClassLoader也加载失败，则会使用AppClassLoader来加载，如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。


loadClass源码解析：protected Class&lt;?&gt; loadClass(String name, boolean resolve)        throws ClassNotFoundException    &#123;        synchronized (getClassLoadingLock(name)) &#123;            // First, check if the class has already been loaded            //首先，检查类是否已经加载            Class&lt;?&gt; c = findLoadedClass(name);            if (c == null) &#123;                //说明该类没有被加载过                long t0 = System.nanoTime();                try &#123;                    //判断父类是否为空                    if (parent != null) &#123;                        //当父类的加载器不为空，则通过父类的loadClass来加载该类                        c = parent.loadClass(name, false);                    &#125; else &#123;                        //当父类的加载器为空，则调用启动类加载器来加载该类                        c = findBootstrapClassOrNull(name);                    &#125;                &#125; catch (ClassNotFoundException e) &#123;                    // ClassNotFoundException thrown if class not found                    // from the non-null parent class loader                    // 捕获异常但不处理，表示父类加载失败                &#125;                if (c == null) &#123;                    long t1 = System.nanoTime();                    //如果仍未找到，则调用 findClass 以查找该类。                     //用户可通过覆写该方法，来自定义类加载器                    c = findClass(name);                    // this is the defining class loader; record the stats                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);                    sun.misc.PerfCounter.getFindClasses().increment();                &#125;            &#125;            if (resolve) &#123;                resolveClass(c);            &#125;            return c;        &#125;    &#125;

自定义类加载器使用场景
想加载非 classpath 随意路径中的类文件
通过接口来使用实现，希望解耦时，常用在框架设计
这些类希望予以隔离，不同应用的同名类都可以加载，不冲突，常见于 tomcat 容器

步骤
继承ClassLoader父类
要遵从双亲委派机制，重写 ﬁndClass 方法
不是重写loadClass方法，否则不会走双亲委派机制
读取类文件的字节码
调用父类的 deﬁneClass 方法来加载类
使用者调用该类加载器的 loadClass 方法


ClassLoader 类有两个关键的方法：

protected Class loadClass(String name, boolean resolve)：加载指定二进制名称的类，实现了双亲委派机制 。name 为类的二进制名称，resolve 如果为 true，在加载时调用 resolveClass(Class&lt;?&gt; c) 方法解析该类。
protected Class findClass(String name)：根据类的二进制名称来查找类，默认实现是空方法。


学习文献

https://blog.csdn.net/weixin_50280576/article/details/113775575
https://lisxpq12rl7.feishu.cn/wiki/F2AFw0doOiW89Fkr8kGcCTyVnLh
https://pdai.tech/md/java/jvm/java-jvm-x-overview.html
https://javaguide.cn/java/jvm/jvm-garbage-collection.html
https://javabetter.cn/jvm/jit.html

]]></content>
      <categories>
        <category>JAVA</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 基础 4 - JVM 内存结构&#39;</title>
    <url>/2025/05/24/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%204%20-%20JVM%20%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[运行时数据区Java虚拟机在运行Java程序过程中管理的内存区域，称之为运行时数据区。《Java虚拟机规范》中规定了每一部分的作用。

根据 Java 虚拟机规范的规定，运行时数据区可以分为以下几个部分：

程序计数器（Program Counter Register）
Java 虚拟机栈（Java Virtual Machine Stacks）
本地方法栈（Native Method Stack）
堆（Heap）
方法区（Method Area）


程序计数器定义|作用程序计数器（Program Counter Register）也叫PC寄存器，用来存储指向下一条指令的地址，即将要执行的指令代码。由执行引擎读取下一条指令。
当我们的java程序被编译成二进制字节码文件后，如下图：

右面，是我们写的代码，左面是二进制字节码形式（.class）
它们将由我们的解释器来将他们转换为机械码，从而让机器运行。
细心的你会发现，每个二进制字节码的前面都有一个类似于索引的数字。他们的作用也跟索引差不多，为当前程序标一个序号，记上他们的地址。
即使有了地址，解释器也不知道他们的顺序是什么样的，他只负责运行。
于是，便有了程序计数器，程序计数器记下了字节码运行的顺序，每当一行字节码走完，他就会立即告诉解释器下一个该走哪里。
双双配合，最终实现全部代码。
这就是程序计数器的作用，不断为解释器寻找下一个要执行的程序。
特点
它是唯一一个在 JVM 规范中没有规定任何 OutOfMemoryError 情况的区域

内存溢出（ OutOfMemoryError ）指的是程序在使用某一块内存区域时，存放的数据需要占用的内存大小超过了虚拟机能提供的内存上限。


它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域

在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期一致

任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。如果当前线程正在执行的是 Java 方法，程序计数器记录的是 JVM 字节码指令地址，如果是执行 native 方法，则是未指定值（undefined）

它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成

字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令


Java虚拟机栈定义|作用Java虚拟机栈（Java Virtual Machine Stack）采用栈的数据结构来管理方法调用中的基本数据，先进后出（First In Last Out）,每一个方法的调用使用一个栈帧（Stack Frame）来保存。
Java虚拟机栈的栈帧（Frame）中主要包含以下内容：

局部变量表（Local Variables）：局部变量表的作用是在运行过程中存放所有的局部变量
操作数栈（Operand Stack）：操作数栈是栈帧中虚拟机在执行指令过程中用来存放临时数据的一块区域
帧数据：帧数据主要包含动态链接、方法出口、异常表的引用
动态链接（Dynamic Linking）：指向运行时常量池的方法引用
方法返回地址（Return Address）：方法正常退出或异常退出的地址
异常表



栈帧的内部结构局部变量表
存储基本数据类型 + 对象引用 + returnAddress 类型（指向了一条字节码指令的地址，已被异常表取代）
以**变量槽(Slot)**为最小单位（32位，64位数据占2个Slot）
编译期确定大小，运行期不改变

举个栗子：
以下代码的局部变量表中会占用几个槽？
public void test4(int k,int m)&#123;    &#123;        int a = 1;        int b = 2;    &#125;    &#123;        int c = 1;    &#125;    int i = 0;    long j = 1;&#125;

分析：

为了节省空间，局部变量表中的槽是可以复用的，一旦某个局部变量不再生效，当前槽就可以再次被使用。


方法执行时，实例对象this、k、m 会被放入局部变量表中，占用3个槽



将1的值放入局部变量表下标为3的位置上，相当于给a进行赋值。



将2放入局部变量表下标为4的位置，给b赋值为2。



ab已经脱离了生效范围，所以下标为3和4的这两个位置可以复用。此时c的值1就可以放入下标为3的位置。



脱离c的生效范围之后，给i赋值就可以复用c的位置。



最后放入j，j是一个long类型，占用两个槽。但是可以复用b所在的位置，所以占用4和5这两个位置


所以，局部变量表数值的长度为6。这一点在编译期间就可以确定了，运行过程中只需要在栈帧中创建长度为6的数组即可。

操作数栈
方法执行的工作区（类似CPU寄存器）
存储计算过程的中间结果

举个栗子：
public int calculate() &#123;    int a = 5;    int b = 3;    int c = a + b;  // 操作过程：                   // 1. iload_0 (压入a [将局部变量表中下标为 0 的 int 类型变量加载到操作数栈上])                   // 2. iload_1 (压入b [将局部变量表中下标为 1 的 int 类型变量加载到操作数栈上])                   // 3. iadd   (弹出两个值，相加后压回)                   // 4. istore_2(存储结果)    return c;&#125;

ps：操作数中的数据类型必须与字节码指令匹配，以上面的 iadd 指令为例，该指令只能用于整型数据的加法运算，它在执行的时候，栈顶的两个数据必须是 int 类型的，不能出现一个 long 型和一个 double 型的数据进行 iadd 命令相加的情况。
帧数据帧数据主要包含动态链接、方法返回地址、异常表的引用。
动态链接(Dynamic Linking)当前类的字节码指令引用了其他类的属性或者方法时，需要将符号引用（编号）转换成对应的运行时常量池中的内存地址。动态链接就保存了编号到运行时常量池的内存地址的映射关系。

指向运行时常量池的方法引用
支持多态特性（后期绑定）

方法返回地址(Return Address)方法出口指的是方法在正确或者异常结束时，当前栈帧会被弹出，同时程序计数器应该指向上一个栈帧中的下一条指令的地址。所以在当前栈帧中，需要存储此方法出口的地址。

存储调用者的程序计数器值
包含正常返回和异常返回两种路径

异常表异常表存放的是代码中异常的处理信息，包含了异常捕获的生效范围以及异常发生后跳转到的字节码指令位置。
栈内存异常StackOverflowError
原因：栈深度超过虚拟机限制（通常由无限递归引起）
// 典型示例：无限递归public void infiniteRecursion() &#123;    infiniteRecursion();&#125;

调节栈大小
-Xss256k-XX:ThreadStackSize=1024Windows（64位）下的JDK8测试最小值为180k，最大值为1024m。

OutOfMemoryError
原因：线程创建过多导致栈空间耗尽
场景：大量线程并发执行（通常需数千线程）

本地方法栈Java虚拟机栈存储了Java方法调用时的栈帧，而本地方法栈存储的是native本地方法的栈帧。
在Hotspot虚拟机中，Java虚拟机栈和本地方法栈实现上使用了同一个栈空间。本地方法栈会在栈内存上生成一个栈帧，临时保存方法的参数同时方便出现异常时也把本地方法的栈信息打印出来。

堆对于大多数应用，Java 堆是 Java 虚拟机管理的内存中最大的一块，被所有线程共享。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数据都在这里分配内存。
为了进行高效的垃圾回收，虚拟机把堆内存逻辑上划分成三块区域（分代的唯一理由就是优化 GC 性能）：

新生带（年轻代）：新对象和没达到一定年龄的对象都在新生代
老年代（养老区）：被长时间使用的对象，老年代的内存空间应该要比年轻代更大
元空间（JDK1.8 之前叫永久代）：像一些方法中的操作临时对象等，JDK1.8 之前是占用 JVM 内存，JDK1.8 之后直接使用物理内存

堆内存溢出
**java.lang.OutOfMemoryError: GC Overhead Limit Exceeded**：当 JVM 花太多时间执行垃圾回收并且只能回收很少的堆空间时，就会发生此错误。
java.lang.OutOfMemoryError: Java heap space :假如在创建新的对象时, 堆内存中的空间不足以存放新创建的对象, 就会引发此错误。和本机的物理内存无关，和我们配置的虚拟机内存大小有关！

设置堆的大小要修改堆的大小，可以使用虚拟机参数 –Xmx（max最大值）和-Xms (初始的total)。
语法：-Xmx值 -Xms值
单位：字节（默认，必须是 1024 的倍数）、k或者K(KB)、m或者M(MB)、g或者G(GB)
限制：Xmx必须大于 2 MB，Xms必须大于1MB
堆内存诊断
jps 工具查看当前系统中有哪些 java 进程
jmap 工具查看堆内存占用情况 jmap - heap 进程id
jconsole 工具图形界面的，多功能的监测工具，可以连续监测
jvisualvm 工具

方法区方法区属于是 JVM 运行时数据区域的一块逻辑区域，是各个线程共享的内存区域。在不同的 JDK 版本上有着不同的实现。在 JDK 7 的时候，方法区被称为永久代（PermGen），而在 JDK 8 的时候，永久代被彻底移除，取而代之的是元空间。
它的结构如下：

方法区内存溢出
JDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小。

-XX:PermSize=N &#x2F;&#x2F;方法区 (永久代) 初始大小

-XX:MaxPermSize=N &#x2F;&#x2F;方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen



JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是本地内存。

-XX:MetaspaceSize=N &#x2F;&#x2F;设置 Metaspace 的初始（和最小大小）
-XX:MaxMetaspaceSize=N &#x2F;&#x2F;设置 Metaspace 的最大大小



运行时常量池常量池就是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量信息。存在.class 文件中的 Constant_Pool 表。
举个栗子：
public class Test &#123;    public static void main(String[] args) &#123;        System.out.println(&quot;Hello World!&quot;);    &#125;&#125;

然后使用 javap -v Test.class 命令反编译查看结果。

运行时常量池
类加载时创建：JVM 加载类时，将 .class 文件的常量池转换后放入方法区
动态性：运行时可以添加新常量（如 String.intern()）
真实地址：将符号引用解析为直接引用（内存真实地址）

动态添加栗子：
String s1 = new String(&quot;Hello&quot;);  // 堆中创建对象String s2 = s1.intern();           // 将&quot;Hello&quot;添加到运行时常量池System.out.println(s1 == s2);       // false（不同对象）System.out.println(&quot;Hello&quot; == s2);  // true（指向常量池同一对象）

常量池 vs 运行时常量池


特性
常量池 (Constant Pool)
运行时常量池 (Runtime Constant Pool)



存在位置
.class 文件中
JVM 方法区中（JDK8+ 的元空间）


创建时机
编译期生成
类加载时创建


内容是否可变
静态不可变
动态可变（运行时添加新常量）


存储内容
符号引用 + 字面量
类加载后的真实引用 + 动态常量


生命周期
文件存在即存在
类卸载时销毁


字符串常量池字符串常量池 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。
特点
常量池中的字符串仅是符号，只有在被用到时才会转化为对象
利用字符串常量池的机制，来避免重复创建字符串对象
字符串变量拼接的原理是StringBuilder
字符串常量拼接的原理是编译器优化
可以使用intern方法，主动将串池中还没有的字符串对象放入串池中

存放位置


JDK版本
字符串常量池位置
影响



JDK ≤ 6
运行时常量池（永久代）
容易引发 PermGen OOM


JDK 7+
堆内存 中单独划分区域
减少 OOM 风险，支持更大字符串池


字符串创建流程：graph TD    A[&quot;new String &#x27;hello&#x27;&quot;] --&gt; B&#123;&quot;池中是否存在？&quot;&#125;    B --&gt;|否| C[&quot;在堆创建新对象&quot;]    B --&gt;|是| D[&quot;返回池中引用&quot;]    C --&gt; E&#123;&quot;调用 intern?&quot;&#125;    E --&gt;|是| F[&quot;将引用加入字符串池&quot;]    E --&gt;|否| G[&quot;直接使用堆对象&quot;]


intern方法
JDK1.8
调用字符串对象的intern()方法，会将该字符串对象尝试放入到串池中。

如果串池中没有该字符串对象，则放入成功，返回引用的对象
如果有该字符串对象，则放入失败,返回字符串里有的该对象

无论放入是否成功，都会返回串池中的字符串对象。
注意：此时如果调用intern方法成功，堆内存与串池中的字符串对象是同一个对象；如果失败，则不是同一个对象

JDK1.6
调用字符串对象的intern方法，会将该字符串对象尝试放入到串池中

如果串池中没有该字符串对象，会将该字符串对象复制一份，再放入到串池中，返回的是复制的对象
如果有该字符串对象，则放入失败，返回串池原有的该字符串的对象

注意：此时无论调用intern方法成功与否，串池中的字符串对象和堆内存中的字符串对象都不是同一个对象


字符串常量池和运行时常量池有什么关系？早期设计时，字符串常量池是属于运行时常量池的一部分，他们存储的位置也是一致的。后续做出了调整，将字符串常量池和运行时常量池做了拆分。

静态变量存储在哪里呢？
JDK6及之前的版本中，静态变量是存放在方法区中的，也就是永久代。
JDK7及之后的版本中，静态变量是存放在堆中的Class对象中，脱离了永久代。具体源码可参考虚拟机源码：BytecodeInterpreter针对putstatic指令的处理。


直接内存直接内存指的就是Direct Memory，常见于Nio操作，区别于io，在读写操作时有着更高的效率。直接内存并不在《Java虚拟机规范》中存在，所以并不属于Java运行时的内存区域。
特点：
常见于 NIO 操作时，用于数据缓冲区
分配回收成本较高，但读写性能高
不受 JVM 内存回收管理




学习文献

https://blog.csdn.net/weixin_50280576/article/details/113775575
https://lisxpq12rl7.feishu.cn/wiki/F2AFw0doOiW89Fkr8kGcCTyVnLh
https://pdai.tech/md/java/jvm/java-jvm-x-overview.html
https://javaguide.cn/java/jvm/jvm-garbage-collection.html
https://javabetter.cn/jvm/jit.html

]]></content>
      <categories>
        <category>JAVA</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 基础 5 - GC 垃圾回收</title>
    <url>/2025/05/25/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%205%20-%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    <content><![CDATA[垃圾回收JVM 垃圾回收 (Garbage Collection, GC) 是 Java 虚拟机自动管理堆内存的核心机制。它负责识别并回收程序中不再使用的对象所占用的内存，防止内存泄漏，极大地简化了开发人员的内存管理工作。  
垃圾回收器如果发现某个对象不再使用，就可以回收该对象。
.lcpwgpxubcvo{zoom: 67%;}

.epvspxrcelpi{zoom:67%;}


自动垃圾回收，自动根据对象是否使用由虚拟机来回收对象

优点：降低程序员实现难度、降低对象回收bug的可能性
缺点：程序员无法控制内存回收的及时性


手动垃圾回收，由程序员编程实现对象的删除

优点：回收及时性高，由程序员把控回收的时机
缺点：编写不当容易出现悬空指针、重复释放、内存泄漏等问题




如果需要手动触发垃圾回收，可以调用System.gc()方法。语法： System.gc()注意事项：   调用System.gc()方法并不一定会立即回收垃圾，仅仅是向Java虚拟机发送一个垃圾回收的请求，具体是否需要执行垃圾回收Java虚拟机会自行判断。

如何判断对象可以回收引用计数法引用计数法会为每个对象维护一个引用计数器，当对象被引用时加1，取消引用时减1。当值为 0 时，就表示该对象不被引用，可以被垃圾收集器回收。
缺点：  

每次引用和取消引用都需要维护计数器，对系统性能会有一定的影响
存在循环引用问题，所谓循环引用就是当A引用B，B同时引用A时会出现对象无法回收的问题。如下图：

.djbvtbxqkndx{zoom:80%;}

可达性分析法通过 GC Roots 作为起始点进行搜索，能够到达到的对象都是存活的，不可达的对象可被回收。


JVM 中的垃圾回收器通过可达性分析来探索所有存活的对象
扫描堆中的对象，看能否沿着 GC Root 对象为起点的引用链找到该对象，如果找不到，则表示可以回收
Java 中可以作为 GC Root 的对象：
虚拟机栈（栈帧中的本地变量表）中引用的对象。
方法区中类静态属性引用的对象
方法区中常量引用的对象
本地方法栈中 JNI（即一般说的Native方法）引用的对象

引用对象.xejdikatdudl{zoom:80%;}

1. 强引用（StrongReference）被强引用关联的对象不会被回收。只有GC Root都不引用该对象时，才会回收强引用对象
2. 软引用（SoftReference）如果一个对象只有软引用引对象时，当程序内存不足时，就会将软引用中的数据进行回收。在JDK 1.2版之后提供了SoftReference类来实现软引用，软引用常用于缓存中。
3. 弱引用（WeakReference）如果一个对象只有弱引用该对象时，在垃圾回收时，无论内存是否充足，就会将弱引用中的数据进行回收。在JDK 1.2版之后提供了WeakReference类来实现弱引用，弱引用主要在ThreadLocal中使用。
4. 虚引用（PhantomReference）（不常见）虚引用也叫幽灵引用&#x2F;幻影引用，不能通过虚引用对象获取到包含的对象。虚引用唯一的用途是当对象被垃圾回收器回收时可以接收到对应的通知。Java中使用PhantomReference实现了虚引用，直接内存中为了及时知道直接内存对象不再使用，从而回收内存，使用了虚引用来实现。
5. 终结器引用（FinalReference）（不常见）终结器引用指的是在对象需要被回收时，终结器引用会关联对象并放置在Finalizer类中的引用队列中，在稍后由一条由FinalizerThread线程从队列中获取对象，然后执行对象的finalize方法，在对象第二次被回收时，该对象才真正的被回收。在这个过程中可以在finalize方法中再将自身对象使用强引用关联上，但是不建议这样做。
垃圾回收算法1. 标记-清除算法
虚拟机执行垃圾回收的过程中，使用可达性分析算法，从GC Root开始通过引用链遍历出所有存活对象。将所有存活的对象进行标记。
然后垃圾收集器根据标识清除没有被标记也就是非存活对象，给堆内存腾出相应的空间


优点：实现简单，只需要在第一阶段给每个对象维护标志位，第二阶段删除对象即可。
缺点：

会产生大量不连续的内存碎片，导致无法给大对象分配内存。由于内存是连续的，所以在对象被删除之后，内存中会出现很多细小的可用内存单元。如果我们需要的是一个比较大的空间，很有可能这些内存单元的大小过小无法进行分配。
分配速度慢。由于内存碎片的存在，需要维护一个空闲链表，极有可能发生每次需要遍历到链表的最后才能获得合适的内存空间。
标记和清除过程效率都不高。

2. 标记-整理算法标记整理算法也叫标记压缩算法，是对标记清理算法中容易产生内存碎片问题的一种解决方案。

标记阶段，将所有存活的对象进行标记。Java中使用可达性分析算法，从GC Root开始通过引用链遍历出所有存活对象。
整理阶段，将存活对象移动到堆的一端。清理掉存活对象的内存空间。


优点：不会产生内存碎片。
缺点：内存变动更频繁，需要整理所有存活对象的引用地址，效率不高。
3. 复制算法将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理，最后会把位置互换。

优点：不会产生内存碎片；吞吐量高，复制算法只需要遍历一次存活对象复制到To空间即可，比标记-整理算法少了一次遍历的过程，因而性能较好，但是不如标记-清除算法，因为标记清除算法不需要进行对象的移动
缺点：内存使用效率低，每次只能让一半的内存空间来为创建对象使用。
4. 分代垃圾回收算法现代优秀的垃圾回收算法，会将上述描述的垃圾回收算法组合进行使用，其中应用最广的就是分代垃圾回收算法(Generational GC)。  
分代垃圾回收将整个内存区域划分为年轻代（复制算法）和老年代（标记 - 清除 或者 标记 - 整理 算法）：
.utgnuntioudp{zoom: 80%;}


分代回收时，创建出来的对象，首先会被放入Eden伊甸园区。

随着对象在Eden区越来越多，如果Eden区满，新创建的对象已经无法放入，就会触发年轻代的GC，称为Minor GC或者Young GC。  
Minor GC会把需要eden中和From需要回收的对象回收，把没有回收的对象放入To区。

接下来，S0会变成To区，S1变成From区。当eden区满时再往里放入对象，依然会发生Minor GC。  
此时会回收eden区和S1(from)中的对象，并把eden和from区中剩余的对象放入S0。注意：每次Minor GC中都会为对象记录他的年龄，初始值为0，每次GC完加1。

如果Minor GC后对象的年龄达到阈值（最大15，默认值和垃圾回收器有关），对象就会被晋升至老年代。

当老年代中空间不足，无法放入新的对象时，先尝试minor gc如果还是不足，就会触发Full GC，Full GC会对整个堆进行垃圾回收。
如果Full GC依然无法回收掉老年代的对象，那么当对象继续放入老年代时，就会抛出Out Of Memory异常。

特殊情况：当遇到一个较大的对象时，就算新生代的伊甸园为空，也无法容纳该对象时，会将该对象直接晋升为老年代。


相关 JVM 参数


含义
参数



堆初始大小必须是1024倍数且大于1MB
-Xms


堆最大大小必须是1024倍数且大于1MB
-Xmx 或 -XX:MaxHeapSize&#x3D;size


新生代大小
-Xmn 或 (-XX:NewSize&#x3D;size + -XX:MaxNewSize&#x3D;size )


幸存区比例（动态）
-XX:InitialSurvivorRatio&#x3D;ratio 和 -XX:+UseAdaptiveSizePolicy


伊甸园区和幸存区的比例，默认8，新生代1G，伊甸园区800MB,S0和S1各100MB
-XX:SurvivorRatio&#x3D;ratio


晋升阈值
-XX:MaxTenuringThreshold&#x3D;threshold


晋升详情
-XX:+PrintTenuringDistribution


打印GC日志
-XX:+PrintGCDetails -verbose:gc


FullGC 前 MinorGC
-XX:+ScavengeBeforeFullGC


垃圾回收器为什么分代GC算法要把堆分成年轻代和老年代？首先我们要知道堆内存中对象的特性：

系统中的大部分对象，都是创建出来之后很快就不再使用可以被回收，比如用户获取订单数据，订单数据返回给用户之后就可以释放了。
老年代中会存放长期存活的对象，比如Spring的大部分bean对象，在程序启动之后就不会被回收了。
在虚拟机的默认设置中，新生代大小要远小于老年代的大小。

分代GC算法将堆分成年轻代和老年代主要原因有：

可以通过调整年轻代和老年代的比例来适应不同类型的应用程序，提高内存的利用率和性能。

新生代和老年代使用不同的垃圾回收算法，新生代一般选择复制算法，老年代可以选择标记-清除和标记-整理算法，由程序员来选择灵活度较高。

分代的设计中允许只回收新生代（minor gc），如果能满足对象分配的要求就不需要对整个堆进行回收(full gc),STW时间就会减少。


垃圾回收器是垃圾回收算法的具体实现。
由于垃圾回收器分为年轻代和老年代，除了G1之外其他垃圾回收器必须成对组合进行使用。
具体的关系图如下：


Serial 收集器Serial 收集器是最基本的、发展历史最悠久的收集器。是一种单线程串行回收年轻代的垃圾回收器，只会使用一个线程进行垃圾收集工作，使用标记-复制算法。  
.wqokvxsvygxh{zoom:80%;}

优点：

单线程、简单高效（与其他收集器的单线程相比）。对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程手机效率。收集器进行垃圾回收时，必须暂停其他所有的工作线程（ “Stop The World” ），直到它结束。

 缺点：

多CPU下吞吐量不如其他垃圾回收器，堆如果偏大会让用户线程处于长时间的等待。

适用场景： 

Java编写的客户端程序或者硬件配置有限的场景。


-XX:+UseSerialGC&#x3D;serial + serialOld

SerialOld垃圾回收器SerialOld是Serial垃圾回收器的老年代版本，采用单线程串行回收。使用标记-整理算法。
.ucyzdweithhi{zoom:80%;}

ParNew 收集器ParNew 收集器其实就是 Serial 收集器在多CPU下的优化，使用多线程进行垃圾回收。新生代采用标记-复制算法，老年代采用标记-整理算法。
-XX:+UseParNewGC 新生代使用ParNew回收器， 老年代使用串行回收器

优点：

多线程、ParNew 收集器默认开启的收集线程数与CPU的数量相同，在 CPU 非常多的环境中，可以使用 -XX:ParallelGCThreads 参数来限制垃圾收集的线程数。和 Serial 收集器一样存在 Stop The World 问题。

缺点：

吞吐量和停顿时间不如G1，所以在JDK9之后不建议使用。

适用场景：

JDK8及之前的版本中，与CMS老年代垃圾回收器搭配使用

CMS 收集器CMS(Concurrent Mark Sweep)，从名字中的Mark Sweep这两个词可以看出，CMS 收集器是一种 标记-清除算法实现的。 老年代收集器。参数：XX:+UseConcMarkSweepGC。
CMS垃圾回收器关注的是系统的暂停时间，允许用户线程和垃圾回收线程在某些步骤中同时执行，减少了用户线程的等待时间。

CMS执行步骤：
1.初始标记，用极短的时间标记出GC Roots能直接关联到的对象。速度很快但是仍存在Stop The World问题。
2.并发标记,   标记所有的对象，用户线程不需要暂停。
3.重新标记，由于并发标记阶段有些对象会发生了变化，存在错标、漏标等情况，需要重新标记。存在Stop The World问题。
4.并发清理，清理死亡的对象，用户线程不需要暂停。但是清除的过程中，可能任然会有新的垃圾产生，这些垃圾就叫浮动垃圾，如果当用户需要存入一个很大的对象时，新生代放不下去，老年代由于浮动垃圾过多，就会退化为 serial Old 收集器，将老年代垃圾进行标记-整理，当然这也是很耗费时间的！

在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。
CMS 垃圾回收器在 Java 9 中已经被标记为过时(deprecated)，并在 Java 14 中被移除。

优点：

系统由于垃圾回收出现的停顿时间较短，用户体验好。

缺点：

吞吐量低: 低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。

无法处理在并发清理过程中产生的“浮动垃圾”，不能做到完全的垃圾回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。

标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。


适用场景:

大型的互联网系统中用户请求数据量大、频率高的场景，比如订单接口、商品接口等

Parallel Scavenge垃圾回收器Parallel Scavenge是JDK8默认的年轻代垃圾回收器，多线程并行回收，关注的是系统的吞吐量（指 CPU 用于运行用户代码的时间占总时间的比值）。具备自动调整堆内存大小的特点。使用 标记-复制算法。
优点：

吞吐量高，可以通过一个开关参数打开 GC 自适应的调节策略(GC Ergonomics)。为了提高吞吐量，虚拟机会动态调整堆的参数。

GC自适应调节策略：Parallel Scavenge收集器可设置-XX:+UseAdptiveSizePolicy参数。当开关打开时不需要手动指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:SurvivorRation）、晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等，虚拟机会根据系统的运行状况收集性能监控信息，动态设置这些参数以提供最优的停顿时间和最高的吞吐量，这种调节方式称为GC的自适应调节策略。



缺点：

不能保证单次的停顿时间。

适用场景：

后台任务，不需要与用户交互，并且容易产生大量的对象。比如：大数据的处理，大文件导出。

Parallel Old垃圾回收器Parallel Scavenge 收集器的老年代版本。使用多线程和标记-整理算法。在注重吞吐量以及 CPU 资源的场合，都可以优先考虑 Parallel Scavenge 收集器和 Parallel Old 收集器。
.gvmgyvmlcegt{zoom:80%;}

优点：

并发收集，在多核CPU下效率较高

缺点：

暂停时间会比较长

适用场景：

与Parallel Scavenge配套使用

G1垃圾回收器JDK9之后默认的垃圾回收器是G1（Garbage First）垃圾回收器。Parallel Scavenge关注吞吐量，允许用户设置最大暂停时间 ，但是会减少年轻代可用空间的大小。CMS关注暂停时间，但是吞吐量方面会下降。
而G1设计目标就是将上述两种垃圾回收器的优点融合：
1.支持巨大的堆空间回收，并有较高的吞吐量。
2.支持多CPU并行垃圾回收。
3.允许用户设置最大暂停时间。
G1出现之前的垃圾回收器，年轻代和老年代一般是连续的，如下图：
.jhnsjqkkukcr{zoom:80%;}

G1的整个堆会被划分成多个大小相等的区域，称之为区Region，区域不要求是连续的。每个 Region 逻辑上可属于 Eden、Survivor、Old或 Humongous（存储大于 Region 一半大小的对象）。Region的大小通过堆空间大小&#x2F;2048计算得到，也可以通过参数-XX:G1HeapRegionSize&#x3D;32m指定(其中32m指定region大小为32M)，Region size必须是2的指数幂，取值范围从1M到32M。
.kkmaiqfnlqpx{zoom:80%;}

G1 执行流程1. Young GC（新生代回收）年轻代回收（Young GC），回收Eden区和Survivor区中不用的对象。会导致STW，G1中可以通过参数 -XX:MaxGCPauseMillis=n（默认200）设置每次垃圾回收时的最大暂停时间毫秒数，G1垃圾回收器会尽可能地保证暂停时间。

触发条件：
Eden 区占满，或 G1 预测回收时间接近目标停顿时间。

步骤：

新创建的对象会存放在Eden区。当G1判断年轻代区不足（max默认60%），无法分配对象时需要回收时会执行Young GC。

标记出Eden和Survivor区域中的存活对象。

根据配置的最大暂停时间选择某些区域将存活对象复制到一个新的Survivor区中（年龄+1），清空这些区域。

G1在进行Young GC的过程中会去记录每次垃圾回收时每个Eden区和Survivor区的平均耗时，以作为下次回收时的参考依据。这样就可以根据配置的最大暂停时间计算出本次回收时最多能回收多少个Region区域了。比如 -XX:MaxGCPauseMillis&#x3D;n（默认200），每个Region回收耗时40ms，那么这次回收最多只能回收4个Region。


后续Young GC时与之前相同，只不过Survivor区中存活对象会被搬运到另一个Survivor区。

当某个在Survivor区存活对象的年龄到达阈值（默认15），将被放入老年代。

部分对象如果大小超过Region的一半，会直接放入老年代，这类老年代被称为Humongous区。比如堆内存是4G，每个Region是2M，只要一个大对象超过了1M就被放入Humongous区，如果对象过大会横跨多个Region。

多次回收之后，会出现很多Old老年代区，此时总堆占有率达到阈值时（-XX:InitiatingHeapOccupancyPercent默认45%）会触发混合回收MixedGC。回收所有年轻代和部分老年代的对象以及大对象区。采用复制算法来完成。




2. Mixed GC（混合回收，核心流程）
触发条件：
老年代占用达 45%（默认）或手动触发。G1对老年代的清理会选择存活度最低的区域来进行回收，这样可以保证回收效率最高，这也是G1（Garbage first）名称的由来。最后清理阶段使用复制算法，不会产生内存碎片。

步骤：

初始标记（STW）：采用三色标记法标记从GC Root可直达的对象。 STW时间极短。
并发标记（并行）：递归标记所有存活对象，使用 SATB（快照）记录引用变化，避免漏标。
最终标记（STW）：处理并发标记期间的引用变更，修复漏标。
筛选回收（STW）：
按 “回收收益” 排序 Region，选择回收集合（CSet）。
复制存活对象到新 Region，清空原 Region。






注意：如果清理过程中发现没有足够的空Region存放转移的对象，会出现Full GC。单线程执行标记-整理算法，此时会导致用户线程的暂停。所以尽量保证应该用的堆内存有一定多余的空间。
3. Full GC
触发条件：

G1 在老年代内存不足时（老年代所占内存超过阈值）。
如果垃圾产生速度慢于垃圾回收速度，不会触发 Full GC，还是并发地进行清理
如果垃圾产生速度快于垃圾回收速度，便会触发 Full GC，然后退化成 serial Old 收集器串行的收集，就会导致停顿的时候长。


特点：


单线程全堆扫描，停顿时间极长，需通过调优避免
学习文献

https://blog.csdn.net/weixin_50280576/article/details/113775575
https://lisxpq12rl7.feishu.cn/wiki/F2AFw0doOiW89Fkr8kGcCTyVnLh
https://pdai.tech/md/java/jvm/java-jvm-x-overview.html
https://javaguide.cn/java/jvm/jvm-garbage-collection.html
https://javabetter.cn/jvm/jit.html

]]></content>
      <categories>
        <category>JAVA</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
</search>
